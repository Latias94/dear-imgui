// AUTOGENERATED: pregenerated bindings for docs.rs/offline builds
// Note: inner attributes are intentionally omitted to avoid include-context errors.

/* automatically generated by rust-bindgen 0.72.1 */

pub type ImU32 = ::std::os::raw::c_uint;
pub type vgButtons = ::std::os::raw::c_int;
pub type vgModifiers = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct Vec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct vec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct vec3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Mat4 {
    pub __bindgen_anon_1: Mat4__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Mat4__bindgen_ty_1 {
    pub f: [f32; 16usize],
    pub v: [Vec4; 4usize],
}
impl Default for Mat4__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for Mat4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct quat {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_vec3 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut vec3,
}
impl Default for ImVector_vec3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct imguiGizmo {
    pub qtV: quat,
    pub qtV2: quat,
    pub posPanDolly: vec3,
    pub buttonPanDolly: vgButtons,
    pub axesVecModifier: vec3,
    pub drawMode: ::std::os::raw::c_int,
    pub axesOriginType: ::std::os::raw::c_int,
    pub showFullAxes: bool,
}
unsafe extern "C" {
    pub fn imguiGizmo_buildPlane(size: f32, thickness: f32);
}
unsafe extern "C" {
    pub fn imguiGizmo_buildCube(size: f32);
}
unsafe extern "C" {
    pub fn imguiGizmo_buildPolygon(size: vec3, vtx: *mut ImVector_vec3, norm: *mut ImVector_vec3);
}
unsafe extern "C" {
    pub fn imguiGizmo_buildSphere(radius: f32, tessFactor: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imguiGizmo_buildCone(x0: f32, x1: f32, radius: f32, slices: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imguiGizmo_buildCylinder(x0: f32, x1: f32, radius: f32, slices: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn imguiGizmo_resizeAxesOf(newSize: vec3);
}
unsafe extern "C" {
    pub fn imguiGizmo_restoreAxesSize();
}
unsafe extern "C" {
    pub fn imguiGizmo_resizeSolidOf(newSize: f32);
}
unsafe extern "C" {
    pub fn imguiGizmo_restoreSolidSize();
}
unsafe extern "C" {
    pub fn imguiGizmo_setDirectionColor_U32U32(dColor: ImU32, pColor: ImU32);
}
unsafe extern "C" {
    pub fn imguiGizmo_setDirectionColor_Vec4Vec4(dColor: ImVec4, pColor: ImVec4);
}
unsafe extern "C" {
    pub fn imguiGizmo_setDirectionColor_U32(color: ImU32);
}
unsafe extern "C" {
    pub fn imguiGizmo_setDirectionColor_Vec4(color: ImVec4);
}
unsafe extern "C" {
    pub fn imguiGizmo_restoreDirectionColor();
}
unsafe extern "C" {
    pub fn imguiGizmo_setSphereColors_Vec4(a: ImVec4, b: ImVec4);
}
unsafe extern "C" {
    pub fn imguiGizmo_setSphereColors_U32(a: ImU32, b: ImU32);
}
unsafe extern "C" {
    pub fn imguiGizmo_restoreSphereColors();
}
unsafe extern "C" {
    pub fn imguiGizmo_setGizmoFeelingRot(f: f32);
}
unsafe extern "C" {
    pub fn imguiGizmo_getGizmoFeelingRot() -> f32;
}
unsafe extern "C" {
    pub fn imguiGizmo_setPanModifier(v: vgModifiers);
}
unsafe extern "C" {
    pub fn imguiGizmo_setDollyModifier(v: vgModifiers);
}
unsafe extern "C" {
    pub fn imguiGizmo_setDollyScale(scale: f32);
}
unsafe extern "C" {
    pub fn imguiGizmo_getDollyScale() -> f32;
}
unsafe extern "C" {
    pub fn imguiGizmo_setDollyWheelScale(scale: f32);
}
unsafe extern "C" {
    pub fn imguiGizmo_getDollyWheelScale() -> f32;
}
unsafe extern "C" {
    pub fn imguiGizmo_setPanScale(scale: f32);
}
unsafe extern "C" {
    pub fn imguiGizmo_getPanScale() -> f32;
}
unsafe extern "C" {
    pub fn imguiGizmo_flipRotOnX(b: bool);
}
unsafe extern "C" {
    pub fn imguiGizmo_flipRotOnY(b: bool);
}
unsafe extern "C" {
    pub fn imguiGizmo_flipRotOnZ(b: bool);
}
unsafe extern "C" {
    pub fn imguiGizmo_setFlipDolly(b: bool);
}
unsafe extern "C" {
    pub fn imguiGizmo_setFlipPanX(b: bool);
}
unsafe extern "C" {
    pub fn imguiGizmo_setFlipPanY(b: bool);
}
unsafe extern "C" {
    pub fn imguiGizmo_getFlipRotOnX() -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_getFlipRotOnY() -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_getFlipRotOnZ() -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_getFlipPanX() -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_getFlipPanY() -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_getFlipDolly() -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_reverseX(b: bool);
}
unsafe extern "C" {
    pub fn imguiGizmo_reverseY(b: bool);
}
unsafe extern "C" {
    pub fn imguiGizmo_reverseZ(b: bool);
}
unsafe extern "C" {
    pub fn imguiGizmo_getReverseX() -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_getReverseY() -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_getReverseZ() -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_drawFunc(
        self_: *mut imguiGizmo,
        label: *const ::std::os::raw::c_char,
        size: f32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_modeSettings(self_: *mut imguiGizmo, mode: u32);
}
unsafe extern "C" {
    pub fn imguiGizmo_setDualMode(self_: *mut imguiGizmo, mode: u32);
}
unsafe extern "C" {
    pub fn imguiGizmo_getTransforms_vec3Ptr(
        self_: *mut imguiGizmo,
        q: *mut quat,
        label: *const ::std::os::raw::c_char,
        vDir: *mut vec3,
        size: f32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_getTransforms_vec4Ptr(
        self_: *mut imguiGizmo,
        q: *mut quat,
        label: *const ::std::os::raw::c_char,
        axis_angle: *mut vec4,
        size: f32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn imguiGizmo_checkTowards_vec3(self_: *mut imguiGizmo, v: vec3) -> vec3;
}
unsafe extern "C" {
    pub fn imguiGizmo_checkTowards_vec4(self_: *mut imguiGizmo, v: vec4) -> vec4;
}
unsafe extern "C" {
    pub fn imguiGizmo_checkTowards_quat(self_: *mut imguiGizmo, q: quat) -> quat;
}
unsafe extern "C" {
    pub fn iggizmo3D_quatPtrFloat(
        t: *const ::std::os::raw::c_char,
        q: *mut quat,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_vec4Ptr(
        t: *const ::std::os::raw::c_char,
        v: *mut vec4,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_vec3PtrFloat(
        t: *const ::std::os::raw::c_char,
        v: *mut vec3,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_quatPtrquatPtr(
        t: *const ::std::os::raw::c_char,
        q: *mut quat,
        ql: *mut quat,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_quatPtrvec4Ptr(
        t: *const ::std::os::raw::c_char,
        q: *mut quat,
        v: *mut vec4,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_quatPtrvec3Ptr(
        t: *const ::std::os::raw::c_char,
        q: *mut quat,
        v: *mut vec3,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_vec3PtrquatPtrFloat(
        t: *const ::std::os::raw::c_char,
        vm: *mut vec3,
        q: *mut quat,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_vec3Ptrvec4Ptr(
        t: *const ::std::os::raw::c_char,
        vm: *mut vec3,
        v: *mut vec4,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_vec3Ptrvec3Ptr(
        t: *const ::std::os::raw::c_char,
        vm: *mut vec3,
        v: *mut vec3,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_vec3PtrquatPtrquatPtr(
        t: *const ::std::os::raw::c_char,
        vm: *mut vec3,
        q: *mut quat,
        ql: *mut quat,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_vec3PtrquatPtrvec4Ptr(
        t: *const ::std::os::raw::c_char,
        vm: *mut vec3,
        q: *mut quat,
        v: *mut vec4,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn iggizmo3D_vec3PtrquatPtrvec3Ptr(
        t: *const ::std::os::raw::c_char,
        vm: *mut vec3,
        q: *mut quat,
        v: *mut vec3,
        sz: f32,
        flag: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn mat4_cast(q: *mut quat, mat: *mut Mat4);
}
unsafe extern "C" {
    pub fn mat4_pos_cast(q: *mut quat, pos: vec3, mat: *mut Mat4);
}
unsafe extern "C" {
    pub fn quat_cast(f: *mut f32, qq: *mut quat);
}
unsafe extern "C" {
    pub fn quat_pos_cast(f: *mut f32, qq: *mut quat, pos: *mut vec3);
}

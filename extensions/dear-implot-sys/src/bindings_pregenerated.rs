// AUTOGENERATED: pregenerated bindings for docs.rs/offline builds
// Note: inner attributes are intentionally omitted to avoid include-context errors.

/* automatically generated by rust-bindgen 0.72.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub type va_list = *mut ::std::os::raw::c_char;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
impl Default for _iobuf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FILE = _iobuf;
pub type ImU64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockRequest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNodeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct STB_TexteditState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbrp_node {
    _unused: [u8; 0],
}
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiChildFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiDockNodeFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiItemFlags = ::std::os::raw::c_int;
pub type ImGuiKeyChord = ::std::os::raw::c_int;
pub type ImGuiListClipperFlags = ::std::os::raw::c_int;
pub type ImGuiMultiSelectFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTableFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnFlags = ::std::os::raw::c_int;
pub type ImGuiTableRowFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiViewportFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar = ImWchar16;
pub type ImGuiSelectionUserData = ImS64;
pub type ImGuiSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
#[repr(C)]
pub struct ImTextureRef {
    pub _TexData: *mut ImTextureData,
    pub _TexID: ImTextureID,
}
impl Default for ImTextureRef {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiDir_None: ImGuiDir = -1;
pub const ImGuiDir_Left: ImGuiDir = 0;
pub const ImGuiDir_Right: ImGuiDir = 1;
pub const ImGuiDir_Up: ImGuiDir = 2;
pub const ImGuiDir_Down: ImGuiDir = 3;
pub const ImGuiDir_COUNT: ImGuiDir = 4;
pub type ImGuiDir = ::std::os::raw::c_int;
pub const ImGuiSortDirection_None: ImGuiSortDirection = 0;
pub const ImGuiSortDirection_Ascending: ImGuiSortDirection = 1;
pub const ImGuiSortDirection_Descending: ImGuiSortDirection = 2;
pub type ImGuiSortDirection = ::std::os::raw::c_int;
pub const ImGuiKey_None: ImGuiKey = 0;
pub const ImGuiKey_NamedKey_BEGIN: ImGuiKey = 512;
pub const ImGuiKey_Tab: ImGuiKey = 512;
pub const ImGuiKey_LeftArrow: ImGuiKey = 513;
pub const ImGuiKey_RightArrow: ImGuiKey = 514;
pub const ImGuiKey_UpArrow: ImGuiKey = 515;
pub const ImGuiKey_DownArrow: ImGuiKey = 516;
pub const ImGuiKey_PageUp: ImGuiKey = 517;
pub const ImGuiKey_PageDown: ImGuiKey = 518;
pub const ImGuiKey_Home: ImGuiKey = 519;
pub const ImGuiKey_End: ImGuiKey = 520;
pub const ImGuiKey_Insert: ImGuiKey = 521;
pub const ImGuiKey_Delete: ImGuiKey = 522;
pub const ImGuiKey_Backspace: ImGuiKey = 523;
pub const ImGuiKey_Space: ImGuiKey = 524;
pub const ImGuiKey_Enter: ImGuiKey = 525;
pub const ImGuiKey_Escape: ImGuiKey = 526;
pub const ImGuiKey_LeftCtrl: ImGuiKey = 527;
pub const ImGuiKey_LeftShift: ImGuiKey = 528;
pub const ImGuiKey_LeftAlt: ImGuiKey = 529;
pub const ImGuiKey_LeftSuper: ImGuiKey = 530;
pub const ImGuiKey_RightCtrl: ImGuiKey = 531;
pub const ImGuiKey_RightShift: ImGuiKey = 532;
pub const ImGuiKey_RightAlt: ImGuiKey = 533;
pub const ImGuiKey_RightSuper: ImGuiKey = 534;
pub const ImGuiKey_Menu: ImGuiKey = 535;
pub const ImGuiKey_0: ImGuiKey = 536;
pub const ImGuiKey_1: ImGuiKey = 537;
pub const ImGuiKey_2: ImGuiKey = 538;
pub const ImGuiKey_3: ImGuiKey = 539;
pub const ImGuiKey_4: ImGuiKey = 540;
pub const ImGuiKey_5: ImGuiKey = 541;
pub const ImGuiKey_6: ImGuiKey = 542;
pub const ImGuiKey_7: ImGuiKey = 543;
pub const ImGuiKey_8: ImGuiKey = 544;
pub const ImGuiKey_9: ImGuiKey = 545;
pub const ImGuiKey_A: ImGuiKey = 546;
pub const ImGuiKey_B: ImGuiKey = 547;
pub const ImGuiKey_C: ImGuiKey = 548;
pub const ImGuiKey_D: ImGuiKey = 549;
pub const ImGuiKey_E: ImGuiKey = 550;
pub const ImGuiKey_F: ImGuiKey = 551;
pub const ImGuiKey_G: ImGuiKey = 552;
pub const ImGuiKey_H: ImGuiKey = 553;
pub const ImGuiKey_I: ImGuiKey = 554;
pub const ImGuiKey_J: ImGuiKey = 555;
pub const ImGuiKey_K: ImGuiKey = 556;
pub const ImGuiKey_L: ImGuiKey = 557;
pub const ImGuiKey_M: ImGuiKey = 558;
pub const ImGuiKey_N: ImGuiKey = 559;
pub const ImGuiKey_O: ImGuiKey = 560;
pub const ImGuiKey_P: ImGuiKey = 561;
pub const ImGuiKey_Q: ImGuiKey = 562;
pub const ImGuiKey_R: ImGuiKey = 563;
pub const ImGuiKey_S: ImGuiKey = 564;
pub const ImGuiKey_T: ImGuiKey = 565;
pub const ImGuiKey_U: ImGuiKey = 566;
pub const ImGuiKey_V: ImGuiKey = 567;
pub const ImGuiKey_W: ImGuiKey = 568;
pub const ImGuiKey_X: ImGuiKey = 569;
pub const ImGuiKey_Y: ImGuiKey = 570;
pub const ImGuiKey_Z: ImGuiKey = 571;
pub const ImGuiKey_F1: ImGuiKey = 572;
pub const ImGuiKey_F2: ImGuiKey = 573;
pub const ImGuiKey_F3: ImGuiKey = 574;
pub const ImGuiKey_F4: ImGuiKey = 575;
pub const ImGuiKey_F5: ImGuiKey = 576;
pub const ImGuiKey_F6: ImGuiKey = 577;
pub const ImGuiKey_F7: ImGuiKey = 578;
pub const ImGuiKey_F8: ImGuiKey = 579;
pub const ImGuiKey_F9: ImGuiKey = 580;
pub const ImGuiKey_F10: ImGuiKey = 581;
pub const ImGuiKey_F11: ImGuiKey = 582;
pub const ImGuiKey_F12: ImGuiKey = 583;
pub const ImGuiKey_F13: ImGuiKey = 584;
pub const ImGuiKey_F14: ImGuiKey = 585;
pub const ImGuiKey_F15: ImGuiKey = 586;
pub const ImGuiKey_F16: ImGuiKey = 587;
pub const ImGuiKey_F17: ImGuiKey = 588;
pub const ImGuiKey_F18: ImGuiKey = 589;
pub const ImGuiKey_F19: ImGuiKey = 590;
pub const ImGuiKey_F20: ImGuiKey = 591;
pub const ImGuiKey_F21: ImGuiKey = 592;
pub const ImGuiKey_F22: ImGuiKey = 593;
pub const ImGuiKey_F23: ImGuiKey = 594;
pub const ImGuiKey_F24: ImGuiKey = 595;
pub const ImGuiKey_Apostrophe: ImGuiKey = 596;
pub const ImGuiKey_Comma: ImGuiKey = 597;
pub const ImGuiKey_Minus: ImGuiKey = 598;
pub const ImGuiKey_Period: ImGuiKey = 599;
pub const ImGuiKey_Slash: ImGuiKey = 600;
pub const ImGuiKey_Semicolon: ImGuiKey = 601;
pub const ImGuiKey_Equal: ImGuiKey = 602;
pub const ImGuiKey_LeftBracket: ImGuiKey = 603;
pub const ImGuiKey_Backslash: ImGuiKey = 604;
pub const ImGuiKey_RightBracket: ImGuiKey = 605;
pub const ImGuiKey_GraveAccent: ImGuiKey = 606;
pub const ImGuiKey_CapsLock: ImGuiKey = 607;
pub const ImGuiKey_ScrollLock: ImGuiKey = 608;
pub const ImGuiKey_NumLock: ImGuiKey = 609;
pub const ImGuiKey_PrintScreen: ImGuiKey = 610;
pub const ImGuiKey_Pause: ImGuiKey = 611;
pub const ImGuiKey_Keypad0: ImGuiKey = 612;
pub const ImGuiKey_Keypad1: ImGuiKey = 613;
pub const ImGuiKey_Keypad2: ImGuiKey = 614;
pub const ImGuiKey_Keypad3: ImGuiKey = 615;
pub const ImGuiKey_Keypad4: ImGuiKey = 616;
pub const ImGuiKey_Keypad5: ImGuiKey = 617;
pub const ImGuiKey_Keypad6: ImGuiKey = 618;
pub const ImGuiKey_Keypad7: ImGuiKey = 619;
pub const ImGuiKey_Keypad8: ImGuiKey = 620;
pub const ImGuiKey_Keypad9: ImGuiKey = 621;
pub const ImGuiKey_KeypadDecimal: ImGuiKey = 622;
pub const ImGuiKey_KeypadDivide: ImGuiKey = 623;
pub const ImGuiKey_KeypadMultiply: ImGuiKey = 624;
pub const ImGuiKey_KeypadSubtract: ImGuiKey = 625;
pub const ImGuiKey_KeypadAdd: ImGuiKey = 626;
pub const ImGuiKey_KeypadEnter: ImGuiKey = 627;
pub const ImGuiKey_KeypadEqual: ImGuiKey = 628;
pub const ImGuiKey_AppBack: ImGuiKey = 629;
pub const ImGuiKey_AppForward: ImGuiKey = 630;
pub const ImGuiKey_Oem102: ImGuiKey = 631;
pub const ImGuiKey_GamepadStart: ImGuiKey = 632;
pub const ImGuiKey_GamepadBack: ImGuiKey = 633;
pub const ImGuiKey_GamepadFaceLeft: ImGuiKey = 634;
pub const ImGuiKey_GamepadFaceRight: ImGuiKey = 635;
pub const ImGuiKey_GamepadFaceUp: ImGuiKey = 636;
pub const ImGuiKey_GamepadFaceDown: ImGuiKey = 637;
pub const ImGuiKey_GamepadDpadLeft: ImGuiKey = 638;
pub const ImGuiKey_GamepadDpadRight: ImGuiKey = 639;
pub const ImGuiKey_GamepadDpadUp: ImGuiKey = 640;
pub const ImGuiKey_GamepadDpadDown: ImGuiKey = 641;
pub const ImGuiKey_GamepadL1: ImGuiKey = 642;
pub const ImGuiKey_GamepadR1: ImGuiKey = 643;
pub const ImGuiKey_GamepadL2: ImGuiKey = 644;
pub const ImGuiKey_GamepadR2: ImGuiKey = 645;
pub const ImGuiKey_GamepadL3: ImGuiKey = 646;
pub const ImGuiKey_GamepadR3: ImGuiKey = 647;
pub const ImGuiKey_GamepadLStickLeft: ImGuiKey = 648;
pub const ImGuiKey_GamepadLStickRight: ImGuiKey = 649;
pub const ImGuiKey_GamepadLStickUp: ImGuiKey = 650;
pub const ImGuiKey_GamepadLStickDown: ImGuiKey = 651;
pub const ImGuiKey_GamepadRStickLeft: ImGuiKey = 652;
pub const ImGuiKey_GamepadRStickRight: ImGuiKey = 653;
pub const ImGuiKey_GamepadRStickUp: ImGuiKey = 654;
pub const ImGuiKey_GamepadRStickDown: ImGuiKey = 655;
pub const ImGuiKey_MouseLeft: ImGuiKey = 656;
pub const ImGuiKey_MouseRight: ImGuiKey = 657;
pub const ImGuiKey_MouseMiddle: ImGuiKey = 658;
pub const ImGuiKey_MouseX1: ImGuiKey = 659;
pub const ImGuiKey_MouseX2: ImGuiKey = 660;
pub const ImGuiKey_MouseWheelX: ImGuiKey = 661;
pub const ImGuiKey_MouseWheelY: ImGuiKey = 662;
pub const ImGuiKey_ReservedForModCtrl: ImGuiKey = 663;
pub const ImGuiKey_ReservedForModShift: ImGuiKey = 664;
pub const ImGuiKey_ReservedForModAlt: ImGuiKey = 665;
pub const ImGuiKey_ReservedForModSuper: ImGuiKey = 666;
pub const ImGuiKey_NamedKey_END: ImGuiKey = 667;
pub const ImGuiKey_NamedKey_COUNT: ImGuiKey = 155;
pub const ImGuiMod_None: ImGuiKey = 0;
pub const ImGuiMod_Ctrl: ImGuiKey = 4096;
pub const ImGuiMod_Shift: ImGuiKey = 8192;
pub const ImGuiMod_Alt: ImGuiKey = 16384;
pub const ImGuiMod_Super: ImGuiKey = 32768;
pub const ImGuiMod_Mask_: ImGuiKey = 61440;
pub type ImGuiKey = ::std::os::raw::c_int;
pub const ImGuiMouseSource_Mouse: ImGuiMouseSource = 0;
pub const ImGuiMouseSource_TouchScreen: ImGuiMouseSource = 1;
pub const ImGuiMouseSource_Pen: ImGuiMouseSource = 2;
pub const ImGuiMouseSource_COUNT: ImGuiMouseSource = 3;
pub type ImGuiMouseSource = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTableSortSpecs {
    pub Specs: *const ImGuiTableColumnSortSpecs,
    pub SpecsCount: ::std::os::raw::c_int,
    pub SpecsDirty: bool,
}
impl Default for ImGuiTableSortSpecs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTableColumnSortSpecs {
    pub ColumnUserID: ImGuiID,
    pub ColumnIndex: ImS16,
    pub SortOrder: ImS16,
    pub SortDirection: ImGuiSortDirection,
}
impl Default for ImGuiTableColumnSortSpecs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiKeyData {
    pub Down: bool,
    pub DownDuration: f32,
    pub DownDurationPrev: f32,
    pub AnalogValue: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImWchar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImWchar,
}
impl Default for ImVector_ImWchar {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
impl Default for ImGuiSizeCallbackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiWindowClass {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub FocusRouteParentWindowId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiPayload {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
impl Default for ImGuiPayload {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_char,
}
impl Default for ImVector_char {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector_char,
}
impl Default for ImGuiTextBuffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
}
impl Default for ImGuiStoragePair__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ImGuiStoragePair {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiStoragePair {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStoragePair,
}
impl Default for ImVector_ImGuiStoragePair {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiStorage {
    pub Data: ImVector_ImGuiStoragePair,
}
impl Default for ImGuiStorage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiListClipper {
    pub Ctx: *mut ImGuiContext,
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f64,
    pub StartSeekOffsetY: f64,
    pub TempData: *mut ::std::os::raw::c_void,
    pub Flags: ImGuiListClipperFlags,
}
impl Default for ImGuiListClipper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiSelectionRequest {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiSelectionRequest,
}
impl Default for ImVector_ImGuiSelectionRequest {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiMultiSelectIO {
    pub Requests: ImVector_ImGuiSelectionRequest,
    pub RangeSrcItem: ImGuiSelectionUserData,
    pub NavIdItem: ImGuiSelectionUserData,
    pub NavIdSelected: bool,
    pub RangeSrcReset: bool,
    pub ItemsCount: ::std::os::raw::c_int,
}
impl Default for ImGuiMultiSelectIO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiSelectionRequestType_None: ImGuiSelectionRequestType = 0;
pub const ImGuiSelectionRequestType_SetAll: ImGuiSelectionRequestType = 1;
pub const ImGuiSelectionRequestType_SetRange: ImGuiSelectionRequestType = 2;
pub type ImGuiSelectionRequestType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiSelectionRequest {
    pub Type: ImGuiSelectionRequestType,
    pub Selected: bool,
    pub RangeDirection: ImS8,
    pub RangeFirstItem: ImGuiSelectionUserData,
    pub RangeLastItem: ImGuiSelectionUserData,
}
impl Default for ImGuiSelectionRequest {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImDrawIdx = ::std::os::raw::c_ushort;
pub type ImDrawCallback = ::std::option::Option<
    unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
#[repr(C)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TexRef: ImTextureRef,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
    pub UserCallbackDataSize: ::std::os::raw::c_int,
    pub UserCallbackDataOffset: ::std::os::raw::c_int,
}
impl Default for ImDrawCmd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
impl Default for ImDrawVert {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImDrawCmdHeader {
    pub ClipRect: ImVec4,
    pub TexRef: ImTextureRef,
    pub VtxOffset: ::std::os::raw::c_uint,
}
impl Default for ImDrawCmdHeader {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawCmd {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawCmd,
}
impl Default for ImVector_ImDrawCmd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawIdx {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawIdx,
}
impl Default for ImVector_ImDrawIdx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector_ImDrawCmd,
    pub _IdxBuffer: ImVector_ImDrawIdx,
}
impl Default for ImDrawChannel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawChannel {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawChannel,
}
impl Default for ImVector_ImDrawChannel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImDrawListSplitter {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector_ImDrawChannel,
}
impl Default for ImDrawListSplitter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawVert {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawVert,
}
impl Default for ImVector_ImDrawVert {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImVec2 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec2,
}
impl Default for ImVector_ImVec2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImVec4 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec4,
}
impl Default for ImVector_ImVec4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImTextureRef {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImTextureRef,
}
impl Default for ImVector_ImTextureRef {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImU8 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU8,
}
impl Default for ImVector_ImU8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawListPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImDrawList,
}
impl Default for ImVector_ImDrawListPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImTextureDataPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImTextureData,
}
impl Default for ImVector_ImTextureDataPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImTextureFormat_RGBA32: ImTextureFormat = 0;
pub const ImTextureFormat_Alpha8: ImTextureFormat = 1;
pub type ImTextureFormat = ::std::os::raw::c_int;
pub const ImTextureStatus_OK: ImTextureStatus = 0;
pub const ImTextureStatus_Destroyed: ImTextureStatus = 1;
pub const ImTextureStatus_WantCreate: ImTextureStatus = 2;
pub const ImTextureStatus_WantUpdates: ImTextureStatus = 3;
pub const ImTextureStatus_WantDestroy: ImTextureStatus = 4;
pub type ImTextureStatus = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImTextureRect {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImTextureRect {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImTextureRect,
}
impl Default for ImVector_ImTextureRect {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImTextureData {
    pub UniqueID: ::std::os::raw::c_int,
    pub Status: ImTextureStatus,
    pub BackendUserData: *mut ::std::os::raw::c_void,
    pub TexID: ImTextureID,
    pub Format: ImTextureFormat,
    pub Width: ::std::os::raw::c_int,
    pub Height: ::std::os::raw::c_int,
    pub BytesPerPixel: ::std::os::raw::c_int,
    pub Pixels: *mut ::std::os::raw::c_uchar,
    pub UsedRect: ImTextureRect,
    pub UpdateRect: ImTextureRect,
    pub Updates: ImVector_ImTextureRect,
    pub UnusedFrames: ::std::os::raw::c_int,
    pub RefCount: ::std::os::raw::c_ushort,
    pub UseColors: bool,
    pub WantDestroyNextFrame: bool,
}
impl Default for ImTextureData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImFontConfig {
    pub Name: [::std::os::raw::c_char; 40usize],
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub MergeMode: bool,
    pub PixelSnapH: bool,
    pub PixelSnapV: bool,
    pub OversampleH: ImS8,
    pub OversampleV: ImS8,
    pub EllipsisChar: ImWchar,
    pub SizePixels: f32,
    pub GlyphRanges: *const ImWchar,
    pub GlyphExcludeRanges: *const ImWchar,
    pub GlyphOffset: ImVec2,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub GlyphExtraAdvanceX: f32,
    pub FontNo: ImU32,
    pub FontLoaderFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub RasterizerDensity: f32,
    pub Flags: ImFontFlags,
    pub DstFont: *mut ImFont,
    pub FontLoader: *const ImFontLoader,
    pub FontLoaderData: *mut ::std::os::raw::c_void,
}
impl Default for ImFontConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImFontGlyph {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
    pub PackId: ::std::os::raw::c_int,
}
impl ImFontGlyph {
    #[inline]
    pub fn Colored(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Colored(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Colored_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Colored_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Visible_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Visible_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SourceIdx(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_SourceIdx(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SourceIdx_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SourceIdx_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Codepoint_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                26u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Codepoint_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                26u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Colored: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
        SourceIdx: ::std::os::raw::c_uint,
        Codepoint: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Colored: u32 = unsafe { ::std::mem::transmute(Colored) };
            Colored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 4u8, {
            let SourceIdx: u32 = unsafe { ::std::mem::transmute(SourceIdx) };
            SourceIdx as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImU32 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU32,
}
impl Default for ImVector_ImU32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImFontAtlasRectId = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImFont,
}
impl Default for ImVector_ImFontPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontConfig {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontConfig,
}
impl Default for ImVector_ImFontConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImDrawListSharedDataPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImDrawListSharedData,
}
impl Default for ImVector_ImDrawListSharedDataPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_float {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut f32,
}
impl Default for ImVector_float {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImU16 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU16,
}
impl Default for ImVector_ImU16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontGlyph {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontGlyph,
}
impl Default for ImVector_ImFontGlyph {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImFontBaked {
    pub IndexAdvanceX: ImVector_float,
    pub FallbackAdvanceX: f32,
    pub Size: f32,
    pub RasterizerDensity: f32,
    pub IndexLookup: ImVector_ImU16,
    pub Glyphs: ImVector_ImFontGlyph,
    pub FallbackGlyphIndex: ::std::os::raw::c_int,
    pub Ascent: f32,
    pub Descent: f32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub LastUsedFrame: ::std::os::raw::c_int,
    pub BakedId: ImGuiID,
    pub ContainerFont: *mut ImFont,
    pub FontLoaderDatas: *mut ::std::os::raw::c_void,
}
impl Default for ImFontBaked {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImFontBaked {
    #[inline]
    pub fn MetricsTotalSurface(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_MetricsTotalSurface(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MetricsTotalSurface_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                26u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_MetricsTotalSurface_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                26u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantDestroy(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_WantDestroy(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantDestroy_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_WantDestroy_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LoadNoFallback(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_LoadNoFallback(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LoadNoFallback_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LoadNoFallback_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LoadNoRenderOnLayout(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_LoadNoRenderOnLayout(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LoadNoRenderOnLayout_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LoadNoRenderOnLayout_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        MetricsTotalSurface: ::std::os::raw::c_uint,
        WantDestroy: ::std::os::raw::c_uint,
        LoadNoFallback: ::std::os::raw::c_uint,
        LoadNoRenderOnLayout: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let MetricsTotalSurface: u32 = unsafe { ::std::mem::transmute(MetricsTotalSurface) };
            MetricsTotalSurface as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let WantDestroy: u32 = unsafe { ::std::mem::transmute(WantDestroy) };
            WantDestroy as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let LoadNoFallback: u32 = unsafe { ::std::mem::transmute(LoadNoFallback) };
            LoadNoFallback as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let LoadNoRenderOnLayout: u32 = unsafe { ::std::mem::transmute(LoadNoRenderOnLayout) };
            LoadNoRenderOnLayout as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontConfigPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImFontConfig,
}
impl Default for ImVector_ImFontConfigPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImFont {
    pub LastBaked: *mut ImFontBaked,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub Flags: ImFontFlags,
    pub CurrentRasterizerDensity: f32,
    pub FontId: ImGuiID,
    pub LegacySize: f32,
    pub Sources: ImVector_ImFontConfigPtr,
    pub EllipsisChar: ImWchar,
    pub FallbackChar: ImWchar,
    pub Used8kPagesMap: [ImU8; 1usize],
    pub EllipsisAutoBake: bool,
    pub RemapPairs: ImGuiStorage,
}
impl Default for ImFont {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiViewport {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub FramebufferScale: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub ParentViewportId: ImGuiID,
    pub DrawData: *mut ImDrawData,
    pub RendererUserData: *mut ::std::os::raw::c_void,
    pub PlatformUserData: *mut ::std::os::raw::c_void,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
    pub PlatformHandleRaw: *mut ::std::os::raw::c_void,
    pub PlatformWindowCreated: bool,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
impl Default for ImGuiViewport {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiPlatformMonitor {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPlatformMonitor,
}
impl Default for ImVector_ImGuiPlatformMonitor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiViewportPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewport,
}
impl Default for ImVector_ImGuiViewportPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiPlatformIO {
    pub Platform_GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext) -> *const ::std::os::raw::c_char,
    >,
    pub Platform_SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, text: *const ::std::os::raw::c_char),
    >,
    pub Platform_ClipboardUserData: *mut ::std::os::raw::c_void,
    pub Platform_OpenInShellFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, path: *const ::std::os::raw::c_char) -> bool,
    >,
    pub Platform_OpenInShellUserData: *mut ::std::os::raw::c_void,
    pub Platform_SetImeDataFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            viewport: *mut ImGuiViewport,
            data: *mut ImGuiPlatformImeData,
        ),
    >,
    pub Platform_ImeUserData: *mut ::std::os::raw::c_void,
    pub Platform_LocaleDecimalPoint: ImWchar,
    pub Renderer_TextureMaxWidth: ::std::os::raw::c_int,
    pub Renderer_TextureMaxHeight: ::std::os::raw::c_int,
    pub Renderer_RenderState: *mut ::std::os::raw::c_void,
    pub Platform_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_GetWindowFramebufferScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::std::os::raw::c_char),
    >,
    pub Platform_SetWindowAlpha:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_GetWindowDpiScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowWorkAreaInsets:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec4>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        unsafe extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::std::os::raw::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::std::os::raw::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Renderer_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Monitors: ImVector_ImGuiPlatformMonitor,
    pub Textures: ImVector_ImTextureDataPtr,
    pub Viewports: ImVector_ImGuiViewportPtr,
}
impl Default for ImGuiPlatformIO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiPlatformMonitor {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
}
impl Default for ImGuiPlatformMonitor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiPlatformImeData {
    pub WantVisible: bool,
    pub WantTextInput: bool,
    pub InputPos: ImVec2,
    pub InputLineHeight: f32,
    pub ViewportId: ImGuiID,
}
impl Default for ImGuiPlatformImeData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImGuiDataAuthority = ::std::os::raw::c_int;
pub type ImGuiLayoutType = ::std::os::raw::c_int;
pub type ImGuiActivateFlags = ::std::os::raw::c_int;
pub type ImGuiDebugLogFlags = ::std::os::raw::c_int;
pub type ImGuiItemStatusFlags = ::std::os::raw::c_int;
pub type ImGuiOldColumnFlags = ::std::os::raw::c_int;
pub type ImGuiLogFlags = ::std::os::raw::c_int;
pub type ImGuiNavMoveFlags = ::std::os::raw::c_int;
pub type ImGuiNextItemDataFlags = ::std::os::raw::c_int;
pub type ImGuiNextWindowDataFlags = ::std::os::raw::c_int;
pub type ImGuiScrollFlags = ::std::os::raw::c_int;
pub type ImGuiTypingSelectFlags = ::std::os::raw::c_int;
pub type ImGuiWindowRefreshFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnIdx = ImS16;
pub type ImGuiTableDrawChannelIdx = ImU16;
pub type ImFileHandle = *mut FILE;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImVec1 {
    pub x: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVec2i {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVec2ih {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[repr(C)]
pub struct ImRect {
    pub Min: ImVec2,
    pub Max: ImVec2,
}
impl Default for ImRect {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImBitArrayPtr = *mut ImU32;
pub type ImPoolIdx = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_int {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_int,
}
impl Default for ImVector_int {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTextIndex {
    pub Offsets: ImVector_int,
    pub EndOffset: ::std::os::raw::c_int,
}
impl Default for ImGuiTextIndex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImDrawListSharedData {
    pub TexUvWhitePixel: ImVec2,
    pub TexUvLines: *const ImVec4,
    pub FontAtlas: *mut ImFontAtlas,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub FontScale: f32,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub InitialFringeScale: f32,
    pub InitialFlags: ImDrawListFlags,
    pub ClipRectFullscreen: ImVec4,
    pub TempBuffer: ImVector_ImVec2,
    pub DrawLists: ImVector_ImDrawListPtr,
    pub Context: *mut ImGuiContext,
    pub ArcFastVtx: [ImVec2; 48usize],
    pub ArcFastRadiusCutoff: f32,
    pub CircleSegmentCounts: [ImU8; 64usize],
}
impl Default for ImDrawListSharedData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImDrawDataBuilder {
    pub Layers: [*mut ImVector_ImDrawListPtr; 2usize],
    pub LayerData1: ImVector_ImDrawListPtr,
}
impl Default for ImDrawDataBuilder {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImFontStackData {
    pub Font: *mut ImFont,
    pub FontSizeBeforeScaling: f32,
    pub FontSizeAfterScaling: f32,
}
impl Default for ImFontStackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiColorMod {
    pub Col: ImGuiCol,
    pub BackupValue: ImVec4,
}
impl Default for ImGuiColorMod {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyleMod {
    pub VarIdx: ImGuiStyleVar,
    pub __bindgen_anon_1: ImGuiStyleMod__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStyleMod__bindgen_ty_1 {
    pub BackupInt: [::std::os::raw::c_int; 2usize],
    pub BackupFloat: [f32; 2usize],
}
impl Default for ImGuiStyleMod__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ImGuiStyleMod {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDataTypeStorage {
    pub Data: [ImU8; 8usize],
}
pub const ImGuiAxis_None: ImGuiAxis = -1;
pub const ImGuiAxis_X: ImGuiAxis = 0;
pub const ImGuiAxis_Y: ImGuiAxis = 1;
pub type ImGuiAxis = ::std::os::raw::c_int;
#[repr(C)]
pub struct ImGuiComboPreviewData {
    pub PreviewRect: ImRect,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupPrevLineTextBaseOffset: f32,
    pub BackupLayout: ImGuiLayoutType,
}
impl Default for ImGuiComboPreviewData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiGroupData {
    pub WindowID: ImGuiID,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupIndent: ImVec1,
    pub BackupGroupOffset: ImVec1,
    pub BackupCurrLineSize: ImVec2,
    pub BackupCurrLineTextBaseOffset: f32,
    pub BackupActiveIdIsAlive: ImGuiID,
    pub BackupDeactivatedIdIsAlive: bool,
    pub BackupHoveredIdIsAlive: bool,
    pub BackupIsSameLine: bool,
    pub EmitItem: bool,
}
impl Default for ImGuiGroupData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiMenuColumns {
    pub TotalWidth: ImU32,
    pub NextTotalWidth: ImU32,
    pub Spacing: ImU16,
    pub OffsetIcon: ImU16,
    pub OffsetLabel: ImU16,
    pub OffsetShortcut: ImU16,
    pub OffsetMark: ImU16,
    pub Widths: [ImU16; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputTextDeactivatedState {
    pub ID: ImGuiID,
    pub TextA: ImVector_char,
}
impl Default for ImGuiInputTextDeactivatedState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImStbTexteditState = STB_TexteditState;
#[repr(C)]
pub struct ImGuiInputTextState {
    pub Ctx: *mut ImGuiContext,
    pub Stb: *mut ImStbTexteditState,
    pub Flags: ImGuiInputTextFlags,
    pub ID: ImGuiID,
    pub TextLen: ::std::os::raw::c_int,
    pub TextSrc: *const ::std::os::raw::c_char,
    pub TextA: ImVector_char,
    pub TextToRevertTo: ImVector_char,
    pub CallbackTextBackup: ImVector_char,
    pub BufCapacity: ::std::os::raw::c_int,
    pub Scroll: ImVec2,
    pub LineCount: ::std::os::raw::c_int,
    pub WrapWidth: f32,
    pub CursorAnim: f32,
    pub CursorFollow: bool,
    pub CursorCenterY: bool,
    pub SelectedAllMouseLock: bool,
    pub Edited: bool,
    pub WantReloadUserBuf: bool,
    pub LastMoveDirectionLR: ImS8,
    pub ReloadSelectionStart: ::std::os::raw::c_int,
    pub ReloadSelectionEnd: ::std::os::raw::c_int,
}
impl Default for ImGuiInputTextState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiNextWindowData {
    pub HasFlags: ImGuiNextWindowDataFlags,
    pub PosCond: ImGuiCond,
    pub SizeCond: ImGuiCond,
    pub CollapsedCond: ImGuiCond,
    pub DockCond: ImGuiCond,
    pub PosVal: ImVec2,
    pub PosPivotVal: ImVec2,
    pub SizeVal: ImVec2,
    pub ContentSizeVal: ImVec2,
    pub ScrollVal: ImVec2,
    pub WindowFlags: ImGuiWindowFlags,
    pub ChildFlags: ImGuiChildFlags,
    pub PosUndock: bool,
    pub CollapsedVal: bool,
    pub SizeConstraintRect: ImRect,
    pub SizeCallback: ImGuiSizeCallback,
    pub SizeCallbackUserData: *mut ::std::os::raw::c_void,
    pub BgAlphaVal: f32,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub WindowClass: ImGuiWindowClass,
    pub MenuBarOffsetMinVal: ImVec2,
    pub RefreshFlagsVal: ImGuiWindowRefreshFlags,
}
impl Default for ImGuiNextWindowData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiNextItemData {
    pub HasFlags: ImGuiNextItemDataFlags,
    pub ItemFlags: ImGuiItemFlags,
    pub FocusScopeId: ImGuiID,
    pub SelectionUserData: ImGuiSelectionUserData,
    pub Width: f32,
    pub Shortcut: ImGuiKeyChord,
    pub ShortcutFlags: ImGuiInputFlags,
    pub OpenVal: bool,
    pub OpenCond: ImU8,
    pub RefVal: ImGuiDataTypeStorage,
    pub StorageId: ImGuiID,
}
#[repr(C)]
pub struct ImGuiLastItemData {
    pub ID: ImGuiID,
    pub ItemFlags: ImGuiItemFlags,
    pub StatusFlags: ImGuiItemStatusFlags,
    pub Rect: ImRect,
    pub NavRect: ImRect,
    pub DisplayRect: ImRect,
    pub ClipRect: ImRect,
    pub Shortcut: ImGuiKeyChord,
}
impl Default for ImGuiLastItemData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiTreeNodeStackData {
    pub ID: ImGuiID,
    pub TreeFlags: ImGuiTreeNodeFlags,
    pub ItemFlags: ImGuiItemFlags,
    pub NavRect: ImRect,
    pub DrawLinesX1: f32,
    pub DrawLinesToNodesY2: f32,
    pub DrawLinesTableColumn: ImGuiTableColumnIdx,
}
impl Default for ImGuiTreeNodeStackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiErrorRecoveryState {
    pub SizeOfWindowStack: ::std::os::raw::c_short,
    pub SizeOfIDStack: ::std::os::raw::c_short,
    pub SizeOfTreeStack: ::std::os::raw::c_short,
    pub SizeOfColorStack: ::std::os::raw::c_short,
    pub SizeOfStyleVarStack: ::std::os::raw::c_short,
    pub SizeOfFontStack: ::std::os::raw::c_short,
    pub SizeOfFocusScopeStack: ::std::os::raw::c_short,
    pub SizeOfGroupStack: ::std::os::raw::c_short,
    pub SizeOfItemFlagsStack: ::std::os::raw::c_short,
    pub SizeOfBeginPopupStack: ::std::os::raw::c_short,
    pub SizeOfDisabledStack: ::std::os::raw::c_short,
}
#[repr(C)]
pub struct ImGuiWindowStackData {
    pub Window: *mut ImGuiWindow,
    pub ParentLastItemDataBackup: ImGuiLastItemData,
    pub StackSizesInBegin: ImGuiErrorRecoveryState,
    pub DisabledOverrideReenable: bool,
    pub DisabledOverrideReenableAlphaBackup: f32,
}
impl Default for ImGuiWindowStackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiShrinkWidthItem {
    pub Index: ::std::os::raw::c_int,
    pub Width: f32,
    pub InitialWidth: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiPtrOrIndex {
    pub Ptr: *mut ::std::os::raw::c_void,
    pub Index: ::std::os::raw::c_int,
}
impl Default for ImGuiPtrOrIndex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDeactivatedItemData {
    pub ID: ImGuiID,
    pub ElapseFrame: ::std::os::raw::c_int,
    pub HasBeenEditedBefore: bool,
    pub IsAlive: bool,
}
#[repr(C)]
pub struct ImGuiPopupData {
    pub PopupId: ImGuiID,
    pub Window: *mut ImGuiWindow,
    pub RestoreNavWindow: *mut ImGuiWindow,
    pub ParentNavLayer: ::std::os::raw::c_int,
    pub OpenFrameCount: ::std::os::raw::c_int,
    pub OpenParentId: ImGuiID,
    pub OpenPopupPos: ImVec2,
    pub OpenMousePos: ImVec2,
}
impl Default for ImGuiPopupData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN {
    pub Storage: [ImU32; 5usize],
}
pub type ImBitArrayForNamedKeys = ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN;
pub const ImGuiInputEventType_None: ImGuiInputEventType = 0;
pub const ImGuiInputEventType_MousePos: ImGuiInputEventType = 1;
pub const ImGuiInputEventType_MouseWheel: ImGuiInputEventType = 2;
pub const ImGuiInputEventType_MouseButton: ImGuiInputEventType = 3;
pub const ImGuiInputEventType_MouseViewport: ImGuiInputEventType = 4;
pub const ImGuiInputEventType_Key: ImGuiInputEventType = 5;
pub const ImGuiInputEventType_Text: ImGuiInputEventType = 6;
pub const ImGuiInputEventType_Focus: ImGuiInputEventType = 7;
pub const ImGuiInputEventType_COUNT: ImGuiInputEventType = 8;
pub type ImGuiInputEventType = ::std::os::raw::c_int;
pub const ImGuiInputSource_None: ImGuiInputSource = 0;
pub const ImGuiInputSource_Mouse: ImGuiInputSource = 1;
pub const ImGuiInputSource_Keyboard: ImGuiInputSource = 2;
pub const ImGuiInputSource_Gamepad: ImGuiInputSource = 3;
pub const ImGuiInputSource_COUNT: ImGuiInputSource = 4;
pub type ImGuiInputSource = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiInputEventMousePos {
    pub PosX: f32,
    pub PosY: f32,
    pub MouseSource: ImGuiMouseSource,
}
impl Default for ImGuiInputEventMousePos {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiInputEventMouseWheel {
    pub WheelX: f32,
    pub WheelY: f32,
    pub MouseSource: ImGuiMouseSource,
}
impl Default for ImGuiInputEventMouseWheel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputEventMouseButton {
    pub Button: ::std::os::raw::c_int,
    pub Down: bool,
    pub MouseSource: ImGuiMouseSource,
}
impl Default for ImGuiInputEventMouseButton {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputEventMouseViewport {
    pub HoveredViewportID: ImGuiID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiInputEventKey {
    pub Key: ImGuiKey,
    pub Down: bool,
    pub AnalogValue: f32,
}
impl Default for ImGuiInputEventKey {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputEventText {
    pub Char: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputEventAppFocused {
    pub Focused: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiInputEvent {
    pub Type: ImGuiInputEventType,
    pub Source: ImGuiInputSource,
    pub EventId: ImU32,
    pub __bindgen_anon_1: ImGuiInputEvent__bindgen_ty_1,
    pub AddedByTestEngine: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiInputEvent__bindgen_ty_1 {
    pub MousePos: ImGuiInputEventMousePos,
    pub MouseWheel: ImGuiInputEventMouseWheel,
    pub MouseButton: ImGuiInputEventMouseButton,
    pub MouseViewport: ImGuiInputEventMouseViewport,
    pub Key: ImGuiInputEventKey,
    pub Text: ImGuiInputEventText,
    pub AppFocused: ImGuiInputEventAppFocused,
}
impl Default for ImGuiInputEvent__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ImGuiInputEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImGuiKeyRoutingIndex = ImS16;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiKeyRoutingData {
    pub NextEntryIndex: ImGuiKeyRoutingIndex,
    pub Mods: ImU16,
    pub RoutingCurrScore: ImU8,
    pub RoutingNextScore: ImU8,
    pub RoutingCurr: ImGuiID,
    pub RoutingNext: ImGuiID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiKeyRoutingData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiKeyRoutingData,
}
impl Default for ImVector_ImGuiKeyRoutingData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiKeyRoutingTable {
    pub Index: [ImGuiKeyRoutingIndex; 155usize],
    pub Entries: ImVector_ImGuiKeyRoutingData,
    pub EntriesNext: ImVector_ImGuiKeyRoutingData,
}
impl Default for ImGuiKeyRoutingTable {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiKeyOwnerData {
    pub OwnerCurr: ImGuiID,
    pub OwnerNext: ImGuiID,
    pub LockThisFrame: bool,
    pub LockUntilRelease: bool,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiListClipperRange {
    pub Min: ::std::os::raw::c_int,
    pub Max: ::std::os::raw::c_int,
    pub PosToIndexConvert: bool,
    pub PosToIndexOffsetMin: ImS8,
    pub PosToIndexOffsetMax: ImS8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiListClipperRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiListClipperRange,
}
impl Default for ImVector_ImGuiListClipperRange {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiListClipperData {
    pub ListClipper: *mut ImGuiListClipper,
    pub LossynessOffset: f32,
    pub StepNo: ::std::os::raw::c_int,
    pub ItemsFrozen: ::std::os::raw::c_int,
    pub Ranges: ImVector_ImGuiListClipperRange,
}
impl Default for ImGuiListClipperData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiNavLayer_Main: ImGuiNavLayer = 0;
pub const ImGuiNavLayer_Menu: ImGuiNavLayer = 1;
pub const ImGuiNavLayer_COUNT: ImGuiNavLayer = 2;
pub type ImGuiNavLayer = ::std::os::raw::c_int;
#[repr(C)]
pub struct ImGuiNavItemData {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub FocusScopeId: ImGuiID,
    pub RectRel: ImRect,
    pub ItemFlags: ImGuiItemFlags,
    pub DistBox: f32,
    pub DistCenter: f32,
    pub DistAxial: f32,
    pub SelectionUserData: ImGuiSelectionUserData,
}
impl Default for ImGuiNavItemData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiFocusScopeData {
    pub ID: ImGuiID,
    pub WindowID: ImGuiID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTypingSelectRequest {
    pub Flags: ImGuiTypingSelectFlags,
    pub SearchBufferLen: ::std::os::raw::c_int,
    pub SearchBuffer: *const ::std::os::raw::c_char,
    pub SelectRequest: bool,
    pub SingleCharMode: bool,
    pub SingleCharSize: ImS8,
}
impl Default for ImGuiTypingSelectRequest {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiTypingSelectState {
    pub Request: ImGuiTypingSelectRequest,
    pub SearchBuffer: [::std::os::raw::c_char; 64usize],
    pub FocusScope: ImGuiID,
    pub LastRequestFrame: ::std::os::raw::c_int,
    pub LastRequestTime: f32,
    pub SingleCharModeLock: bool,
}
impl Default for ImGuiTypingSelectState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiOldColumnData {
    pub OffsetNorm: f32,
    pub OffsetNormBeforeResize: f32,
    pub Flags: ImGuiOldColumnFlags,
    pub ClipRect: ImRect,
}
impl Default for ImGuiOldColumnData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiOldColumnData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiOldColumnData,
}
impl Default for ImVector_ImGuiOldColumnData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiOldColumns {
    pub ID: ImGuiID,
    pub Flags: ImGuiOldColumnFlags,
    pub IsFirstFrame: bool,
    pub IsBeingResized: bool,
    pub Current: ::std::os::raw::c_int,
    pub Count: ::std::os::raw::c_int,
    pub OffMinX: f32,
    pub OffMaxX: f32,
    pub LineMinY: f32,
    pub LineMaxY: f32,
    pub HostCursorPosY: f32,
    pub HostCursorMaxPosX: f32,
    pub HostInitialClipRect: ImRect,
    pub HostBackupClipRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub Columns: ImVector_ImGuiOldColumnData,
    pub Splitter: ImDrawListSplitter,
}
impl Default for ImGuiOldColumns {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiBoxSelectState {
    pub ID: ImGuiID,
    pub IsActive: bool,
    pub IsStarting: bool,
    pub IsStartedFromVoid: bool,
    pub IsStartedSetNavIdOnce: bool,
    pub RequestClear: bool,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u32,
    pub StartPosRel: ImVec2,
    pub EndPosRel: ImVec2,
    pub ScrollAccum: ImVec2,
    pub Window: *mut ImGuiWindow,
    pub UnclipMode: bool,
    pub UnclipRect: ImRect,
    pub BoxSelectRectPrev: ImRect,
    pub BoxSelectRectCurr: ImRect,
}
impl Default for ImGuiBoxSelectState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiBoxSelectState {
    #[inline]
    pub fn KeyMods(&self) -> ImGuiKeyChord {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_KeyMods(&mut self, val: ImGuiKeyChord) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn KeyMods_raw(this: *const Self) -> ImGuiKeyChord {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_KeyMods_raw(this: *mut Self, val: ImGuiKeyChord) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(KeyMods: ImGuiKeyChord) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let KeyMods: u32 = unsafe { ::std::mem::transmute(KeyMods) };
            KeyMods as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct ImGuiMultiSelectTempData {
    pub IO: ImGuiMultiSelectIO,
    pub Storage: *mut ImGuiMultiSelectState,
    pub FocusScopeId: ImGuiID,
    pub Flags: ImGuiMultiSelectFlags,
    pub ScopeRectMin: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub LastSubmittedItem: ImGuiSelectionUserData,
    pub BoxSelectId: ImGuiID,
    pub KeyMods: ImGuiKeyChord,
    pub LoopRequestSetAll: ImS8,
    pub IsEndIO: bool,
    pub IsFocused: bool,
    pub IsKeyboardSetRange: bool,
    pub NavIdPassedBy: bool,
    pub RangeSrcPassedBy: bool,
    pub RangeDstPassedBy: bool,
}
impl Default for ImGuiMultiSelectTempData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiMultiSelectState {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastSelectionSize: ::std::os::raw::c_int,
    pub RangeSelected: ImS8,
    pub NavIdSelected: ImS8,
    pub RangeSrcItem: ImGuiSelectionUserData,
    pub NavIdItem: ImGuiSelectionUserData,
}
impl Default for ImGuiMultiSelectState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiDockNodeState_Unknown: ImGuiDockNodeState = 0;
pub const ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow: ImGuiDockNodeState = 1;
pub const ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing: ImGuiDockNodeState = 2;
pub const ImGuiDockNodeState_HostWindowVisible: ImGuiDockNodeState = 3;
pub type ImGuiDockNodeState = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiWindowPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiWindow,
}
impl Default for ImVector_ImGuiWindowPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiDockNode {
    pub ID: ImGuiID,
    pub SharedFlags: ImGuiDockNodeFlags,
    pub LocalFlags: ImGuiDockNodeFlags,
    pub LocalFlagsInWindows: ImGuiDockNodeFlags,
    pub MergedFlags: ImGuiDockNodeFlags,
    pub State: ImGuiDockNodeState,
    pub ParentNode: *mut ImGuiDockNode,
    pub ChildNodes: [*mut ImGuiDockNode; 2usize],
    pub Windows: ImVector_ImGuiWindowPtr,
    pub TabBar: *mut ImGuiTabBar,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeRef: ImVec2,
    pub SplitAxis: ImGuiAxis,
    pub WindowClass: ImGuiWindowClass,
    pub LastBgColor: ImU32,
    pub HostWindow: *mut ImGuiWindow,
    pub VisibleWindow: *mut ImGuiWindow,
    pub CentralNode: *mut ImGuiDockNode,
    pub OnlyNodeWithWindows: *mut ImGuiDockNode,
    pub CountNodeWithWindows: ::std::os::raw::c_int,
    pub LastFrameAlive: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameFocused: ::std::os::raw::c_int,
    pub LastFocusedNodeId: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub WantCloseTabId: ImGuiID,
    pub RefViewportId: ImGuiID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
}
impl Default for ImGuiDockNode {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiDockNode {
    #[inline]
    pub fn AuthorityForPos(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForPos(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForPos_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForPos_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuthorityForSize(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForSize(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForSize_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForSize_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuthorityForViewport(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForViewport(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForViewport_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForViewport_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsFocused(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsFocused(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsFocused_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsFocused_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsBgDrawnThisFrame(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsBgDrawnThisFrame(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsBgDrawnThisFrame_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsBgDrawnThisFrame_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasCloseButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCloseButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasCloseButton_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasCloseButton_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasWindowMenuButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasWindowMenuButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasWindowMenuButton_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasWindowMenuButton_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasCentralNodeChild(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCentralNodeChild(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasCentralNodeChild_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasCentralNodeChild_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantCloseAll(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantCloseAll(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantCloseAll_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantCloseAll_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantLockSizeOnce(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantLockSizeOnce(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantLockSizeOnce_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantLockSizeOnce_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantMouseMove(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantMouseMove(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantMouseMove_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantMouseMove_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantHiddenTabBarUpdate(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarUpdate(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantHiddenTabBarUpdate_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantHiddenTabBarUpdate_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantHiddenTabBarToggle(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarToggle(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantHiddenTabBarToggle_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantHiddenTabBarToggle_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AuthorityForPos: ImGuiDataAuthority,
        AuthorityForSize: ImGuiDataAuthority,
        AuthorityForViewport: ImGuiDataAuthority,
        IsVisible: bool,
        IsFocused: bool,
        IsBgDrawnThisFrame: bool,
        HasCloseButton: bool,
        HasWindowMenuButton: bool,
        HasCentralNodeChild: bool,
        WantCloseAll: bool,
        WantLockSizeOnce: bool,
        WantMouseMove: bool,
        WantHiddenTabBarUpdate: bool,
        WantHiddenTabBarToggle: bool,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let AuthorityForPos: u32 = unsafe { ::std::mem::transmute(AuthorityForPos) };
            AuthorityForPos as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let AuthorityForSize: u32 = unsafe { ::std::mem::transmute(AuthorityForSize) };
            AuthorityForSize as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let AuthorityForViewport: u32 = unsafe { ::std::mem::transmute(AuthorityForViewport) };
            AuthorityForViewport as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let IsVisible: u8 = unsafe { ::std::mem::transmute(IsVisible) };
            IsVisible as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let IsFocused: u8 = unsafe { ::std::mem::transmute(IsFocused) };
            IsFocused as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let IsBgDrawnThisFrame: u8 = unsafe { ::std::mem::transmute(IsBgDrawnThisFrame) };
            IsBgDrawnThisFrame as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let HasCloseButton: u8 = unsafe { ::std::mem::transmute(HasCloseButton) };
            HasCloseButton as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let HasWindowMenuButton: u8 = unsafe { ::std::mem::transmute(HasWindowMenuButton) };
            HasWindowMenuButton as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let HasCentralNodeChild: u8 = unsafe { ::std::mem::transmute(HasCentralNodeChild) };
            HasCentralNodeChild as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let WantCloseAll: u8 = unsafe { ::std::mem::transmute(WantCloseAll) };
            WantCloseAll as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let WantLockSizeOnce: u8 = unsafe { ::std::mem::transmute(WantLockSizeOnce) };
            WantLockSizeOnce as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let WantMouseMove: u8 = unsafe { ::std::mem::transmute(WantMouseMove) };
            WantMouseMove as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let WantHiddenTabBarUpdate: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarUpdate) };
            WantHiddenTabBarUpdate as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let WantHiddenTabBarToggle: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarToggle) };
            WantHiddenTabBarToggle as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiWindowDockStyle {
    pub Colors: [ImU32; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiDockRequest {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockRequest,
}
impl Default for ImVector_ImGuiDockRequest {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiDockNodeSettings {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockNodeSettings,
}
impl Default for ImVector_ImGuiDockNodeSettings {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDockContext {
    pub Nodes: ImGuiStorage,
    pub Requests: ImVector_ImGuiDockRequest,
    pub NodesSettings: ImVector_ImGuiDockNodeSettings,
    pub WantFullRebuild: bool,
}
impl Default for ImGuiDockContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiViewportP {
    pub _ImGuiViewport: ImGuiViewport,
    pub Window: *mut ImGuiWindow,
    pub Idx: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFocusedStampCount: ::std::os::raw::c_int,
    pub LastNameHash: ImGuiID,
    pub LastPos: ImVec2,
    pub LastSize: ImVec2,
    pub Alpha: f32,
    pub LastAlpha: f32,
    pub LastFocusedHadNavWindow: bool,
    pub PlatformMonitor: ::std::os::raw::c_short,
    pub BgFgDrawListsLastFrame: [::std::os::raw::c_int; 2usize],
    pub BgFgDrawLists: [*mut ImDrawList; 2usize],
    pub DrawDataP: ImDrawData,
    pub DrawDataBuilder: ImDrawDataBuilder,
    pub LastPlatformPos: ImVec2,
    pub LastPlatformSize: ImVec2,
    pub LastRendererSize: ImVec2,
    pub WorkInsetMin: ImVec2,
    pub WorkInsetMax: ImVec2,
    pub BuildWorkInsetMin: ImVec2,
    pub BuildWorkInsetMax: ImVec2,
}
impl Default for ImGuiViewportP {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiSettingsHandler {
    pub TypeName: *const ::std::os::raw::c_char,
    pub TypeHash: ImGuiID,
    pub ClearAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadInitFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadOpenFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReadLineFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            entry: *mut ::std::os::raw::c_void,
            line: *const ::std::os::raw::c_char,
        ),
    >,
    pub ApplyAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub WriteAllFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            out_buf: *mut ImGuiTextBuffer,
        ),
    >,
    pub UserData: *mut ::std::os::raw::c_void,
}
impl Default for ImGuiSettingsHandler {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImGuiErrorCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ImGuiContext,
        user_data: *mut ::std::os::raw::c_void,
        msg: *const ::std::os::raw::c_char,
    ),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDebugAllocEntry {
    pub FrameCount: ::std::os::raw::c_int,
    pub AllocCount: ImS16,
    pub FreeCount: ImS16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDebugAllocInfo {
    pub TotalAllocCount: ::std::os::raw::c_int,
    pub TotalFreeCount: ::std::os::raw::c_int,
    pub LastEntriesIdx: ImS16,
    pub LastEntriesBuf: [ImGuiDebugAllocEntry; 6usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiMetricsConfig {
    pub ShowDebugLog: bool,
    pub ShowIDStackTool: bool,
    pub ShowWindowsRects: bool,
    pub ShowWindowsBeginOrder: bool,
    pub ShowTablesRects: bool,
    pub ShowDrawCmdMesh: bool,
    pub ShowDrawCmdBoundingBoxes: bool,
    pub ShowTextEncodingViewer: bool,
    pub ShowTextureUsedRect: bool,
    pub ShowDockingNodes: bool,
    pub ShowWindowsRectsType: ::std::os::raw::c_int,
    pub ShowTablesRectsType: ::std::os::raw::c_int,
    pub HighlightMonitorIdx: ::std::os::raw::c_int,
    pub HighlightViewportID: ImGuiID,
    pub ShowFontPreview: bool,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiStackLevelInfo {
    pub ID: ImGuiID,
    pub QueryFrameCount: ImS8,
    pub QuerySuccess: bool,
    pub DataType: ImS8,
    pub DescOffset: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiStackLevelInfo {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStackLevelInfo,
}
impl Default for ImVector_ImGuiStackLevelInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiIDStackTool {
    pub LastActiveFrame: ::std::os::raw::c_int,
    pub StackLevel: ::std::os::raw::c_int,
    pub QueryMainId: ImGuiID,
    pub Results: ImVector_ImGuiStackLevelInfo,
    pub QueryHookActive: bool,
    pub OptHexEncodeNonAsciiChars: bool,
    pub OptCopyToClipboardOnCtrlC: bool,
    pub CopyToClipboardLastTime: f32,
    pub ResultPathsBuf: ImGuiTextBuffer,
    pub ResultTempBuf: ImGuiTextBuffer,
}
impl Default for ImGuiIDStackTool {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImGuiContextHookCallback = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ImGuiContext, hook: *mut ImGuiContextHook),
>;
pub const ImGuiContextHookType_NewFramePre: ImGuiContextHookType = 0;
pub const ImGuiContextHookType_NewFramePost: ImGuiContextHookType = 1;
pub const ImGuiContextHookType_EndFramePre: ImGuiContextHookType = 2;
pub const ImGuiContextHookType_EndFramePost: ImGuiContextHookType = 3;
pub const ImGuiContextHookType_RenderPre: ImGuiContextHookType = 4;
pub const ImGuiContextHookType_RenderPost: ImGuiContextHookType = 5;
pub const ImGuiContextHookType_Shutdown: ImGuiContextHookType = 6;
pub const ImGuiContextHookType_PendingRemoval_: ImGuiContextHookType = 7;
pub type ImGuiContextHookType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiContextHook {
    pub HookId: ImGuiID,
    pub Type: ImGuiContextHookType,
    pub Owner: ImGuiID,
    pub Callback: ImGuiContextHookCallback,
    pub UserData: *mut ::std::os::raw::c_void,
}
impl Default for ImGuiContextHook {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontAtlasPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImFontAtlas,
}
impl Default for ImVector_ImFontAtlasPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiInputEvent {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiInputEvent,
}
impl Default for ImVector_ImGuiInputEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiWindowStackData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiWindowStackData,
}
impl Default for ImVector_ImGuiWindowStackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiColorMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiColorMod,
}
impl Default for ImVector_ImGuiColorMod {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiStyleMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStyleMod,
}
impl Default for ImVector_ImGuiStyleMod {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontStackData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontStackData,
}
impl Default for ImVector_ImFontStackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiFocusScopeData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiFocusScopeData,
}
impl Default for ImVector_ImGuiFocusScopeData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiItemFlags {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiItemFlags,
}
impl Default for ImVector_ImGuiItemFlags {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiGroupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiGroupData,
}
impl Default for ImVector_ImGuiGroupData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiPopupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPopupData,
}
impl Default for ImVector_ImGuiPopupData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTreeNodeStackData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTreeNodeStackData,
}
impl Default for ImVector_ImGuiTreeNodeStackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiViewportPPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewportP,
}
impl Default for ImVector_ImGuiViewportPPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_unsigned_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_uchar,
}
impl Default for ImVector_unsigned_char {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiListClipperData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiListClipperData,
}
impl Default for ImVector_ImGuiListClipperData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTableTempData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableTempData,
}
impl Default for ImVector_ImGuiTableTempData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTable {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTable,
}
impl Default for ImVector_ImGuiTable {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPool_ImGuiTable {
    pub Buf: ImVector_ImGuiTable,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
impl Default for ImPool_ImGuiTable {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTabBar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabBar,
}
impl Default for ImVector_ImGuiTabBar {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPool_ImGuiTabBar {
    pub Buf: ImVector_ImGuiTabBar,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
impl Default for ImPool_ImGuiTabBar {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiPtrOrIndex {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPtrOrIndex,
}
impl Default for ImVector_ImGuiPtrOrIndex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiShrinkWidthItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiShrinkWidthItem,
}
impl Default for ImVector_ImGuiShrinkWidthItem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiMultiSelectTempData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiMultiSelectTempData,
}
impl Default for ImVector_ImGuiMultiSelectTempData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiMultiSelectState {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiMultiSelectState,
}
impl Default for ImVector_ImGuiMultiSelectState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPool_ImGuiMultiSelectState {
    pub Buf: ImVector_ImGuiMultiSelectState,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
impl Default for ImPool_ImGuiMultiSelectState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiID,
}
impl Default for ImVector_ImGuiID {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiSettingsHandler {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiSettingsHandler,
}
impl Default for ImVector_ImGuiSettingsHandler {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImChunkStream_ImGuiWindowSettings {
    pub Buf: ImVector_char,
}
impl Default for ImChunkStream_ImGuiWindowSettings {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImChunkStream_ImGuiTableSettings {
    pub Buf: ImVector_char,
}
impl Default for ImChunkStream_ImGuiTableSettings {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiContextHook {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiContextHook,
}
impl Default for ImVector_ImGuiContextHook {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiWindowTempData {
    pub CursorPos: ImVec2,
    pub CursorPosPrevLine: ImVec2,
    pub CursorStartPos: ImVec2,
    pub CursorMaxPos: ImVec2,
    pub IdealMaxPos: ImVec2,
    pub CurrLineSize: ImVec2,
    pub PrevLineSize: ImVec2,
    pub CurrLineTextBaseOffset: f32,
    pub PrevLineTextBaseOffset: f32,
    pub IsSameLine: bool,
    pub IsSetPos: bool,
    pub Indent: ImVec1,
    pub ColumnsOffset: ImVec1,
    pub GroupOffset: ImVec1,
    pub CursorStartPosLossyness: ImVec2,
    pub NavLayerCurrent: ImGuiNavLayer,
    pub NavLayersActiveMask: ::std::os::raw::c_short,
    pub NavLayersActiveMaskNext: ::std::os::raw::c_short,
    pub NavIsScrollPushableX: bool,
    pub NavHideHighlightOneFrame: bool,
    pub NavWindowHasScrollY: bool,
    pub MenuBarAppending: bool,
    pub MenuBarOffset: ImVec2,
    pub MenuColumns: ImGuiMenuColumns,
    pub TreeDepth: ::std::os::raw::c_int,
    pub TreeHasStackDataDepthMask: ImU32,
    pub TreeRecordsClippedNodesY2Mask: ImU32,
    pub ChildWindows: ImVector_ImGuiWindowPtr,
    pub StateStorage: *mut ImGuiStorage,
    pub CurrentColumns: *mut ImGuiOldColumns,
    pub CurrentTableIdx: ::std::os::raw::c_int,
    pub LayoutType: ImGuiLayoutType,
    pub ParentLayoutType: ImGuiLayoutType,
    pub ModalDimBgColor: ImU32,
    pub WindowItemStatusFlags: ImGuiItemStatusFlags,
    pub ChildItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemRect: ImRect,
    pub ItemWidth: f32,
    pub TextWrapPos: f32,
    pub ItemWidthStack: ImVector_float,
    pub TextWrapPosStack: ImVector_float,
}
impl Default for ImGuiWindowTempData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiOldColumns {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiOldColumns,
}
impl Default for ImVector_ImGuiOldColumns {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiWindow {
    pub Ctx: *mut ImGuiContext,
    pub Name: *mut ::std::os::raw::c_char,
    pub ID: ImGuiID,
    pub Flags: ImGuiWindowFlags,
    pub FlagsPreviousFrame: ImGuiWindowFlags,
    pub ChildFlags: ImGuiChildFlags,
    pub WindowClass: ImGuiWindowClass,
    pub Viewport: *mut ImGuiViewportP,
    pub ViewportId: ImGuiID,
    pub ViewportPos: ImVec2,
    pub ViewportAllowPlatformMonitorExtend: ::std::os::raw::c_int,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeFull: ImVec2,
    pub ContentSize: ImVec2,
    pub ContentSizeIdeal: ImVec2,
    pub ContentSizeExplicit: ImVec2,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub TitleBarHeight: f32,
    pub MenuBarHeight: f32,
    pub DecoOuterSizeX1: f32,
    pub DecoOuterSizeY1: f32,
    pub DecoOuterSizeX2: f32,
    pub DecoOuterSizeY2: f32,
    pub DecoInnerSizeX1: f32,
    pub DecoInnerSizeY1: f32,
    pub NameBufLen: ::std::os::raw::c_int,
    pub MoveId: ImGuiID,
    pub TabId: ImGuiID,
    pub ChildId: ImGuiID,
    pub PopupId: ImGuiID,
    pub Scroll: ImVec2,
    pub ScrollMax: ImVec2,
    pub ScrollTarget: ImVec2,
    pub ScrollTargetCenterRatio: ImVec2,
    pub ScrollTargetEdgeSnapDist: ImVec2,
    pub ScrollbarSizes: ImVec2,
    pub ScrollbarX: bool,
    pub ScrollbarY: bool,
    pub ScrollbarXStabilizeEnabled: bool,
    pub ScrollbarXStabilizeToggledHistory: ImU8,
    pub ViewportOwned: bool,
    pub Active: bool,
    pub WasActive: bool,
    pub WriteAccessed: bool,
    pub Collapsed: bool,
    pub WantCollapseToggle: bool,
    pub SkipItems: bool,
    pub SkipRefresh: bool,
    pub Appearing: bool,
    pub Hidden: bool,
    pub IsFallbackWindow: bool,
    pub IsExplicitChild: bool,
    pub HasCloseButton: bool,
    pub ResizeBorderHovered: ::std::os::raw::c_schar,
    pub ResizeBorderHeld: ::std::os::raw::c_schar,
    pub BeginCount: ::std::os::raw::c_short,
    pub BeginCountPreviousFrame: ::std::os::raw::c_short,
    pub BeginOrderWithinParent: ::std::os::raw::c_short,
    pub BeginOrderWithinContext: ::std::os::raw::c_short,
    pub FocusOrder: ::std::os::raw::c_short,
    pub AutoFitFramesX: ImS8,
    pub AutoFitFramesY: ImS8,
    pub AutoFitOnlyGrows: bool,
    pub AutoPosLastDirection: ImGuiDir,
    pub HiddenFramesCanSkipItems: ImS8,
    pub HiddenFramesCannotSkipItems: ImS8,
    pub HiddenFramesForRenderOnly: ImS8,
    pub DisableInputsFrames: ImS8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub SetWindowPosVal: ImVec2,
    pub SetWindowPosPivot: ImVec2,
    pub IDStack: ImVector_ImGuiID,
    pub DC: ImGuiWindowTempData,
    pub OuterRectClipped: ImRect,
    pub InnerRect: ImRect,
    pub InnerClipRect: ImRect,
    pub WorkRect: ImRect,
    pub ParentWorkRect: ImRect,
    pub ClipRect: ImRect,
    pub ContentRegionRect: ImRect,
    pub HitTestHoleSize: ImVec2ih,
    pub HitTestHoleOffset: ImVec2ih,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameJustFocused: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub ItemWidthDefault: f32,
    pub StateStorage: ImGuiStorage,
    pub ColumnsStorage: ImVector_ImGuiOldColumns,
    pub FontWindowScale: f32,
    pub FontWindowScaleParents: f32,
    pub FontRefSize: f32,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub DrawList: *mut ImDrawList,
    pub DrawListInst: ImDrawList,
    pub ParentWindow: *mut ImGuiWindow,
    pub ParentWindowInBeginStack: *mut ImGuiWindow,
    pub RootWindow: *mut ImGuiWindow,
    pub RootWindowPopupTree: *mut ImGuiWindow,
    pub RootWindowDockTree: *mut ImGuiWindow,
    pub RootWindowForTitleBarHighlight: *mut ImGuiWindow,
    pub RootWindowForNav: *mut ImGuiWindow,
    pub ParentWindowForFocusRoute: *mut ImGuiWindow,
    pub NavLastChildNavWindow: *mut ImGuiWindow,
    pub NavLastIds: [ImGuiID; 2usize],
    pub NavRectRel: [ImRect; 2usize],
    pub NavPreferredScoringPosRel: [ImVec2; 2usize],
    pub NavRootFocusScopeId: ImGuiID,
    pub MemoryDrawListIdxCapacity: ::std::os::raw::c_int,
    pub MemoryDrawListVtxCapacity: ::std::os::raw::c_int,
    pub MemoryCompacted: bool,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub DockOrder: ::std::os::raw::c_short,
    pub DockStyle: ImGuiWindowDockStyle,
    pub DockNode: *mut ImGuiDockNode,
    pub DockNodeAsHost: *mut ImGuiDockNode,
    pub DockId: ImGuiID,
}
impl Default for ImGuiWindow {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiWindow {
    #[inline]
    pub fn SetWindowPosAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowPosAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowPosAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowPosAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowSizeAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowSizeAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowSizeAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowSizeAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowCollapsedAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowCollapsedAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowCollapsedAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowCollapsedAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowDockAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowDockAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowDockAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowDockAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SetWindowPosAllowFlags: ImGuiCond,
        SetWindowSizeAllowFlags: ImGuiCond,
        SetWindowCollapsedAllowFlags: ImGuiCond,
        SetWindowDockAllowFlags: ImGuiCond,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SetWindowPosAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowPosAllowFlags) };
            SetWindowPosAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let SetWindowSizeAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowSizeAllowFlags) };
            SetWindowSizeAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let SetWindowCollapsedAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowCollapsedAllowFlags) };
            SetWindowCollapsedAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let SetWindowDockAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowDockAllowFlags) };
            SetWindowDockAllowFlags as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn DockIsActive(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockIsActive(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockIsActive_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockIsActive_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockNodeIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockNodeIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockNodeIsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockNodeIsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockTabIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockTabIsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockTabIsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockTabWantClose(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabWantClose(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockTabWantClose_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockTabWantClose_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        DockIsActive: bool,
        DockNodeIsVisible: bool,
        DockTabIsVisible: bool,
        DockTabWantClose: bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DockIsActive: u8 = unsafe { ::std::mem::transmute(DockIsActive) };
            DockIsActive as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let DockNodeIsVisible: u8 = unsafe { ::std::mem::transmute(DockNodeIsVisible) };
            DockNodeIsVisible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let DockTabIsVisible: u8 = unsafe { ::std::mem::transmute(DockTabIsVisible) };
            DockTabIsVisible as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let DockTabWantClose: u8 = unsafe { ::std::mem::transmute(DockTabWantClose) };
            DockTabWantClose as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiTabItem {
    pub ID: ImGuiID,
    pub Flags: ImGuiTabItemFlags,
    pub Window: *mut ImGuiWindow,
    pub LastFrameVisible: ::std::os::raw::c_int,
    pub LastFrameSelected: ::std::os::raw::c_int,
    pub Offset: f32,
    pub Width: f32,
    pub ContentWidth: f32,
    pub RequestedWidth: f32,
    pub NameOffset: ImS32,
    pub BeginOrder: ImS16,
    pub IndexDuringLayout: ImS16,
    pub WantClose: bool,
}
impl Default for ImGuiTabItem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTabItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabItem,
}
impl Default for ImVector_ImGuiTabItem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiTabBar {
    pub Window: *mut ImGuiWindow,
    pub Tabs: ImVector_ImGuiTabItem,
    pub Flags: ImGuiTabBarFlags,
    pub ID: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub NextSelectedTabId: ImGuiID,
    pub VisibleTabId: ImGuiID,
    pub CurrFrameVisible: ::std::os::raw::c_int,
    pub PrevFrameVisible: ::std::os::raw::c_int,
    pub BarRect: ImRect,
    pub BarRectPrevWidth: f32,
    pub CurrTabsContentsHeight: f32,
    pub PrevTabsContentsHeight: f32,
    pub WidthAllTabs: f32,
    pub WidthAllTabsIdeal: f32,
    pub ScrollingAnim: f32,
    pub ScrollingTarget: f32,
    pub ScrollingTargetDistToVisibility: f32,
    pub ScrollingSpeed: f32,
    pub ScrollingRectMinX: f32,
    pub ScrollingRectMaxX: f32,
    pub SeparatorMinX: f32,
    pub SeparatorMaxX: f32,
    pub ReorderRequestTabId: ImGuiID,
    pub ReorderRequestOffset: ImS16,
    pub BeginCount: ImS8,
    pub WantLayout: bool,
    pub VisibleTabWasSubmitted: bool,
    pub TabsAddedNew: bool,
    pub ScrollButtonEnabled: bool,
    pub TabsActiveCount: ImS16,
    pub LastTabItemIdx: ImS16,
    pub ItemSpacingY: f32,
    pub FramePadding: ImVec2,
    pub BackupCursorPos: ImVec2,
    pub TabsNames: ImGuiTextBuffer,
}
impl Default for ImGuiTabBar {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiTableColumn {
    pub Flags: ImGuiTableColumnFlags,
    pub WidthGiven: f32,
    pub MinX: f32,
    pub MaxX: f32,
    pub WidthRequest: f32,
    pub WidthAuto: f32,
    pub WidthMax: f32,
    pub StretchWeight: f32,
    pub InitStretchWeightOrWidth: f32,
    pub ClipRect: ImRect,
    pub UserID: ImGuiID,
    pub WorkMinX: f32,
    pub WorkMaxX: f32,
    pub ItemWidth: f32,
    pub ContentMaxXFrozen: f32,
    pub ContentMaxXUnfrozen: f32,
    pub ContentMaxXHeadersUsed: f32,
    pub ContentMaxXHeadersIdeal: f32,
    pub NameOffset: ImS16,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub IndexWithinEnabledSet: ImGuiTableColumnIdx,
    pub PrevEnabledColumn: ImGuiTableColumnIdx,
    pub NextEnabledColumn: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub DrawChannelFrozen: ImGuiTableDrawChannelIdx,
    pub DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsEnabled: bool,
    pub IsUserEnabled: bool,
    pub IsUserEnabledNextFrame: bool,
    pub IsVisibleX: bool,
    pub IsVisibleY: bool,
    pub IsRequestOutput: bool,
    pub IsSkipItems: bool,
    pub IsPreserveWidthAuto: bool,
    pub NavLayerCurrent: ImS8,
    pub AutoFitQueue: ImU8,
    pub CannotSkipItemsQueue: ImU8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub SortDirectionsAvailList: ImU8,
}
impl Default for ImGuiTableColumn {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiTableColumn {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirection_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirection_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SortDirectionsAvailCount(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailCount(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirectionsAvailCount_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirectionsAvailCount_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SortDirectionsAvailMask(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailMask(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirectionsAvailMask_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirectionsAvailMask_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        SortDirectionsAvailCount: ImU8,
        SortDirectionsAvailMask: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let SortDirectionsAvailCount: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailCount) };
            SortDirectionsAvailCount as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let SortDirectionsAvailMask: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailMask) };
            SortDirectionsAvailMask as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTableCellData {
    pub BgColor: ImU32,
    pub Column: ImGuiTableColumnIdx,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTableHeaderData {
    pub Index: ImGuiTableColumnIdx,
    pub TextColor: ImU32,
    pub BgColor0: ImU32,
    pub BgColor1: ImU32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiTableInstanceData {
    pub TableInstanceID: ImGuiID,
    pub LastOuterHeight: f32,
    pub LastTopHeadersRowHeight: f32,
    pub LastFrozenHeight: f32,
    pub HoveredRowLast: ::std::os::raw::c_int,
    pub HoveredRowNext: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImSpan_ImGuiTableColumn {
    pub Data: *mut ImGuiTableColumn,
    pub DataEnd: *mut ImGuiTableColumn,
}
impl Default for ImSpan_ImGuiTableColumn {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImSpan_ImGuiTableColumnIdx {
    pub Data: *mut ImGuiTableColumnIdx,
    pub DataEnd: *mut ImGuiTableColumnIdx,
}
impl Default for ImSpan_ImGuiTableColumnIdx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImSpan_ImGuiTableCellData {
    pub Data: *mut ImGuiTableCellData,
    pub DataEnd: *mut ImGuiTableCellData,
}
impl Default for ImSpan_ImGuiTableCellData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTableInstanceData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableInstanceData,
}
impl Default for ImVector_ImGuiTableInstanceData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTableColumnSortSpecs {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableColumnSortSpecs,
}
impl Default for ImVector_ImGuiTableColumnSortSpecs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiTable {
    pub ID: ImGuiID,
    pub Flags: ImGuiTableFlags,
    pub RawData: *mut ::std::os::raw::c_void,
    pub TempData: *mut ImGuiTableTempData,
    pub Columns: ImSpan_ImGuiTableColumn,
    pub DisplayOrderToIndex: ImSpan_ImGuiTableColumnIdx,
    pub RowCellData: ImSpan_ImGuiTableCellData,
    pub EnabledMaskByDisplayOrder: ImBitArrayPtr,
    pub EnabledMaskByIndex: ImBitArrayPtr,
    pub VisibleMaskByIndex: ImBitArrayPtr,
    pub SettingsLoadedFlags: ImGuiTableFlags,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub ColumnsCount: ::std::os::raw::c_int,
    pub CurrentRow: ::std::os::raw::c_int,
    pub CurrentColumn: ::std::os::raw::c_int,
    pub InstanceCurrent: ImS16,
    pub InstanceInteracted: ImS16,
    pub RowPosY1: f32,
    pub RowPosY2: f32,
    pub RowMinHeight: f32,
    pub RowCellPaddingY: f32,
    pub RowTextBaseline: f32,
    pub RowIndentOffsetX: f32,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub RowBgColorCounter: ::std::os::raw::c_int,
    pub RowBgColor: [ImU32; 2usize],
    pub BorderColorStrong: ImU32,
    pub BorderColorLight: ImU32,
    pub BorderX1: f32,
    pub BorderX2: f32,
    pub HostIndentX: f32,
    pub MinColumnWidth: f32,
    pub OuterPaddingX: f32,
    pub CellPaddingX: f32,
    pub CellSpacingX1: f32,
    pub CellSpacingX2: f32,
    pub InnerWidth: f32,
    pub ColumnsGivenWidth: f32,
    pub ColumnsAutoFitWidth: f32,
    pub ColumnsStretchSumWeights: f32,
    pub ResizedColumnNextWidth: f32,
    pub ResizeLockMinContentsX2: f32,
    pub RefScale: f32,
    pub AngledHeadersHeight: f32,
    pub AngledHeadersSlope: f32,
    pub OuterRect: ImRect,
    pub InnerRect: ImRect,
    pub WorkRect: ImRect,
    pub InnerClipRect: ImRect,
    pub BgClipRect: ImRect,
    pub Bg0ClipRectForDrawCmd: ImRect,
    pub Bg2ClipRectForDrawCmd: ImRect,
    pub HostClipRect: ImRect,
    pub HostBackupInnerClipRect: ImRect,
    pub OuterWindow: *mut ImGuiWindow,
    pub InnerWindow: *mut ImGuiWindow,
    pub ColumnsNames: ImGuiTextBuffer,
    pub DrawSplitter: *mut ImDrawListSplitter,
    pub InstanceDataFirst: ImGuiTableInstanceData,
    pub InstanceDataExtra: ImVector_ImGuiTableInstanceData,
    pub SortSpecsSingle: ImGuiTableColumnSortSpecs,
    pub SortSpecsMulti: ImVector_ImGuiTableColumnSortSpecs,
    pub SortSpecs: ImGuiTableSortSpecs,
    pub SortSpecsCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledFixedCount: ImGuiTableColumnIdx,
    pub DeclColumnsCount: ImGuiTableColumnIdx,
    pub AngledHeadersCount: ImGuiTableColumnIdx,
    pub HoveredColumnBody: ImGuiTableColumnIdx,
    pub HoveredColumnBorder: ImGuiTableColumnIdx,
    pub HighlightColumnHeader: ImGuiTableColumnIdx,
    pub AutoFitSingleColumn: ImGuiTableColumnIdx,
    pub ResizedColumn: ImGuiTableColumnIdx,
    pub LastResizedColumn: ImGuiTableColumnIdx,
    pub HeldHeaderColumn: ImGuiTableColumnIdx,
    pub ReorderColumn: ImGuiTableColumnIdx,
    pub ReorderColumnDir: ImGuiTableColumnIdx,
    pub LeftMostEnabledColumn: ImGuiTableColumnIdx,
    pub RightMostEnabledColumn: ImGuiTableColumnIdx,
    pub LeftMostStretchedColumn: ImGuiTableColumnIdx,
    pub RightMostStretchedColumn: ImGuiTableColumnIdx,
    pub ContextPopupColumn: ImGuiTableColumnIdx,
    pub FreezeRowsRequest: ImGuiTableColumnIdx,
    pub FreezeRowsCount: ImGuiTableColumnIdx,
    pub FreezeColumnsRequest: ImGuiTableColumnIdx,
    pub FreezeColumnsCount: ImGuiTableColumnIdx,
    pub RowCellDataCurrent: ImGuiTableColumnIdx,
    pub DummyDrawChannel: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub NavLayer: ImS8,
    pub IsLayoutLocked: bool,
    pub IsInsideRow: bool,
    pub IsInitializing: bool,
    pub IsSortSpecsDirty: bool,
    pub IsUsingHeaders: bool,
    pub IsContextPopupOpen: bool,
    pub DisableDefaultContextMenu: bool,
    pub IsSettingsRequestLoad: bool,
    pub IsSettingsDirty: bool,
    pub IsDefaultDisplayOrder: bool,
    pub IsResetAllRequest: bool,
    pub IsResetDisplayOrderRequest: bool,
    pub IsUnfrozenRows: bool,
    pub IsDefaultSizingPolicy: bool,
    pub IsActiveIdAliveBeforeTable: bool,
    pub IsActiveIdInTable: bool,
    pub HasScrollbarYCurr: bool,
    pub HasScrollbarYPrev: bool,
    pub MemoryCompacted: bool,
    pub HostSkipItems: bool,
}
impl Default for ImGuiTable {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiTable {
    #[inline]
    pub fn RowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_RowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RowFlags_raw(this: *const Self) -> ImGuiTableRowFlags {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RowFlags_raw(this: *mut Self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LastRowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_LastRowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LastRowFlags_raw(this: *const Self) -> ImGuiTableRowFlags {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LastRowFlags_raw(this: *mut Self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RowFlags: ImGuiTableRowFlags,
        LastRowFlags: ImGuiTableRowFlags,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let RowFlags: u32 = unsafe { ::std::mem::transmute(RowFlags) };
            RowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let LastRowFlags: u32 = unsafe { ::std::mem::transmute(LastRowFlags) };
            LastRowFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImGuiTableHeaderData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableHeaderData,
}
impl Default for ImVector_ImGuiTableHeaderData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiTableTempData {
    pub TableIndex: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub AngledHeadersExtraWidth: f32,
    pub AngledHeadersRequests: ImVector_ImGuiTableHeaderData,
    pub UserOuterSize: ImVec2,
    pub DrawSplitter: ImDrawListSplitter,
    pub HostBackupWorkRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub HostBackupPrevLineSize: ImVec2,
    pub HostBackupCurrLineSize: ImVec2,
    pub HostBackupCursorMaxPos: ImVec2,
    pub HostBackupColumnsOffset: ImVec1,
    pub HostBackupItemWidth: f32,
    pub HostBackupItemWidthStackSize: ::std::os::raw::c_int,
}
impl Default for ImGuiTableTempData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImFontLoader {
    pub Name: *const ::std::os::raw::c_char,
    pub LoaderInit: ::std::option::Option<unsafe extern "C" fn(atlas: *mut ImFontAtlas) -> bool>,
    pub LoaderShutdown: ::std::option::Option<unsafe extern "C" fn(atlas: *mut ImFontAtlas)>,
    pub FontSrcInit: ::std::option::Option<
        unsafe extern "C" fn(atlas: *mut ImFontAtlas, src: *mut ImFontConfig) -> bool,
    >,
    pub FontSrcDestroy: ::std::option::Option<
        unsafe extern "C" fn(atlas: *mut ImFontAtlas, src: *mut ImFontConfig),
    >,
    pub FontSrcContainsGlyph: ::std::option::Option<
        unsafe extern "C" fn(
            atlas: *mut ImFontAtlas,
            src: *mut ImFontConfig,
            codepoint: ImWchar,
        ) -> bool,
    >,
    pub FontBakedInit: ::std::option::Option<
        unsafe extern "C" fn(
            atlas: *mut ImFontAtlas,
            src: *mut ImFontConfig,
            baked: *mut ImFontBaked,
            loader_data_for_baked_src: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub FontBakedDestroy: ::std::option::Option<
        unsafe extern "C" fn(
            atlas: *mut ImFontAtlas,
            src: *mut ImFontConfig,
            baked: *mut ImFontBaked,
            loader_data_for_baked_src: *mut ::std::os::raw::c_void,
        ),
    >,
    pub FontBakedLoadGlyph: ::std::option::Option<
        unsafe extern "C" fn(
            atlas: *mut ImFontAtlas,
            src: *mut ImFontConfig,
            baked: *mut ImFontBaked,
            loader_data_for_baked_src: *mut ::std::os::raw::c_void,
            codepoint: ImWchar,
            out_glyph: *mut ImFontGlyph,
            out_advance_x: *mut f32,
        ) -> bool,
    >,
    pub FontBakedSrcLoaderDataSize: usize,
}
impl Default for ImFontLoader {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImFontAtlasRectEntry {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl ImFontAtlasRectEntry {
    #[inline]
    pub fn TargetIndex(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_TargetIndex(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn TargetIndex_raw(this: *const Self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                20u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_TargetIndex_raw(this: *mut Self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                20u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Generation(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_Generation(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Generation_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                10u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Generation_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsUsed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IsUsed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsUsed_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IsUsed_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        TargetIndex: ::std::os::raw::c_int,
        Generation: ::std::os::raw::c_uint,
        IsUsed: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let TargetIndex: u32 = unsafe { ::std::mem::transmute(TargetIndex) };
            TargetIndex as u64
        });
        __bindgen_bitfield_unit.set(20usize, 10u8, {
            let Generation: u32 = unsafe { ::std::mem::transmute(Generation) };
            Generation as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let IsUsed: u32 = unsafe { ::std::mem::transmute(IsUsed) };
            IsUsed as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type stbrp_node_im = stbrp_node;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct stbrp_context_opaque {
    pub data: [::std::os::raw::c_char; 80usize],
}
impl Default for stbrp_context_opaque {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_stbrp_node_im {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut stbrp_node_im,
}
impl Default for ImVector_stbrp_node_im {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontAtlasRectEntry {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontAtlasRectEntry,
}
impl Default for ImVector_ImFontAtlasRectEntry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImFontBakedPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImFontBaked,
}
impl Default for ImVector_ImFontBakedPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImStableVector_ImFontBaked__32 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Blocks: ImVector_ImFontBakedPtr,
}
impl Default for ImStableVector_ImFontBaked__32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImFontAtlasBuilder {
    pub PackContext: stbrp_context_opaque,
    pub PackNodes: ImVector_stbrp_node_im,
    pub Rects: ImVector_ImTextureRect,
    pub RectsIndex: ImVector_ImFontAtlasRectEntry,
    pub TempBuffer: ImVector_unsigned_char,
    pub RectsIndexFreeListStart: ::std::os::raw::c_int,
    pub RectsPackedCount: ::std::os::raw::c_int,
    pub RectsPackedSurface: ::std::os::raw::c_int,
    pub RectsDiscardedCount: ::std::os::raw::c_int,
    pub RectsDiscardedSurface: ::std::os::raw::c_int,
    pub FrameCount: ::std::os::raw::c_int,
    pub MaxRectSize: ImVec2i,
    pub MaxRectBounds: ImVec2i,
    pub LockDisableResize: bool,
    pub PreloadedAllGlyphsRanges: bool,
    pub BakedPool: ImStableVector_ImFontBaked__32,
    pub BakedMap: ImGuiStorage,
    pub BakedDiscardedCount: ::std::os::raw::c_int,
    pub PackIdMouseCursors: ImFontAtlasRectId,
    pub PackIdLinesTexData: ImFontAtlasRectId,
}
impl Default for ImFontAtlasBuilder {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPlotAxisColor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImS16 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImS16,
}
impl Default for ImVector_ImS16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImS32 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImS32,
}
impl Default for ImVector_ImS32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImS64 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImS64,
}
impl Default for ImVector_ImS64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImS8 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImS8,
}
impl Default for ImVector_ImS8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImU64 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU64,
}
impl Default for ImVector_ImU64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImAxis = ::std::os::raw::c_int;
pub type ImPlotFlags = ::std::os::raw::c_int;
pub type ImPlotAxisFlags = ::std::os::raw::c_int;
pub type ImPlotSubplotFlags = ::std::os::raw::c_int;
pub type ImPlotLegendFlags = ::std::os::raw::c_int;
pub type ImPlotMouseTextFlags = ::std::os::raw::c_int;
pub type ImPlotDragToolFlags = ::std::os::raw::c_int;
pub type ImPlotColormapScaleFlags = ::std::os::raw::c_int;
pub type ImPlotItemFlags = ::std::os::raw::c_int;
pub type ImPlotLineFlags = ::std::os::raw::c_int;
pub type ImPlotScatterFlags = ::std::os::raw::c_int;
pub type ImPlotStairsFlags = ::std::os::raw::c_int;
pub type ImPlotShadedFlags = ::std::os::raw::c_int;
pub type ImPlotBarsFlags = ::std::os::raw::c_int;
pub type ImPlotBarGroupsFlags = ::std::os::raw::c_int;
pub type ImPlotErrorBarsFlags = ::std::os::raw::c_int;
pub type ImPlotStemsFlags = ::std::os::raw::c_int;
pub type ImPlotInfLinesFlags = ::std::os::raw::c_int;
pub type ImPlotPieChartFlags = ::std::os::raw::c_int;
pub type ImPlotHeatmapFlags = ::std::os::raw::c_int;
pub type ImPlotHistogramFlags = ::std::os::raw::c_int;
pub type ImPlotDigitalFlags = ::std::os::raw::c_int;
pub type ImPlotImageFlags = ::std::os::raw::c_int;
pub type ImPlotTextFlags = ::std::os::raw::c_int;
pub type ImPlotDummyFlags = ::std::os::raw::c_int;
pub type ImPlotCond = ::std::os::raw::c_int;
pub type ImPlotCol = ::std::os::raw::c_int;
pub type ImPlotStyleVar = ::std::os::raw::c_int;
pub type ImPlotScale = ::std::os::raw::c_int;
pub type ImPlotMarker = ::std::os::raw::c_int;
pub type ImPlotColormap = ::std::os::raw::c_int;
pub type ImPlotLocation = ::std::os::raw::c_int;
pub type ImPlotBin = ::std::os::raw::c_int;
pub const ImPlotFlags_None: ImPlotFlags_ = 0;
pub const ImPlotFlags_NoTitle: ImPlotFlags_ = 1;
pub const ImPlotFlags_NoLegend: ImPlotFlags_ = 2;
pub const ImPlotFlags_NoMouseText: ImPlotFlags_ = 4;
pub const ImPlotFlags_NoInputs: ImPlotFlags_ = 8;
pub const ImPlotFlags_NoMenus: ImPlotFlags_ = 16;
pub const ImPlotFlags_NoBoxSelect: ImPlotFlags_ = 32;
pub const ImPlotFlags_NoFrame: ImPlotFlags_ = 64;
pub const ImPlotFlags_Equal: ImPlotFlags_ = 128;
pub const ImPlotFlags_Crosshairs: ImPlotFlags_ = 256;
pub const ImPlotFlags_CanvasOnly: ImPlotFlags_ = 55;
pub type ImPlotFlags_ = ::std::os::raw::c_int;
pub const ImPlotAxisFlags_None: ImPlotAxisFlags_ = 0;
pub const ImPlotAxisFlags_NoLabel: ImPlotAxisFlags_ = 1;
pub const ImPlotAxisFlags_NoGridLines: ImPlotAxisFlags_ = 2;
pub const ImPlotAxisFlags_NoTickMarks: ImPlotAxisFlags_ = 4;
pub const ImPlotAxisFlags_NoTickLabels: ImPlotAxisFlags_ = 8;
pub const ImPlotAxisFlags_NoInitialFit: ImPlotAxisFlags_ = 16;
pub const ImPlotAxisFlags_NoMenus: ImPlotAxisFlags_ = 32;
pub const ImPlotAxisFlags_NoSideSwitch: ImPlotAxisFlags_ = 64;
pub const ImPlotAxisFlags_NoHighlight: ImPlotAxisFlags_ = 128;
pub const ImPlotAxisFlags_Opposite: ImPlotAxisFlags_ = 256;
pub const ImPlotAxisFlags_Foreground: ImPlotAxisFlags_ = 512;
pub const ImPlotAxisFlags_Invert: ImPlotAxisFlags_ = 1024;
pub const ImPlotAxisFlags_AutoFit: ImPlotAxisFlags_ = 2048;
pub const ImPlotAxisFlags_RangeFit: ImPlotAxisFlags_ = 4096;
pub const ImPlotAxisFlags_PanStretch: ImPlotAxisFlags_ = 8192;
pub const ImPlotAxisFlags_LockMin: ImPlotAxisFlags_ = 16384;
pub const ImPlotAxisFlags_LockMax: ImPlotAxisFlags_ = 32768;
pub const ImPlotAxisFlags_Lock: ImPlotAxisFlags_ = 49152;
pub const ImPlotAxisFlags_NoDecorations: ImPlotAxisFlags_ = 15;
pub const ImPlotAxisFlags_AuxDefault: ImPlotAxisFlags_ = 258;
pub type ImPlotAxisFlags_ = ::std::os::raw::c_int;
pub const ImPlotSubplotFlags_None: ImPlotSubplotFlags_ = 0;
pub const ImPlotSubplotFlags_NoTitle: ImPlotSubplotFlags_ = 1;
pub const ImPlotSubplotFlags_NoLegend: ImPlotSubplotFlags_ = 2;
pub const ImPlotSubplotFlags_NoMenus: ImPlotSubplotFlags_ = 4;
pub const ImPlotSubplotFlags_NoResize: ImPlotSubplotFlags_ = 8;
pub const ImPlotSubplotFlags_NoAlign: ImPlotSubplotFlags_ = 16;
pub const ImPlotSubplotFlags_ShareItems: ImPlotSubplotFlags_ = 32;
pub const ImPlotSubplotFlags_LinkRows: ImPlotSubplotFlags_ = 64;
pub const ImPlotSubplotFlags_LinkCols: ImPlotSubplotFlags_ = 128;
pub const ImPlotSubplotFlags_LinkAllX: ImPlotSubplotFlags_ = 256;
pub const ImPlotSubplotFlags_LinkAllY: ImPlotSubplotFlags_ = 512;
pub const ImPlotSubplotFlags_ColMajor: ImPlotSubplotFlags_ = 1024;
pub type ImPlotSubplotFlags_ = ::std::os::raw::c_int;
pub const ImPlotLegendFlags_None: ImPlotLegendFlags_ = 0;
pub const ImPlotLegendFlags_NoButtons: ImPlotLegendFlags_ = 1;
pub const ImPlotLegendFlags_NoHighlightItem: ImPlotLegendFlags_ = 2;
pub const ImPlotLegendFlags_NoHighlightAxis: ImPlotLegendFlags_ = 4;
pub const ImPlotLegendFlags_NoMenus: ImPlotLegendFlags_ = 8;
pub const ImPlotLegendFlags_Outside: ImPlotLegendFlags_ = 16;
pub const ImPlotLegendFlags_Horizontal: ImPlotLegendFlags_ = 32;
pub const ImPlotLegendFlags_Sort: ImPlotLegendFlags_ = 64;
pub type ImPlotLegendFlags_ = ::std::os::raw::c_int;
pub const ImPlotMouseTextFlags_None: ImPlotMouseTextFlags_ = 0;
pub const ImPlotMouseTextFlags_NoAuxAxes: ImPlotMouseTextFlags_ = 1;
pub const ImPlotMouseTextFlags_NoFormat: ImPlotMouseTextFlags_ = 2;
pub const ImPlotMouseTextFlags_ShowAlways: ImPlotMouseTextFlags_ = 4;
pub type ImPlotMouseTextFlags_ = ::std::os::raw::c_int;
pub const ImPlotDragToolFlags_None: ImPlotDragToolFlags_ = 0;
pub const ImPlotDragToolFlags_NoCursors: ImPlotDragToolFlags_ = 1;
pub const ImPlotDragToolFlags_NoFit: ImPlotDragToolFlags_ = 2;
pub const ImPlotDragToolFlags_NoInputs: ImPlotDragToolFlags_ = 4;
pub const ImPlotDragToolFlags_Delayed: ImPlotDragToolFlags_ = 8;
pub type ImPlotDragToolFlags_ = ::std::os::raw::c_int;
pub const ImPlotColormapScaleFlags_None: ImPlotColormapScaleFlags_ = 0;
pub const ImPlotColormapScaleFlags_NoLabel: ImPlotColormapScaleFlags_ = 1;
pub const ImPlotColormapScaleFlags_Opposite: ImPlotColormapScaleFlags_ = 2;
pub const ImPlotColormapScaleFlags_Invert: ImPlotColormapScaleFlags_ = 4;
pub type ImPlotColormapScaleFlags_ = ::std::os::raw::c_int;
pub const ImPlotItemFlags_None: ImPlotItemFlags_ = 0;
pub const ImPlotItemFlags_NoLegend: ImPlotItemFlags_ = 1;
pub const ImPlotItemFlags_NoFit: ImPlotItemFlags_ = 2;
pub type ImPlotItemFlags_ = ::std::os::raw::c_int;
pub const ImPlotLineFlags_None: ImPlotLineFlags_ = 0;
pub const ImPlotLineFlags_Segments: ImPlotLineFlags_ = 1024;
pub const ImPlotLineFlags_Loop: ImPlotLineFlags_ = 2048;
pub const ImPlotLineFlags_SkipNaN: ImPlotLineFlags_ = 4096;
pub const ImPlotLineFlags_NoClip: ImPlotLineFlags_ = 8192;
pub const ImPlotLineFlags_Shaded: ImPlotLineFlags_ = 16384;
pub type ImPlotLineFlags_ = ::std::os::raw::c_int;
pub const ImPlotScatterFlags_None: ImPlotScatterFlags_ = 0;
pub const ImPlotScatterFlags_NoClip: ImPlotScatterFlags_ = 1024;
pub type ImPlotScatterFlags_ = ::std::os::raw::c_int;
pub const ImPlotStairsFlags_None: ImPlotStairsFlags_ = 0;
pub const ImPlotStairsFlags_PreStep: ImPlotStairsFlags_ = 1024;
pub const ImPlotStairsFlags_Shaded: ImPlotStairsFlags_ = 2048;
pub type ImPlotStairsFlags_ = ::std::os::raw::c_int;
pub const ImPlotShadedFlags_None: ImPlotShadedFlags_ = 0;
pub type ImPlotShadedFlags_ = ::std::os::raw::c_int;
pub const ImPlotBarsFlags_None: ImPlotBarsFlags_ = 0;
pub const ImPlotBarsFlags_Horizontal: ImPlotBarsFlags_ = 1024;
pub type ImPlotBarsFlags_ = ::std::os::raw::c_int;
pub const ImPlotBarGroupsFlags_None: ImPlotBarGroupsFlags_ = 0;
pub const ImPlotBarGroupsFlags_Horizontal: ImPlotBarGroupsFlags_ = 1024;
pub const ImPlotBarGroupsFlags_Stacked: ImPlotBarGroupsFlags_ = 2048;
pub type ImPlotBarGroupsFlags_ = ::std::os::raw::c_int;
pub const ImPlotErrorBarsFlags_None: ImPlotErrorBarsFlags_ = 0;
pub const ImPlotErrorBarsFlags_Horizontal: ImPlotErrorBarsFlags_ = 1024;
pub type ImPlotErrorBarsFlags_ = ::std::os::raw::c_int;
pub const ImPlotStemsFlags_None: ImPlotStemsFlags_ = 0;
pub const ImPlotStemsFlags_Horizontal: ImPlotStemsFlags_ = 1024;
pub type ImPlotStemsFlags_ = ::std::os::raw::c_int;
pub const ImPlotInfLinesFlags_None: ImPlotInfLinesFlags_ = 0;
pub const ImPlotInfLinesFlags_Horizontal: ImPlotInfLinesFlags_ = 1024;
pub type ImPlotInfLinesFlags_ = ::std::os::raw::c_int;
pub const ImPlotPieChartFlags_None: ImPlotPieChartFlags_ = 0;
pub const ImPlotPieChartFlags_Normalize: ImPlotPieChartFlags_ = 1024;
pub const ImPlotPieChartFlags_IgnoreHidden: ImPlotPieChartFlags_ = 2048;
pub const ImPlotPieChartFlags_Exploding: ImPlotPieChartFlags_ = 4096;
pub type ImPlotPieChartFlags_ = ::std::os::raw::c_int;
pub const ImPlotHeatmapFlags_None: ImPlotHeatmapFlags_ = 0;
pub const ImPlotHeatmapFlags_ColMajor: ImPlotHeatmapFlags_ = 1024;
pub type ImPlotHeatmapFlags_ = ::std::os::raw::c_int;
pub const ImPlotHistogramFlags_None: ImPlotHistogramFlags_ = 0;
pub const ImPlotHistogramFlags_Horizontal: ImPlotHistogramFlags_ = 1024;
pub const ImPlotHistogramFlags_Cumulative: ImPlotHistogramFlags_ = 2048;
pub const ImPlotHistogramFlags_Density: ImPlotHistogramFlags_ = 4096;
pub const ImPlotHistogramFlags_NoOutliers: ImPlotHistogramFlags_ = 8192;
pub const ImPlotHistogramFlags_ColMajor: ImPlotHistogramFlags_ = 16384;
pub type ImPlotHistogramFlags_ = ::std::os::raw::c_int;
pub const ImPlotDigitalFlags_None: ImPlotDigitalFlags_ = 0;
pub type ImPlotDigitalFlags_ = ::std::os::raw::c_int;
pub const ImPlotImageFlags_None: ImPlotImageFlags_ = 0;
pub type ImPlotImageFlags_ = ::std::os::raw::c_int;
pub const ImPlotTextFlags_None: ImPlotTextFlags_ = 0;
pub const ImPlotTextFlags_Vertical: ImPlotTextFlags_ = 1024;
pub type ImPlotTextFlags_ = ::std::os::raw::c_int;
pub const ImPlotDummyFlags_None: ImPlotDummyFlags_ = 0;
pub type ImPlotDummyFlags_ = ::std::os::raw::c_int;
pub const ImPlotCond_None: ImPlotCond_ = 0;
pub const ImPlotCond_Always: ImPlotCond_ = 1;
pub const ImPlotCond_Once: ImPlotCond_ = 2;
pub type ImPlotCond_ = ::std::os::raw::c_int;
pub const ImPlotCol_Line: ImPlotCol_ = 0;
pub const ImPlotCol_Fill: ImPlotCol_ = 1;
pub const ImPlotCol_MarkerOutline: ImPlotCol_ = 2;
pub const ImPlotCol_MarkerFill: ImPlotCol_ = 3;
pub const ImPlotCol_ErrorBar: ImPlotCol_ = 4;
pub const ImPlotCol_FrameBg: ImPlotCol_ = 5;
pub const ImPlotCol_PlotBg: ImPlotCol_ = 6;
pub const ImPlotCol_PlotBorder: ImPlotCol_ = 7;
pub const ImPlotCol_LegendBg: ImPlotCol_ = 8;
pub const ImPlotCol_LegendBorder: ImPlotCol_ = 9;
pub const ImPlotCol_LegendText: ImPlotCol_ = 10;
pub const ImPlotCol_TitleText: ImPlotCol_ = 11;
pub const ImPlotCol_InlayText: ImPlotCol_ = 12;
pub const ImPlotCol_AxisText: ImPlotCol_ = 13;
pub const ImPlotCol_AxisGrid: ImPlotCol_ = 14;
pub const ImPlotCol_AxisTick: ImPlotCol_ = 15;
pub const ImPlotCol_AxisBg: ImPlotCol_ = 16;
pub const ImPlotCol_AxisBgHovered: ImPlotCol_ = 17;
pub const ImPlotCol_AxisBgActive: ImPlotCol_ = 18;
pub const ImPlotCol_Selection: ImPlotCol_ = 19;
pub const ImPlotCol_Crosshairs: ImPlotCol_ = 20;
pub const ImPlotCol_COUNT: ImPlotCol_ = 21;
pub type ImPlotCol_ = ::std::os::raw::c_int;
pub const ImPlotStyleVar_LineWeight: ImPlotStyleVar_ = 0;
pub const ImPlotStyleVar_Marker: ImPlotStyleVar_ = 1;
pub const ImPlotStyleVar_MarkerSize: ImPlotStyleVar_ = 2;
pub const ImPlotStyleVar_MarkerWeight: ImPlotStyleVar_ = 3;
pub const ImPlotStyleVar_FillAlpha: ImPlotStyleVar_ = 4;
pub const ImPlotStyleVar_ErrorBarSize: ImPlotStyleVar_ = 5;
pub const ImPlotStyleVar_ErrorBarWeight: ImPlotStyleVar_ = 6;
pub const ImPlotStyleVar_DigitalBitHeight: ImPlotStyleVar_ = 7;
pub const ImPlotStyleVar_DigitalBitGap: ImPlotStyleVar_ = 8;
pub const ImPlotStyleVar_PlotBorderSize: ImPlotStyleVar_ = 9;
pub const ImPlotStyleVar_MinorAlpha: ImPlotStyleVar_ = 10;
pub const ImPlotStyleVar_MajorTickLen: ImPlotStyleVar_ = 11;
pub const ImPlotStyleVar_MinorTickLen: ImPlotStyleVar_ = 12;
pub const ImPlotStyleVar_MajorTickSize: ImPlotStyleVar_ = 13;
pub const ImPlotStyleVar_MinorTickSize: ImPlotStyleVar_ = 14;
pub const ImPlotStyleVar_MajorGridSize: ImPlotStyleVar_ = 15;
pub const ImPlotStyleVar_MinorGridSize: ImPlotStyleVar_ = 16;
pub const ImPlotStyleVar_PlotPadding: ImPlotStyleVar_ = 17;
pub const ImPlotStyleVar_LabelPadding: ImPlotStyleVar_ = 18;
pub const ImPlotStyleVar_LegendPadding: ImPlotStyleVar_ = 19;
pub const ImPlotStyleVar_LegendInnerPadding: ImPlotStyleVar_ = 20;
pub const ImPlotStyleVar_LegendSpacing: ImPlotStyleVar_ = 21;
pub const ImPlotStyleVar_MousePosPadding: ImPlotStyleVar_ = 22;
pub const ImPlotStyleVar_AnnotationPadding: ImPlotStyleVar_ = 23;
pub const ImPlotStyleVar_FitPadding: ImPlotStyleVar_ = 24;
pub const ImPlotStyleVar_PlotDefaultSize: ImPlotStyleVar_ = 25;
pub const ImPlotStyleVar_PlotMinSize: ImPlotStyleVar_ = 26;
pub const ImPlotStyleVar_COUNT: ImPlotStyleVar_ = 27;
pub type ImPlotStyleVar_ = ::std::os::raw::c_int;
pub const ImPlotScale_Linear: ImPlotScale_ = 0;
pub const ImPlotScale_Time: ImPlotScale_ = 1;
pub const ImPlotScale_Log10: ImPlotScale_ = 2;
pub const ImPlotScale_SymLog: ImPlotScale_ = 3;
pub type ImPlotScale_ = ::std::os::raw::c_int;
pub const ImPlotMarker_None: ImPlotMarker_ = -1;
pub const ImPlotMarker_Circle: ImPlotMarker_ = 0;
pub const ImPlotMarker_Square: ImPlotMarker_ = 1;
pub const ImPlotMarker_Diamond: ImPlotMarker_ = 2;
pub const ImPlotMarker_Up: ImPlotMarker_ = 3;
pub const ImPlotMarker_Down: ImPlotMarker_ = 4;
pub const ImPlotMarker_Left: ImPlotMarker_ = 5;
pub const ImPlotMarker_Right: ImPlotMarker_ = 6;
pub const ImPlotMarker_Cross: ImPlotMarker_ = 7;
pub const ImPlotMarker_Plus: ImPlotMarker_ = 8;
pub const ImPlotMarker_Asterisk: ImPlotMarker_ = 9;
pub const ImPlotMarker_COUNT: ImPlotMarker_ = 10;
pub type ImPlotMarker_ = ::std::os::raw::c_int;
pub const ImPlotColormap_Deep: ImPlotColormap_ = 0;
pub const ImPlotColormap_Dark: ImPlotColormap_ = 1;
pub const ImPlotColormap_Pastel: ImPlotColormap_ = 2;
pub const ImPlotColormap_Paired: ImPlotColormap_ = 3;
pub const ImPlotColormap_Viridis: ImPlotColormap_ = 4;
pub const ImPlotColormap_Plasma: ImPlotColormap_ = 5;
pub const ImPlotColormap_Hot: ImPlotColormap_ = 6;
pub const ImPlotColormap_Cool: ImPlotColormap_ = 7;
pub const ImPlotColormap_Pink: ImPlotColormap_ = 8;
pub const ImPlotColormap_Jet: ImPlotColormap_ = 9;
pub const ImPlotColormap_Twilight: ImPlotColormap_ = 10;
pub const ImPlotColormap_RdBu: ImPlotColormap_ = 11;
pub const ImPlotColormap_BrBG: ImPlotColormap_ = 12;
pub const ImPlotColormap_PiYG: ImPlotColormap_ = 13;
pub const ImPlotColormap_Spectral: ImPlotColormap_ = 14;
pub const ImPlotColormap_Greys: ImPlotColormap_ = 15;
pub type ImPlotColormap_ = ::std::os::raw::c_int;
pub const ImPlotLocation_Center: ImPlotLocation_ = 0;
pub const ImPlotLocation_North: ImPlotLocation_ = 1;
pub const ImPlotLocation_South: ImPlotLocation_ = 2;
pub const ImPlotLocation_West: ImPlotLocation_ = 4;
pub const ImPlotLocation_East: ImPlotLocation_ = 8;
pub const ImPlotLocation_NorthWest: ImPlotLocation_ = 5;
pub const ImPlotLocation_NorthEast: ImPlotLocation_ = 9;
pub const ImPlotLocation_SouthWest: ImPlotLocation_ = 6;
pub const ImPlotLocation_SouthEast: ImPlotLocation_ = 10;
pub type ImPlotLocation_ = ::std::os::raw::c_int;
pub const ImPlotBin_Sqrt: ImPlotBin_ = -1;
pub const ImPlotBin_Sturges: ImPlotBin_ = -2;
pub const ImPlotBin_Rice: ImPlotBin_ = -3;
pub const ImPlotBin_Scott: ImPlotBin_ = -4;
pub type ImPlotBin_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImPlotPoint {
    pub x: f64,
    pub y: f64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImPlotRange {
    pub Min: f64,
    pub Max: f64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImPlotRect {
    pub X: ImPlotRange,
    pub Y: ImPlotRange,
}
#[repr(C)]
pub struct ImPlotStyle {
    pub LineWeight: f32,
    pub Marker: ::std::os::raw::c_int,
    pub MarkerSize: f32,
    pub MarkerWeight: f32,
    pub FillAlpha: f32,
    pub ErrorBarSize: f32,
    pub ErrorBarWeight: f32,
    pub DigitalBitHeight: f32,
    pub DigitalBitGap: f32,
    pub PlotBorderSize: f32,
    pub MinorAlpha: f32,
    pub MajorTickLen: ImVec2,
    pub MinorTickLen: ImVec2,
    pub MajorTickSize: ImVec2,
    pub MinorTickSize: ImVec2,
    pub MajorGridSize: ImVec2,
    pub MinorGridSize: ImVec2,
    pub PlotPadding: ImVec2,
    pub LabelPadding: ImVec2,
    pub LegendPadding: ImVec2,
    pub LegendInnerPadding: ImVec2,
    pub LegendSpacing: ImVec2,
    pub MousePosPadding: ImVec2,
    pub AnnotationPadding: ImVec2,
    pub FitPadding: ImVec2,
    pub PlotDefaultSize: ImVec2,
    pub PlotMinSize: ImVec2,
    pub Colors: [ImVec4; 21usize],
    pub Colormap: ImPlotColormap,
    pub UseLocalTime: bool,
    pub UseISO8601: bool,
    pub Use24HourClock: bool,
}
impl Default for ImPlotStyle {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImPlotInputMap {
    pub Pan: ImGuiMouseButton,
    pub PanMod: ::std::os::raw::c_int,
    pub Fit: ImGuiMouseButton,
    pub Select: ImGuiMouseButton,
    pub SelectCancel: ImGuiMouseButton,
    pub SelectMod: ::std::os::raw::c_int,
    pub SelectHorzMod: ::std::os::raw::c_int,
    pub SelectVertMod: ::std::os::raw::c_int,
    pub Menu: ImGuiMouseButton,
    pub OverrideMod: ::std::os::raw::c_int,
    pub ZoomMod: ::std::os::raw::c_int,
    pub ZoomRate: f32,
}
impl Default for ImPlotInputMap {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImPlotFormatter = ::std::option::Option<
    unsafe extern "C" fn(
        value: f64,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type ImPlotGetter = ::std::option::Option<
    unsafe extern "C" fn(
        idx: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ImPlotPoint,
>;
pub type ImPlotTransform = ::std::option::Option<
    unsafe extern "C" fn(value: f64, user_data: *mut ::std::os::raw::c_void) -> f64,
>;
pub type ImPlotTimeUnit = ::std::os::raw::c_int;
pub type ImPlotDateFmt = ::std::os::raw::c_int;
pub type ImPlotTimeFmt = ::std::os::raw::c_int;
pub const ImPlotTimeUnit_Us: ImPlotTimeUnit_ = 0;
pub const ImPlotTimeUnit_Ms: ImPlotTimeUnit_ = 1;
pub const ImPlotTimeUnit_S: ImPlotTimeUnit_ = 2;
pub const ImPlotTimeUnit_Min: ImPlotTimeUnit_ = 3;
pub const ImPlotTimeUnit_Hr: ImPlotTimeUnit_ = 4;
pub const ImPlotTimeUnit_Day: ImPlotTimeUnit_ = 5;
pub const ImPlotTimeUnit_Mo: ImPlotTimeUnit_ = 6;
pub const ImPlotTimeUnit_Yr: ImPlotTimeUnit_ = 7;
pub const ImPlotTimeUnit_COUNT: ImPlotTimeUnit_ = 8;
pub type ImPlotTimeUnit_ = ::std::os::raw::c_int;
pub const ImPlotDateFmt_None: ImPlotDateFmt_ = 0;
pub const ImPlotDateFmt_DayMo: ImPlotDateFmt_ = 1;
pub const ImPlotDateFmt_DayMoYr: ImPlotDateFmt_ = 2;
pub const ImPlotDateFmt_MoYr: ImPlotDateFmt_ = 3;
pub const ImPlotDateFmt_Mo: ImPlotDateFmt_ = 4;
pub const ImPlotDateFmt_Yr: ImPlotDateFmt_ = 5;
pub type ImPlotDateFmt_ = ::std::os::raw::c_int;
pub const ImPlotTimeFmt_None: ImPlotTimeFmt_ = 0;
pub const ImPlotTimeFmt_Us: ImPlotTimeFmt_ = 1;
pub const ImPlotTimeFmt_SUs: ImPlotTimeFmt_ = 2;
pub const ImPlotTimeFmt_SMs: ImPlotTimeFmt_ = 3;
pub const ImPlotTimeFmt_S: ImPlotTimeFmt_ = 4;
pub const ImPlotTimeFmt_MinSMs: ImPlotTimeFmt_ = 5;
pub const ImPlotTimeFmt_HrMinSMs: ImPlotTimeFmt_ = 6;
pub const ImPlotTimeFmt_HrMinS: ImPlotTimeFmt_ = 7;
pub const ImPlotTimeFmt_HrMin: ImPlotTimeFmt_ = 8;
pub const ImPlotTimeFmt_Hr: ImPlotTimeFmt_ = 9;
pub type ImPlotTimeFmt_ = ::std::os::raw::c_int;
pub type ImPlotLocator = ::std::option::Option<
    unsafe extern "C" fn(
        ticker: *mut ImPlotTicker,
        range: ImPlotRange,
        pixels: f32,
        vertical: bool,
        formatter: ImPlotFormatter,
        formatter_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPlotDateTimeSpec {
    pub Date: ImPlotDateFmt,
    pub Time: ImPlotTimeFmt,
    pub UseISO8601: bool,
    pub Use24HourClock: bool,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPlotTime {
    pub S: time_t,
    pub Us: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_bool {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut bool,
}
impl Default for ImVector_bool {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPlotColormapData {
    pub Keys: ImVector_ImU32,
    pub KeyCounts: ImVector_int,
    pub KeyOffsets: ImVector_int,
    pub Tables: ImVector_ImU32,
    pub TableSizes: ImVector_int,
    pub TableOffsets: ImVector_int,
    pub Text: ImGuiTextBuffer,
    pub TextOffsets: ImVector_int,
    pub Quals: ImVector_bool,
    pub Map: ImGuiStorage,
    pub Count: ::std::os::raw::c_int,
}
impl Default for ImPlotColormapData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImPlotPointError {
    pub X: f64,
    pub Y: f64,
    pub Neg: f64,
    pub Pos: f64,
}
#[repr(C)]
pub struct ImPlotAnnotation {
    pub Pos: ImVec2,
    pub Offset: ImVec2,
    pub ColorBg: ImU32,
    pub ColorFg: ImU32,
    pub TextOffset: ::std::os::raw::c_int,
    pub Clamp: bool,
}
impl Default for ImPlotAnnotation {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImPlotAnnotation {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotAnnotation,
}
impl Default for ImVector_ImPlotAnnotation {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPlotAnnotationCollection {
    pub Annotations: ImVector_ImPlotAnnotation,
    pub TextBuffer: ImGuiTextBuffer,
    pub Size: ::std::os::raw::c_int,
}
impl Default for ImPlotAnnotationCollection {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImPlotTag {
    pub Axis: ImAxis,
    pub Value: f64,
    pub ColorBg: ImU32,
    pub ColorFg: ImU32,
    pub TextOffset: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImPlotTag {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotTag,
}
impl Default for ImVector_ImPlotTag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPlotTagCollection {
    pub Tags: ImVector_ImPlotTag,
    pub TextBuffer: ImGuiTextBuffer,
    pub Size: ::std::os::raw::c_int,
}
impl Default for ImPlotTagCollection {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImPlotTick {
    pub PlotPos: f64,
    pub PixelPos: f32,
    pub LabelSize: ImVec2,
    pub TextOffset: ::std::os::raw::c_int,
    pub Major: bool,
    pub ShowLabel: bool,
    pub Level: ::std::os::raw::c_int,
    pub Idx: ::std::os::raw::c_int,
}
impl Default for ImPlotTick {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImPlotTick {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotTick,
}
impl Default for ImVector_ImPlotTick {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImPlotTicker {
    pub Ticks: ImVector_ImPlotTick,
    pub TextBuffer: ImGuiTextBuffer,
    pub MaxSize: ImVec2,
    pub LateSize: ImVec2,
    pub Levels: ::std::os::raw::c_int,
}
impl Default for ImPlotTicker {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImPlotAxis {
    pub ID: ImGuiID,
    pub Flags: ImPlotAxisFlags,
    pub PreviousFlags: ImPlotAxisFlags,
    pub Range: ImPlotRange,
    pub RangeCond: ImPlotCond,
    pub Scale: ImPlotScale,
    pub FitExtents: ImPlotRange,
    pub OrthoAxis: *mut ImPlotAxis,
    pub ConstraintRange: ImPlotRange,
    pub ConstraintZoom: ImPlotRange,
    pub Ticker: ImPlotTicker,
    pub Formatter: ImPlotFormatter,
    pub FormatterData: *mut ::std::os::raw::c_void,
    pub FormatSpec: [::std::os::raw::c_char; 16usize],
    pub Locator: ImPlotLocator,
    pub LinkedMin: *mut f64,
    pub LinkedMax: *mut f64,
    pub PickerLevel: ::std::os::raw::c_int,
    pub PickerTimeMin: ImPlotTime,
    pub PickerTimeMax: ImPlotTime,
    pub TransformForward: ImPlotTransform,
    pub TransformInverse: ImPlotTransform,
    pub TransformData: *mut ::std::os::raw::c_void,
    pub PixelMin: f32,
    pub PixelMax: f32,
    pub ScaleMin: f64,
    pub ScaleMax: f64,
    pub ScaleToPixel: f64,
    pub Datum1: f32,
    pub Datum2: f32,
    pub HoverRect: ImRect,
    pub LabelOffset: ::std::os::raw::c_int,
    pub ColorMaj: ImU32,
    pub ColorMin: ImU32,
    pub ColorTick: ImU32,
    pub ColorTxt: ImU32,
    pub ColorBg: ImU32,
    pub ColorHov: ImU32,
    pub ColorAct: ImU32,
    pub ColorHiLi: ImU32,
    pub Enabled: bool,
    pub Vertical: bool,
    pub FitThisFrame: bool,
    pub HasRange: bool,
    pub HasFormatSpec: bool,
    pub ShowDefaultTicks: bool,
    pub Hovered: bool,
    pub Held: bool,
}
impl Default for ImPlotAxis {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImPlotAlignmentData {
    pub Vertical: bool,
    pub PadA: f32,
    pub PadB: f32,
    pub PadAMax: f32,
    pub PadBMax: f32,
}
#[repr(C)]
pub struct ImPlotItem {
    pub ID: ImGuiID,
    pub Color: ImU32,
    pub LegendHoverRect: ImRect,
    pub NameOffset: ::std::os::raw::c_int,
    pub Show: bool,
    pub LegendHovered: bool,
    pub SeenThisFrame: bool,
}
impl Default for ImPlotItem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImPlotLegend {
    pub Flags: ImPlotLegendFlags,
    pub PreviousFlags: ImPlotLegendFlags,
    pub Location: ImPlotLocation,
    pub PreviousLocation: ImPlotLocation,
    pub Scroll: ImVec2,
    pub Indices: ImVector_int,
    pub Labels: ImGuiTextBuffer,
    pub Rect: ImRect,
    pub RectClamped: ImRect,
    pub Hovered: bool,
    pub Held: bool,
    pub CanGoInside: bool,
}
impl Default for ImPlotLegend {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImPlotItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotItem,
}
impl Default for ImVector_ImPlotItem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPool_ImPlotItem {
    pub Buf: ImVector_ImPlotItem,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
impl Default for ImPool_ImPlotItem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImPlotItemGroup {
    pub ID: ImGuiID,
    pub Legend: ImPlotLegend,
    pub ItemPool: ImPool_ImPlotItem,
    pub ColormapIdx: ::std::os::raw::c_int,
}
impl Default for ImPlotItemGroup {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImPlotPlot {
    pub ID: ImGuiID,
    pub Flags: ImPlotFlags,
    pub PreviousFlags: ImPlotFlags,
    pub MouseTextLocation: ImPlotLocation,
    pub MouseTextFlags: ImPlotMouseTextFlags,
    pub Axes: [ImPlotAxis; 6usize],
    pub TextBuffer: ImGuiTextBuffer,
    pub Items: ImPlotItemGroup,
    pub CurrentX: ImAxis,
    pub CurrentY: ImAxis,
    pub FrameRect: ImRect,
    pub CanvasRect: ImRect,
    pub PlotRect: ImRect,
    pub AxesRect: ImRect,
    pub SelectRect: ImRect,
    pub SelectStart: ImVec2,
    pub TitleOffset: ::std::os::raw::c_int,
    pub JustCreated: bool,
    pub Initialized: bool,
    pub SetupLocked: bool,
    pub FitThisFrame: bool,
    pub Hovered: bool,
    pub Held: bool,
    pub Selecting: bool,
    pub Selected: bool,
    pub ContextLocked: bool,
}
impl Default for ImPlotPlot {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImPlotAlignmentData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotAlignmentData,
}
impl Default for ImVector_ImPlotAlignmentData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImPlotRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotRange,
}
impl Default for ImVector_ImPlotRange {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImPlotSubplot {
    pub ID: ImGuiID,
    pub Flags: ImPlotSubplotFlags,
    pub PreviousFlags: ImPlotSubplotFlags,
    pub Items: ImPlotItemGroup,
    pub Rows: ::std::os::raw::c_int,
    pub Cols: ::std::os::raw::c_int,
    pub CurrentIdx: ::std::os::raw::c_int,
    pub FrameRect: ImRect,
    pub GridRect: ImRect,
    pub CellSize: ImVec2,
    pub RowAlignmentData: ImVector_ImPlotAlignmentData,
    pub ColAlignmentData: ImVector_ImPlotAlignmentData,
    pub RowRatios: ImVector_float,
    pub ColRatios: ImVector_float,
    pub RowLinkData: ImVector_ImPlotRange,
    pub ColLinkData: ImVector_ImPlotRange,
    pub TempSizes: [f32; 2usize],
    pub FrameHovered: bool,
    pub HasTitle: bool,
}
impl Default for ImPlotSubplot {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImPlotNextPlotData {
    pub RangeCond: [ImPlotCond; 6usize],
    pub Range: [ImPlotRange; 6usize],
    pub HasRange: [bool; 6usize],
    pub Fit: [bool; 6usize],
    pub LinkedMin: [*mut f64; 6usize],
    pub LinkedMax: [*mut f64; 6usize],
}
impl Default for ImPlotNextPlotData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImPlotNextItemData {
    pub Colors: [ImVec4; 5usize],
    pub LineWeight: f32,
    pub Marker: ImPlotMarker,
    pub MarkerSize: f32,
    pub MarkerWeight: f32,
    pub FillAlpha: f32,
    pub ErrorBarSize: f32,
    pub ErrorBarWeight: f32,
    pub DigitalBitHeight: f32,
    pub DigitalBitGap: f32,
    pub RenderLine: bool,
    pub RenderFill: bool,
    pub RenderMarkerLine: bool,
    pub RenderMarkerFill: bool,
    pub HasHidden: bool,
    pub Hidden: bool,
    pub HiddenCond: ImPlotCond,
}
impl Default for ImPlotNextItemData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImPlotPlot {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotPlot,
}
impl Default for ImVector_ImPlotPlot {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPool_ImPlotPlot {
    pub Buf: ImVector_ImPlotPlot,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
impl Default for ImPool_ImPlotPlot {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImPlotSubplot {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotSubplot,
}
impl Default for ImVector_ImPlotSubplot {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPool_ImPlotSubplot {
    pub Buf: ImVector_ImPlotSubplot,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
impl Default for ImPool_ImPlotSubplot {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_ImPlotColormap {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotColormap,
}
impl Default for ImVector_ImPlotColormap {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVector_double {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut f64,
}
impl Default for ImVector_double {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImPool_ImPlotAlignmentData {
    pub Buf: ImVector_ImPlotAlignmentData,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
impl Default for ImPool_ImPlotAlignmentData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImPlotContext {
    pub Plots: ImPool_ImPlotPlot,
    pub Subplots: ImPool_ImPlotSubplot,
    pub CurrentPlot: *mut ImPlotPlot,
    pub CurrentSubplot: *mut ImPlotSubplot,
    pub CurrentItems: *mut ImPlotItemGroup,
    pub CurrentItem: *mut ImPlotItem,
    pub PreviousItem: *mut ImPlotItem,
    pub CTicker: ImPlotTicker,
    pub Annotations: ImPlotAnnotationCollection,
    pub Tags: ImPlotTagCollection,
    pub Style: ImPlotStyle,
    pub ColorModifiers: ImVector_ImGuiColorMod,
    pub StyleModifiers: ImVector_ImGuiStyleMod,
    pub ColormapData: ImPlotColormapData,
    pub ColormapModifiers: ImVector_ImPlotColormap,
    pub Tm: tm,
    pub TempDouble1: ImVector_double,
    pub TempDouble2: ImVector_double,
    pub TempInt1: ImVector_int,
    pub DigitalPlotItemCnt: ::std::os::raw::c_int,
    pub DigitalPlotOffset: ::std::os::raw::c_int,
    pub NextPlotData: ImPlotNextPlotData,
    pub NextItemData: ImPlotNextItemData,
    pub InputMap: ImPlotInputMap,
    pub OpenContextThisFrame: bool,
    pub MousePosStringBuilder: ImGuiTextBuffer,
    pub SortItems: *mut ImPlotItemGroup,
    pub AlignmentData: ImPool_ImPlotAlignmentData,
    pub CurrentAlignmentH: *mut ImPlotAlignmentData,
    pub CurrentAlignmentV: *mut ImPlotAlignmentData,
}
impl Default for ImPlotContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImPlotPoint_getter = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        idx: ::std::os::raw::c_int,
        point: *mut ImPlotPoint,
    ) -> *mut ::std::os::raw::c_void,
>;
unsafe extern "C" {
    pub fn ImPlotPoint_ImPlotPoint_Nil() -> *mut ImPlotPoint;
}
unsafe extern "C" {
    pub fn ImPlotPoint_destroy(self_: *mut ImPlotPoint);
}
unsafe extern "C" {
    pub fn ImPlotPoint_ImPlotPoint_double(_x: f64, _y: f64) -> *mut ImPlotPoint;
}
unsafe extern "C" {
    pub fn ImPlotPoint_ImPlotPoint_Vec2(p: ImVec2) -> *mut ImPlotPoint;
}
unsafe extern "C" {
    pub fn ImPlotRange_ImPlotRange_Nil() -> *mut ImPlotRange;
}
unsafe extern "C" {
    pub fn ImPlotRange_destroy(self_: *mut ImPlotRange);
}
unsafe extern "C" {
    pub fn ImPlotRange_ImPlotRange_double(_min: f64, _max: f64) -> *mut ImPlotRange;
}
unsafe extern "C" {
    pub fn ImPlotRange_Contains(self_: *mut ImPlotRange, value: f64) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotRange_Size(self_: *mut ImPlotRange) -> f64;
}
unsafe extern "C" {
    pub fn ImPlotRange_Clamp(self_: *mut ImPlotRange, value: f64) -> f64;
}
unsafe extern "C" {
    pub fn ImPlotRect_ImPlotRect_Nil() -> *mut ImPlotRect;
}
unsafe extern "C" {
    pub fn ImPlotRect_destroy(self_: *mut ImPlotRect);
}
unsafe extern "C" {
    pub fn ImPlotRect_ImPlotRect_double(
        x_min: f64,
        x_max: f64,
        y_min: f64,
        y_max: f64,
    ) -> *mut ImPlotRect;
}
unsafe extern "C" {
    pub fn ImPlotRect_Contains_PlotPoInt(self_: *mut ImPlotRect, p: ImPlotPoint) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotRect_Contains_double(self_: *mut ImPlotRect, x: f64, y: f64) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotRect_Size(pOut: *mut ImPlotPoint, self_: *mut ImPlotRect);
}
unsafe extern "C" {
    pub fn ImPlotRect_Clamp_PlotPoInt(
        pOut: *mut ImPlotPoint,
        self_: *mut ImPlotRect,
        p: ImPlotPoint,
    );
}
unsafe extern "C" {
    pub fn ImPlotRect_Clamp_double(pOut: *mut ImPlotPoint, self_: *mut ImPlotRect, x: f64, y: f64);
}
unsafe extern "C" {
    pub fn ImPlotRect_Min(pOut: *mut ImPlotPoint, self_: *mut ImPlotRect);
}
unsafe extern "C" {
    pub fn ImPlotRect_Max(pOut: *mut ImPlotPoint, self_: *mut ImPlotRect);
}
unsafe extern "C" {
    pub fn ImPlotStyle_ImPlotStyle() -> *mut ImPlotStyle;
}
unsafe extern "C" {
    pub fn ImPlotStyle_destroy(self_: *mut ImPlotStyle);
}
unsafe extern "C" {
    pub fn ImPlotInputMap_ImPlotInputMap() -> *mut ImPlotInputMap;
}
unsafe extern "C" {
    pub fn ImPlotInputMap_destroy(self_: *mut ImPlotInputMap);
}
unsafe extern "C" {
    pub fn ImPlot_CreateContext() -> *mut ImPlotContext;
}
unsafe extern "C" {
    pub fn ImPlot_DestroyContext(ctx: *mut ImPlotContext);
}
unsafe extern "C" {
    pub fn ImPlot_GetCurrentContext() -> *mut ImPlotContext;
}
unsafe extern "C" {
    pub fn ImPlot_SetCurrentContext(ctx: *mut ImPlotContext);
}
unsafe extern "C" {
    pub fn ImPlot_SetImGuiContext(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    pub fn ImPlot_BeginPlot(
        title_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        flags: ImPlotFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_EndPlot();
}
unsafe extern "C" {
    pub fn ImPlot_BeginSubplots(
        title_id: *const ::std::os::raw::c_char,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        size: ImVec2,
        flags: ImPlotSubplotFlags,
        row_ratios: *mut f32,
        col_ratios: *mut f32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_EndSubplots();
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxis(
        axis: ImAxis,
        label: *const ::std::os::raw::c_char,
        flags: ImPlotAxisFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxisLimits(axis: ImAxis, v_min: f64, v_max: f64, cond: ImPlotCond);
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxisLinks(axis: ImAxis, link_min: *mut f64, link_max: *mut f64);
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxisFormat_Str(axis: ImAxis, fmt: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxisFormat_PlotFormatter(
        axis: ImAxis,
        formatter: ImPlotFormatter,
        data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxisTicks_doublePtr(
        axis: ImAxis,
        values: *const f64,
        n_ticks: ::std::os::raw::c_int,
        labels: *const *const ::std::os::raw::c_char,
        keep_default: bool,
    );
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxisTicks_double(
        axis: ImAxis,
        v_min: f64,
        v_max: f64,
        n_ticks: ::std::os::raw::c_int,
        labels: *const *const ::std::os::raw::c_char,
        keep_default: bool,
    );
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxisScale_PlotScale(axis: ImAxis, scale: ImPlotScale);
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxisScale_PlotTransform(
        axis: ImAxis,
        forward: ImPlotTransform,
        inverse: ImPlotTransform,
        data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxisLimitsConstraints(axis: ImAxis, v_min: f64, v_max: f64);
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxisZoomConstraints(axis: ImAxis, z_min: f64, z_max: f64);
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxes(
        x_label: *const ::std::os::raw::c_char,
        y_label: *const ::std::os::raw::c_char,
        x_flags: ImPlotAxisFlags,
        y_flags: ImPlotAxisFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_SetupAxesLimits(x_min: f64, x_max: f64, y_min: f64, y_max: f64, cond: ImPlotCond);
}
unsafe extern "C" {
    pub fn ImPlot_SetupLegend(location: ImPlotLocation, flags: ImPlotLegendFlags);
}
unsafe extern "C" {
    pub fn ImPlot_SetupMouseText(location: ImPlotLocation, flags: ImPlotMouseTextFlags);
}
unsafe extern "C" {
    pub fn ImPlot_SetupFinish();
}
unsafe extern "C" {
    pub fn ImPlot_SetNextAxisLimits(axis: ImAxis, v_min: f64, v_max: f64, cond: ImPlotCond);
}
unsafe extern "C" {
    pub fn ImPlot_SetNextAxisLinks(axis: ImAxis, link_min: *mut f64, link_max: *mut f64);
}
unsafe extern "C" {
    pub fn ImPlot_SetNextAxisToFit(axis: ImAxis);
}
unsafe extern "C" {
    pub fn ImPlot_SetNextAxesLimits(
        x_min: f64,
        x_max: f64,
        y_min: f64,
        y_max: f64,
        cond: ImPlotCond,
    );
}
unsafe extern "C" {
    pub fn ImPlot_SetNextAxesToFit();
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_FloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_doublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_S8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_U8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_S16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_U16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_S32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_U32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_S64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLine_U64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotLineG(
        label_id: *const ::std::os::raw::c_char,
        getter: ImPlotPoint_getter,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_FloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_doublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_S8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_U8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_S16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_U16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_S32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_U32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_S64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatter_U64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotScatterG(
        label_id: *const ::std::os::raw::c_char,
        getter: ImPlotPoint_getter,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_FloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_doublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_S8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_U8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_S16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_U16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_S32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_U32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_S64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairs_U64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStairsG(
        label_id: *const ::std::os::raw::c_char,
        getter: ImPlotPoint_getter,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_FloatPtrFloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_doublePtrdoublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S8PtrS8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U8PtrU8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S16PtrS16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U16PtrU16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S32PtrS32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U32PtrU32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S64PtrS64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U64PtrU64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_FloatPtrFloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys1: *const f32,
        ys2: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_doublePtrdoublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys1: *const f64,
        ys2: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S8PtrS8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys1: *const ImS8,
        ys2: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U8PtrU8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys1: *const ImU8,
        ys2: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S16PtrS16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys1: *const ImS16,
        ys2: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U16PtrU16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys1: *const ImU16,
        ys2: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S32PtrS32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys1: *const ImS32,
        ys2: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U32PtrU32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys1: *const ImU32,
        ys2: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_S64PtrS64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys1: *const ImS64,
        ys2: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShaded_U64PtrU64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys1: *const ImU64,
        ys2: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotShadedG(
        label_id: *const ::std::os::raw::c_char,
        getter1: ImPlotPoint_getter,
        data1: *mut ::std::os::raw::c_void,
        getter2: ImPlotPoint_getter,
        data2: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_FloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_doublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_S8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_U8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_S16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_U16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_S32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_U32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_S64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBars_U64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarsG(
        label_id: *const ::std::os::raw::c_char,
        getter: ImPlotPoint_getter,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarGroups_FloatPtr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f32,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarGroups_doublePtr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f64,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarGroups_S8Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS8,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarGroups_U8Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU8,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarGroups_S16Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS16,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarGroups_U16Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU16,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarGroups_S32Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS32,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarGroups_U32Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU32,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarGroups_S64Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS64,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotBarGroups_U64Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU64,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        err: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        err: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        err: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        err: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        err: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        err: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        err: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        err: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        err: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        err: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        neg: *const f32,
        pos: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        neg: *const f64,
        pos: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        neg: *const ImS8,
        pos: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        neg: *const ImU8,
        pos: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        neg: *const ImS16,
        pos: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        neg: *const ImU16,
        pos: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        neg: *const ImS32,
        pos: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        neg: *const ImU32,
        pos: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        neg: *const ImS64,
        pos: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        neg: *const ImU64,
        pos: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_FloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_doublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_S8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_U8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_S16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_U16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_S32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_U32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_S64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotStems_U64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotInfLines_FloatPtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotInfLines_doublePtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotInfLines_S8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotInfLines_U8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotInfLines_S16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotInfLines_U16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotInfLines_S32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotInfLines_U32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotInfLines_S64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotInfLines_U64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_FloatPtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_doublePtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_S8PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_U8PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_S16PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_U16PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_S32PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_U32PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_S64PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_U64PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_FloatPtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_doublePtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_S8PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_U8PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_S16PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_U16PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_S32PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_U32PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_S64PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotPieChart_U64PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHeatmap_FloatPtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHeatmap_doublePtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHeatmap_S8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHeatmap_U8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHeatmap_S16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHeatmap_U16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHeatmap_S32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHeatmap_U32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHeatmap_S64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHeatmap_U64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram_FloatPtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram_doublePtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram_S8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram_U8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram_S16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram_U16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram_S32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram_U32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram_S64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram_U64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram2D_FloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram2D_doublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram2D_S8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram2D_U8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram2D_S16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram2D_U16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram2D_S32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram2D_U32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram2D_S64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotHistogram2D_U64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigital_FloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigital_doublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigital_S8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigital_U8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigital_S16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigital_U16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigital_S32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigital_U32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigital_S64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigital_U64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDigitalG(
        label_id: *const ::std::os::raw::c_char,
        getter: ImPlotPoint_getter,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotImage(
        label_id: *const ::std::os::raw::c_char,
        tex_ref: ImTextureRef,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        uv0: ImVec2,
        uv1: ImVec2,
        tint_col: ImVec4,
        flags: ImPlotImageFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotText(
        text: *const ::std::os::raw::c_char,
        x: f64,
        y: f64,
        pix_offset: ImVec2,
        flags: ImPlotTextFlags,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotDummy(label_id: *const ::std::os::raw::c_char, flags: ImPlotDummyFlags);
}
unsafe extern "C" {
    pub fn ImPlot_DragPoint(
        id: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        col: ImVec4,
        size: f32,
        flags: ImPlotDragToolFlags,
        out_clicked: *mut bool,
        out_hovered: *mut bool,
        held: *mut bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_DragLineX(
        id: ::std::os::raw::c_int,
        x: *mut f64,
        col: ImVec4,
        thickness: f32,
        flags: ImPlotDragToolFlags,
        out_clicked: *mut bool,
        out_hovered: *mut bool,
        held: *mut bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_DragLineY(
        id: ::std::os::raw::c_int,
        y: *mut f64,
        col: ImVec4,
        thickness: f32,
        flags: ImPlotDragToolFlags,
        out_clicked: *mut bool,
        out_hovered: *mut bool,
        held: *mut bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_DragRect(
        id: ::std::os::raw::c_int,
        x1: *mut f64,
        y1: *mut f64,
        x2: *mut f64,
        y2: *mut f64,
        col: ImVec4,
        flags: ImPlotDragToolFlags,
        out_clicked: *mut bool,
        out_hovered: *mut bool,
        held: *mut bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_Annotation_Bool(
        x: f64,
        y: f64,
        col: ImVec4,
        pix_offset: ImVec2,
        clamp: bool,
        round: bool,
    );
}
unsafe extern "C" {
    pub fn ImPlot_Annotation_Str(
        x: f64,
        y: f64,
        col: ImVec4,
        pix_offset: ImVec2,
        clamp: bool,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn ImPlot_AnnotationV(
        x: f64,
        y: f64,
        col: ImVec4,
        pix_offset: ImVec2,
        clamp: bool,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    pub fn ImPlot_TagX_Bool(x: f64, col: ImVec4, round: bool);
}
unsafe extern "C" {
    pub fn ImPlot_TagX_Str(x: f64, col: ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn ImPlot_TagXV(x: f64, col: ImVec4, fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn ImPlot_TagY_Bool(y: f64, col: ImVec4, round: bool);
}
unsafe extern "C" {
    pub fn ImPlot_TagY_Str(y: f64, col: ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn ImPlot_TagYV(y: f64, col: ImVec4, fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    pub fn ImPlot_SetAxis(axis: ImAxis);
}
unsafe extern "C" {
    pub fn ImPlot_SetAxes(x_axis: ImAxis, y_axis: ImAxis);
}
unsafe extern "C" {
    pub fn ImPlot_PixelsToPlot_Vec2(
        pOut: *mut ImPlotPoint,
        pix: ImVec2,
        x_axis: ImAxis,
        y_axis: ImAxis,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PixelsToPlot_Float(
        pOut: *mut ImPlotPoint,
        x: f32,
        y: f32,
        x_axis: ImAxis,
        y_axis: ImAxis,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotToPixels_PlotPoInt(
        pOut: *mut ImVec2,
        plt: ImPlotPoint,
        x_axis: ImAxis,
        y_axis: ImAxis,
    );
}
unsafe extern "C" {
    pub fn ImPlot_PlotToPixels_double(
        pOut: *mut ImVec2,
        x: f64,
        y: f64,
        x_axis: ImAxis,
        y_axis: ImAxis,
    );
}
unsafe extern "C" {
    pub fn ImPlot_GetPlotPos(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn ImPlot_GetPlotSize(pOut: *mut ImVec2);
}
unsafe extern "C" {
    pub fn ImPlot_GetPlotMousePos(pOut: *mut ImPlotPoint, x_axis: ImAxis, y_axis: ImAxis);
}
unsafe extern "C" {
    pub fn ImPlot_GetPlotLimits(pOut: *mut ImPlotRect, x_axis: ImAxis, y_axis: ImAxis);
}
unsafe extern "C" {
    pub fn ImPlot_IsPlotHovered() -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_IsAxisHovered(axis: ImAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_IsSubplotsHovered() -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_IsPlotSelected() -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_GetPlotSelection(pOut: *mut ImPlotRect, x_axis: ImAxis, y_axis: ImAxis);
}
unsafe extern "C" {
    pub fn ImPlot_CancelPlotSelection();
}
unsafe extern "C" {
    pub fn ImPlot_HideNextItem(hidden: bool, cond: ImPlotCond);
}
unsafe extern "C" {
    pub fn ImPlot_BeginAlignedPlots(
        group_id: *const ::std::os::raw::c_char,
        vertical: bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_EndAlignedPlots();
}
unsafe extern "C" {
    pub fn ImPlot_BeginLegendPopup(
        label_id: *const ::std::os::raw::c_char,
        mouse_button: ImGuiMouseButton,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_EndLegendPopup();
}
unsafe extern "C" {
    pub fn ImPlot_IsLegendEntryHovered(label_id: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_BeginDragDropTargetPlot() -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_BeginDragDropTargetAxis(axis: ImAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_BeginDragDropTargetLegend() -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_EndDragDropTarget();
}
unsafe extern "C" {
    pub fn ImPlot_BeginDragDropSourcePlot(flags: ImGuiDragDropFlags) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_BeginDragDropSourceAxis(axis: ImAxis, flags: ImGuiDragDropFlags) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_BeginDragDropSourceItem(
        label_id: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_EndDragDropSource();
}
unsafe extern "C" {
    pub fn ImPlot_GetStyle() -> *mut ImPlotStyle;
}
unsafe extern "C" {
    pub fn ImPlot_StyleColorsAuto(dst: *mut ImPlotStyle);
}
unsafe extern "C" {
    pub fn ImPlot_StyleColorsClassic(dst: *mut ImPlotStyle);
}
unsafe extern "C" {
    pub fn ImPlot_StyleColorsDark(dst: *mut ImPlotStyle);
}
unsafe extern "C" {
    pub fn ImPlot_StyleColorsLight(dst: *mut ImPlotStyle);
}
unsafe extern "C" {
    pub fn ImPlot_PushStyleColor_U32(idx: ImPlotCol, col: ImU32);
}
unsafe extern "C" {
    pub fn ImPlot_PushStyleColor_Vec4(idx: ImPlotCol, col: ImVec4);
}
unsafe extern "C" {
    pub fn ImPlot_PopStyleColor(count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImPlot_PushStyleVar_Float(idx: ImPlotStyleVar, val: f32);
}
unsafe extern "C" {
    pub fn ImPlot_PushStyleVar_Int(idx: ImPlotStyleVar, val: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImPlot_PushStyleVar_Vec2(idx: ImPlotStyleVar, val: ImVec2);
}
unsafe extern "C" {
    pub fn ImPlot_PopStyleVar(count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImPlot_SetNextLineStyle(col: ImVec4, weight: f32);
}
unsafe extern "C" {
    pub fn ImPlot_SetNextFillStyle(col: ImVec4, alpha_mod: f32);
}
unsafe extern "C" {
    pub fn ImPlot_SetNextMarkerStyle(
        marker: ImPlotMarker,
        size: f32,
        fill: ImVec4,
        weight: f32,
        outline: ImVec4,
    );
}
unsafe extern "C" {
    pub fn ImPlot_SetNextErrorBarStyle(col: ImVec4, size: f32, weight: f32);
}
unsafe extern "C" {
    pub fn ImPlot_GetLastItemColor(pOut: *mut ImVec4);
}
unsafe extern "C" {
    pub fn ImPlot_GetStyleColorName(idx: ImPlotCol) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlot_GetMarkerName(idx: ImPlotMarker) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlot_AddColormap_Vec4Ptr(
        name: *const ::std::os::raw::c_char,
        cols: *const ImVec4,
        size: ::std::os::raw::c_int,
        qual: bool,
    ) -> ImPlotColormap;
}
unsafe extern "C" {
    pub fn ImPlot_AddColormap_U32Ptr(
        name: *const ::std::os::raw::c_char,
        cols: *const ImU32,
        size: ::std::os::raw::c_int,
        qual: bool,
    ) -> ImPlotColormap;
}
unsafe extern "C" {
    pub fn ImPlot_GetColormapCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_GetColormapName(cmap: ImPlotColormap) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlot_GetColormapIndex(name: *const ::std::os::raw::c_char) -> ImPlotColormap;
}
unsafe extern "C" {
    pub fn ImPlot_PushColormap_PlotColormap(cmap: ImPlotColormap);
}
unsafe extern "C" {
    pub fn ImPlot_PushColormap_Str(name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ImPlot_PopColormap(count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ImPlot_NextColormapColor(pOut: *mut ImVec4);
}
unsafe extern "C" {
    pub fn ImPlot_GetColormapSize(cmap: ImPlotColormap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_GetColormapColor(
        pOut: *mut ImVec4,
        idx: ::std::os::raw::c_int,
        cmap: ImPlotColormap,
    );
}
unsafe extern "C" {
    pub fn ImPlot_SampleColormap(pOut: *mut ImVec4, t: f32, cmap: ImPlotColormap);
}
unsafe extern "C" {
    pub fn ImPlot_ColormapScale(
        label: *const ::std::os::raw::c_char,
        scale_min: f64,
        scale_max: f64,
        size: ImVec2,
        format: *const ::std::os::raw::c_char,
        flags: ImPlotColormapScaleFlags,
        cmap: ImPlotColormap,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ColormapSlider(
        label: *const ::std::os::raw::c_char,
        t: *mut f32,
        out: *mut ImVec4,
        format: *const ::std::os::raw::c_char,
        cmap: ImPlotColormap,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ColormapButton(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        cmap: ImPlotColormap,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_BustColorCache(plot_title_id: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ImPlot_GetInputMap() -> *mut ImPlotInputMap;
}
unsafe extern "C" {
    pub fn ImPlot_MapInputDefault(dst: *mut ImPlotInputMap);
}
unsafe extern "C" {
    pub fn ImPlot_MapInputReverse(dst: *mut ImPlotInputMap);
}
unsafe extern "C" {
    pub fn ImPlot_ItemIcon_Vec4(col: ImVec4);
}
unsafe extern "C" {
    pub fn ImPlot_ItemIcon_U32(col: ImU32);
}
unsafe extern "C" {
    pub fn ImPlot_ColormapIcon(cmap: ImPlotColormap);
}
unsafe extern "C" {
    pub fn ImPlot_GetPlotDrawList() -> *mut ImDrawList;
}
unsafe extern "C" {
    pub fn ImPlot_PushPlotClipRect(expand: f32);
}
unsafe extern "C" {
    pub fn ImPlot_PopPlotClipRect();
}
unsafe extern "C" {
    pub fn ImPlot_ShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ShowColormapSelector(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ShowInputMapSelector(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ShowStyleEditor(ref_: *mut ImPlotStyle);
}
unsafe extern "C" {
    pub fn ImPlot_ShowUserGuide();
}
unsafe extern "C" {
    pub fn ImPlot_ShowMetricsWindow(p_popen: *mut bool);
}
unsafe extern "C" {
    pub fn ImPlot_ShowDemoWindow(p_open: *mut bool);
}
unsafe extern "C" {
    pub fn ImPlot_ImLog10_Float(x: f32) -> f32;
}
unsafe extern "C" {
    pub fn ImPlot_ImLog10_double(x: f64) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImSinh_Float(x: f32) -> f32;
}
unsafe extern "C" {
    pub fn ImPlot_ImSinh_double(x: f64) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImAsinh_Float(x: f32) -> f32;
}
unsafe extern "C" {
    pub fn ImPlot_ImAsinh_double(x: f64) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap_Float(x: f32, x0: f32, x1: f32, y0: f32, y1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap_double(x: f64, x0: f64, x1: f64, y0: f64, y1: f64) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap_S8(x: ImS8, x0: ImS8, x1: ImS8, y0: ImS8, y1: ImS8) -> ImS8;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap_U8(x: ImU8, x0: ImU8, x1: ImU8, y0: ImU8, y1: ImU8) -> ImU8;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap_S16(x: ImS16, x0: ImS16, x1: ImS16, y0: ImS16, y1: ImS16) -> ImS16;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap_U16(x: ImU16, x0: ImU16, x1: ImU16, y0: ImU16, y1: ImU16) -> ImU16;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap_S32(x: ImS32, x0: ImS32, x1: ImS32, y0: ImS32, y1: ImS32) -> ImS32;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap_U32(x: ImU32, x0: ImU32, x1: ImU32, y0: ImU32, y1: ImU32) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap_S64(x: ImS64, x0: ImS64, x1: ImS64, y0: ImS64, y1: ImS64) -> ImS64;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap_U64(x: ImU64, x0: ImU64, x1: ImU64, y0: ImU64, y1: ImU64) -> ImU64;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap01_Float(x: f32, x0: f32, x1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap01_double(x: f64, x0: f64, x1: f64) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap01_S8(x: ImS8, x0: ImS8, x1: ImS8) -> ImS8;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap01_U8(x: ImU8, x0: ImU8, x1: ImU8) -> ImU8;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap01_S16(x: ImS16, x0: ImS16, x1: ImS16) -> ImS16;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap01_U16(x: ImU16, x0: ImU16, x1: ImU16) -> ImU16;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap01_S32(x: ImS32, x0: ImS32, x1: ImS32) -> ImS32;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap01_U32(x: ImU32, x0: ImU32, x1: ImU32) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap01_S64(x: ImS64, x0: ImS64, x1: ImS64) -> ImS64;
}
unsafe extern "C" {
    pub fn ImPlot_ImRemap01_U64(x: ImU64, x0: ImU64, x1: ImU64) -> ImU64;
}
unsafe extern "C" {
    pub fn ImPlot_ImPosMod(
        l: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_ImNan(val: f64) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImNanOrInf(val: f64) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImConstrainNan(val: f64) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImConstrainInf(val: f64) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImConstrainLog(val: f64) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImConstrainTime(val: f64) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImAlmostEqual(v1: f64, v2: f64, ulp: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinArray_FloatPtr(values: *const f32, count: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinArray_doublePtr(values: *const f64, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinArray_S8Ptr(values: *const ImS8, count: ::std::os::raw::c_int) -> ImS8;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinArray_U8Ptr(values: *const ImU8, count: ::std::os::raw::c_int) -> ImU8;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinArray_S16Ptr(values: *const ImS16, count: ::std::os::raw::c_int) -> ImS16;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinArray_U16Ptr(values: *const ImU16, count: ::std::os::raw::c_int) -> ImU16;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinArray_S32Ptr(values: *const ImS32, count: ::std::os::raw::c_int) -> ImS32;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinArray_U32Ptr(values: *const ImU32, count: ::std::os::raw::c_int) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinArray_S64Ptr(values: *const ImS64, count: ::std::os::raw::c_int) -> ImS64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinArray_U64Ptr(values: *const ImU64, count: ::std::os::raw::c_int) -> ImU64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMaxArray_FloatPtr(values: *const f32, count: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ImPlot_ImMaxArray_doublePtr(values: *const f64, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMaxArray_S8Ptr(values: *const ImS8, count: ::std::os::raw::c_int) -> ImS8;
}
unsafe extern "C" {
    pub fn ImPlot_ImMaxArray_U8Ptr(values: *const ImU8, count: ::std::os::raw::c_int) -> ImU8;
}
unsafe extern "C" {
    pub fn ImPlot_ImMaxArray_S16Ptr(values: *const ImS16, count: ::std::os::raw::c_int) -> ImS16;
}
unsafe extern "C" {
    pub fn ImPlot_ImMaxArray_U16Ptr(values: *const ImU16, count: ::std::os::raw::c_int) -> ImU16;
}
unsafe extern "C" {
    pub fn ImPlot_ImMaxArray_S32Ptr(values: *const ImS32, count: ::std::os::raw::c_int) -> ImS32;
}
unsafe extern "C" {
    pub fn ImPlot_ImMaxArray_U32Ptr(values: *const ImU32, count: ::std::os::raw::c_int) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_ImMaxArray_S64Ptr(values: *const ImS64, count: ::std::os::raw::c_int) -> ImS64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMaxArray_U64Ptr(values: *const ImU64, count: ::std::os::raw::c_int) -> ImU64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMinMaxArray_FloatPtr(
        values: *const f32,
        count: ::std::os::raw::c_int,
        min_out: *mut f32,
        max_out: *mut f32,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ImMinMaxArray_doublePtr(
        values: *const f64,
        count: ::std::os::raw::c_int,
        min_out: *mut f64,
        max_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ImMinMaxArray_S8Ptr(
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        min_out: *mut ImS8,
        max_out: *mut ImS8,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ImMinMaxArray_U8Ptr(
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        min_out: *mut ImU8,
        max_out: *mut ImU8,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ImMinMaxArray_S16Ptr(
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        min_out: *mut ImS16,
        max_out: *mut ImS16,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ImMinMaxArray_U16Ptr(
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        min_out: *mut ImU16,
        max_out: *mut ImU16,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ImMinMaxArray_S32Ptr(
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        min_out: *mut ImS32,
        max_out: *mut ImS32,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ImMinMaxArray_U32Ptr(
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        min_out: *mut ImU32,
        max_out: *mut ImU32,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ImMinMaxArray_S64Ptr(
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        min_out: *mut ImS64,
        max_out: *mut ImS64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ImMinMaxArray_U64Ptr(
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        min_out: *mut ImU64,
        max_out: *mut ImU64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ImSum_FloatPtr(values: *const f32, count: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ImPlot_ImSum_doublePtr(values: *const f64, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImSum_S8Ptr(values: *const ImS8, count: ::std::os::raw::c_int) -> ImS8;
}
unsafe extern "C" {
    pub fn ImPlot_ImSum_U8Ptr(values: *const ImU8, count: ::std::os::raw::c_int) -> ImU8;
}
unsafe extern "C" {
    pub fn ImPlot_ImSum_S16Ptr(values: *const ImS16, count: ::std::os::raw::c_int) -> ImS16;
}
unsafe extern "C" {
    pub fn ImPlot_ImSum_U16Ptr(values: *const ImU16, count: ::std::os::raw::c_int) -> ImU16;
}
unsafe extern "C" {
    pub fn ImPlot_ImSum_S32Ptr(values: *const ImS32, count: ::std::os::raw::c_int) -> ImS32;
}
unsafe extern "C" {
    pub fn ImPlot_ImSum_U32Ptr(values: *const ImU32, count: ::std::os::raw::c_int) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_ImSum_S64Ptr(values: *const ImS64, count: ::std::os::raw::c_int) -> ImS64;
}
unsafe extern "C" {
    pub fn ImPlot_ImSum_U64Ptr(values: *const ImU64, count: ::std::os::raw::c_int) -> ImU64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMean_FloatPtr(values: *const f32, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMean_doublePtr(values: *const f64, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMean_S8Ptr(values: *const ImS8, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMean_U8Ptr(values: *const ImU8, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMean_S16Ptr(values: *const ImS16, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMean_U16Ptr(values: *const ImU16, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMean_S32Ptr(values: *const ImS32, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMean_U32Ptr(values: *const ImU32, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMean_S64Ptr(values: *const ImS64, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMean_U64Ptr(values: *const ImU64, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImStdDev_FloatPtr(values: *const f32, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImStdDev_doublePtr(values: *const f64, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImStdDev_S8Ptr(values: *const ImS8, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImStdDev_U8Ptr(values: *const ImU8, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImStdDev_S16Ptr(values: *const ImS16, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImStdDev_U16Ptr(values: *const ImU16, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImStdDev_S32Ptr(values: *const ImS32, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImStdDev_U32Ptr(values: *const ImU32, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImStdDev_S64Ptr(values: *const ImS64, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImStdDev_U64Ptr(values: *const ImU64, count: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_ImMixU32(a: ImU32, b: ImU32, s: ImU32) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_ImLerpU32(colors: *const ImU32, size: ::std::os::raw::c_int, t: f32) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_ImAlphaU32(col: ImU32, alpha: f32) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_ImOverlaps_Float(min_a: f32, max_a: f32, min_b: f32, max_b: f32) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImOverlaps_double(min_a: f64, max_a: f64, min_b: f64, max_b: f64) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImOverlaps_S8(min_a: ImS8, max_a: ImS8, min_b: ImS8, max_b: ImS8) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImOverlaps_U8(min_a: ImU8, max_a: ImU8, min_b: ImU8, max_b: ImU8) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImOverlaps_S16(min_a: ImS16, max_a: ImS16, min_b: ImS16, max_b: ImS16) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImOverlaps_U16(min_a: ImU16, max_a: ImU16, min_b: ImU16, max_b: ImU16) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImOverlaps_S32(min_a: ImS32, max_a: ImS32, min_b: ImS32, max_b: ImS32) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImOverlaps_U32(min_a: ImU32, max_a: ImU32, min_b: ImU32, max_b: ImU32) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImOverlaps_S64(min_a: ImS64, max_a: ImS64, min_b: ImS64, max_b: ImS64) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ImOverlaps_U64(min_a: ImU64, max_a: ImU64, min_b: ImU64, max_b: ImU64) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotDateTimeSpec_ImPlotDateTimeSpec_Nil() -> *mut ImPlotDateTimeSpec;
}
unsafe extern "C" {
    pub fn ImPlotDateTimeSpec_destroy(self_: *mut ImPlotDateTimeSpec);
}
unsafe extern "C" {
    pub fn ImPlotDateTimeSpec_ImPlotDateTimeSpec_PlotDateFmt(
        date_fmt: ImPlotDateFmt,
        time_fmt: ImPlotTimeFmt,
        use_24_hr_clk: bool,
        use_iso_8601: bool,
    ) -> *mut ImPlotDateTimeSpec;
}
unsafe extern "C" {
    pub fn ImPlotTime_ImPlotTime_Nil() -> *mut ImPlotTime;
}
unsafe extern "C" {
    pub fn ImPlotTime_destroy(self_: *mut ImPlotTime);
}
unsafe extern "C" {
    pub fn ImPlotTime_ImPlotTime_time_t(s: time_t, us: ::std::os::raw::c_int) -> *mut ImPlotTime;
}
unsafe extern "C" {
    pub fn ImPlotTime_RollOver(self_: *mut ImPlotTime);
}
unsafe extern "C" {
    pub fn ImPlotTime_ToDouble(self_: *mut ImPlotTime) -> f64;
}
unsafe extern "C" {
    pub fn ImPlotTime_FromDouble(pOut: *mut ImPlotTime, t: f64);
}
unsafe extern "C" {
    pub fn ImPlotColormapData_ImPlotColormapData() -> *mut ImPlotColormapData;
}
unsafe extern "C" {
    pub fn ImPlotColormapData_destroy(self_: *mut ImPlotColormapData);
}
unsafe extern "C" {
    pub fn ImPlotColormapData_Append(
        self_: *mut ImPlotColormapData,
        name: *const ::std::os::raw::c_char,
        keys: *const ImU32,
        count: ::std::os::raw::c_int,
        qual: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlotColormapData__AppendTable(self_: *mut ImPlotColormapData, cmap: ImPlotColormap);
}
unsafe extern "C" {
    pub fn ImPlotColormapData_RebuildTables(self_: *mut ImPlotColormapData);
}
unsafe extern "C" {
    pub fn ImPlotColormapData_IsQual(self_: *mut ImPlotColormapData, cmap: ImPlotColormap) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotColormapData_GetName(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlotColormapData_GetIndex(
        self_: *mut ImPlotColormapData,
        name: *const ::std::os::raw::c_char,
    ) -> ImPlotColormap;
}
unsafe extern "C" {
    pub fn ImPlotColormapData_GetKeys(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
    ) -> *const ImU32;
}
unsafe extern "C" {
    pub fn ImPlotColormapData_GetKeyCount(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlotColormapData_GetKeyColor(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
        idx: ::std::os::raw::c_int,
    ) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlotColormapData_SetKeyColor(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
        idx: ::std::os::raw::c_int,
        value: ImU32,
    );
}
unsafe extern "C" {
    pub fn ImPlotColormapData_GetTable(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
    ) -> *const ImU32;
}
unsafe extern "C" {
    pub fn ImPlotColormapData_GetTableSize(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlotColormapData_GetTableColor(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
        idx: ::std::os::raw::c_int,
    ) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlotColormapData_LerpTable(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
        t: f32,
    ) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlotPointError_ImPlotPointError(
        x: f64,
        y: f64,
        neg: f64,
        pos: f64,
    ) -> *mut ImPlotPointError;
}
unsafe extern "C" {
    pub fn ImPlotPointError_destroy(self_: *mut ImPlotPointError);
}
unsafe extern "C" {
    pub fn ImPlotAnnotation_ImPlotAnnotation() -> *mut ImPlotAnnotation;
}
unsafe extern "C" {
    pub fn ImPlotAnnotation_destroy(self_: *mut ImPlotAnnotation);
}
unsafe extern "C" {
    pub fn ImPlotAnnotationCollection_ImPlotAnnotationCollection() -> *mut ImPlotAnnotationCollection;
}
unsafe extern "C" {
    pub fn ImPlotAnnotationCollection_destroy(self_: *mut ImPlotAnnotationCollection);
}
unsafe extern "C" {
    pub fn ImPlotAnnotationCollection_AppendV(
        self_: *mut ImPlotAnnotationCollection,
        pos: ImVec2,
        off: ImVec2,
        bg: ImU32,
        fg: ImU32,
        clamp: bool,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    pub fn ImPlotAnnotationCollection_Append(
        self_: *mut ImPlotAnnotationCollection,
        pos: ImVec2,
        off: ImVec2,
        bg: ImU32,
        fg: ImU32,
        clamp: bool,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn ImPlotAnnotationCollection_GetText(
        self_: *mut ImPlotAnnotationCollection,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlotAnnotationCollection_Reset(self_: *mut ImPlotAnnotationCollection);
}
unsafe extern "C" {
    pub fn ImPlotTagCollection_ImPlotTagCollection() -> *mut ImPlotTagCollection;
}
unsafe extern "C" {
    pub fn ImPlotTagCollection_destroy(self_: *mut ImPlotTagCollection);
}
unsafe extern "C" {
    pub fn ImPlotTagCollection_AppendV(
        self_: *mut ImPlotTagCollection,
        axis: ImAxis,
        value: f64,
        bg: ImU32,
        fg: ImU32,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    pub fn ImPlotTagCollection_Append(
        self_: *mut ImPlotTagCollection,
        axis: ImAxis,
        value: f64,
        bg: ImU32,
        fg: ImU32,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn ImPlotTagCollection_GetText(
        self_: *mut ImPlotTagCollection,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlotTagCollection_Reset(self_: *mut ImPlotTagCollection);
}
unsafe extern "C" {
    pub fn ImPlotTick_ImPlotTick(
        value: f64,
        major: bool,
        level: ::std::os::raw::c_int,
        show_label: bool,
    ) -> *mut ImPlotTick;
}
unsafe extern "C" {
    pub fn ImPlotTick_destroy(self_: *mut ImPlotTick);
}
unsafe extern "C" {
    pub fn ImPlotTicker_ImPlotTicker() -> *mut ImPlotTicker;
}
unsafe extern "C" {
    pub fn ImPlotTicker_destroy(self_: *mut ImPlotTicker);
}
unsafe extern "C" {
    pub fn ImPlotTicker_AddTick_doubleStr(
        self_: *mut ImPlotTicker,
        value: f64,
        major: bool,
        level: ::std::os::raw::c_int,
        show_label: bool,
        label: *const ::std::os::raw::c_char,
    ) -> *mut ImPlotTick;
}
unsafe extern "C" {
    pub fn ImPlotTicker_AddTick_doublePlotFormatter(
        self_: *mut ImPlotTicker,
        value: f64,
        major: bool,
        level: ::std::os::raw::c_int,
        show_label: bool,
        formatter: ImPlotFormatter,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ImPlotTick;
}
unsafe extern "C" {
    pub fn ImPlotTicker_AddTick_PlotTick(
        self_: *mut ImPlotTicker,
        tick: ImPlotTick,
    ) -> *mut ImPlotTick;
}
unsafe extern "C" {
    pub fn ImPlotTicker_GetText_Int(
        self_: *mut ImPlotTicker,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlotTicker_GetText_PlotTick(
        self_: *mut ImPlotTicker,
        tick: ImPlotTick,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlotTicker_OverrideSizeLate(self_: *mut ImPlotTicker, size: ImVec2);
}
unsafe extern "C" {
    pub fn ImPlotTicker_Reset(self_: *mut ImPlotTicker);
}
unsafe extern "C" {
    pub fn ImPlotTicker_TickCount(self_: *mut ImPlotTicker) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlotAxis_ImPlotAxis() -> *mut ImPlotAxis;
}
unsafe extern "C" {
    pub fn ImPlotAxis_destroy(self_: *mut ImPlotAxis);
}
unsafe extern "C" {
    pub fn ImPlotAxis_Reset(self_: *mut ImPlotAxis);
}
unsafe extern "C" {
    pub fn ImPlotAxis_SetMin(self_: *mut ImPlotAxis, _min: f64, force: bool) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_SetMax(self_: *mut ImPlotAxis, _max: f64, force: bool) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_SetRange_double(self_: *mut ImPlotAxis, v1: f64, v2: f64);
}
unsafe extern "C" {
    pub fn ImPlotAxis_SetRange_PlotRange(self_: *mut ImPlotAxis, range: ImPlotRange);
}
unsafe extern "C" {
    pub fn ImPlotAxis_SetAspect(self_: *mut ImPlotAxis, unit_per_pix: f64);
}
unsafe extern "C" {
    pub fn ImPlotAxis_PixelSize(self_: *mut ImPlotAxis) -> f32;
}
unsafe extern "C" {
    pub fn ImPlotAxis_GetAspect(self_: *mut ImPlotAxis) -> f64;
}
unsafe extern "C" {
    pub fn ImPlotAxis_Constrain(self_: *mut ImPlotAxis);
}
unsafe extern "C" {
    pub fn ImPlotAxis_UpdateTransformCache(self_: *mut ImPlotAxis);
}
unsafe extern "C" {
    pub fn ImPlotAxis_PlotToPixels(self_: *mut ImPlotAxis, plt: f64) -> f32;
}
unsafe extern "C" {
    pub fn ImPlotAxis_PixelsToPlot(self_: *mut ImPlotAxis, pix: f32) -> f64;
}
unsafe extern "C" {
    pub fn ImPlotAxis_ExtendFit(self_: *mut ImPlotAxis, v: f64);
}
unsafe extern "C" {
    pub fn ImPlotAxis_ExtendFitWith(
        self_: *mut ImPlotAxis,
        alt: *mut ImPlotAxis,
        v: f64,
        v_alt: f64,
    );
}
unsafe extern "C" {
    pub fn ImPlotAxis_ApplyFit(self_: *mut ImPlotAxis, padding: f32);
}
unsafe extern "C" {
    pub fn ImPlotAxis_HasLabel(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_HasGridLines(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_HasTickLabels(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_HasTickMarks(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_WillRender(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsOpposite(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsInverted(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsForeground(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsAutoFitting(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_CanInitFit(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsRangeLocked(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsLockedMin(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsLockedMax(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsLocked(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsInputLockedMin(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsInputLockedMax(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsInputLocked(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_HasMenus(self_: *mut ImPlotAxis) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_IsPanLocked(self_: *mut ImPlotAxis, increasing: bool) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotAxis_PushLinks(self_: *mut ImPlotAxis);
}
unsafe extern "C" {
    pub fn ImPlotAxis_PullLinks(self_: *mut ImPlotAxis);
}
unsafe extern "C" {
    pub fn ImPlotAlignmentData_ImPlotAlignmentData() -> *mut ImPlotAlignmentData;
}
unsafe extern "C" {
    pub fn ImPlotAlignmentData_destroy(self_: *mut ImPlotAlignmentData);
}
unsafe extern "C" {
    pub fn ImPlotAlignmentData_Begin(self_: *mut ImPlotAlignmentData);
}
unsafe extern "C" {
    pub fn ImPlotAlignmentData_Update(
        self_: *mut ImPlotAlignmentData,
        pad_a: *mut f32,
        pad_b: *mut f32,
        delta_a: *mut f32,
        delta_b: *mut f32,
    );
}
unsafe extern "C" {
    pub fn ImPlotAlignmentData_End(self_: *mut ImPlotAlignmentData);
}
unsafe extern "C" {
    pub fn ImPlotAlignmentData_Reset(self_: *mut ImPlotAlignmentData);
}
unsafe extern "C" {
    pub fn ImPlotItem_ImPlotItem() -> *mut ImPlotItem;
}
unsafe extern "C" {
    pub fn ImPlotItem_destroy(self_: *mut ImPlotItem);
}
unsafe extern "C" {
    pub fn ImPlotLegend_ImPlotLegend() -> *mut ImPlotLegend;
}
unsafe extern "C" {
    pub fn ImPlotLegend_destroy(self_: *mut ImPlotLegend);
}
unsafe extern "C" {
    pub fn ImPlotLegend_Reset(self_: *mut ImPlotLegend);
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_ImPlotItemGroup() -> *mut ImPlotItemGroup;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_destroy(self_: *mut ImPlotItemGroup);
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_GetItemCount(self_: *mut ImPlotItemGroup) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_GetItemID(
        self_: *mut ImPlotItemGroup,
        label_id: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_GetItem_ID(self_: *mut ImPlotItemGroup, id: ImGuiID) -> *mut ImPlotItem;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_GetItem_Str(
        self_: *mut ImPlotItemGroup,
        label_id: *const ::std::os::raw::c_char,
    ) -> *mut ImPlotItem;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_GetOrAddItem(
        self_: *mut ImPlotItemGroup,
        id: ImGuiID,
    ) -> *mut ImPlotItem;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_GetItemByIndex(
        self_: *mut ImPlotItemGroup,
        i: ::std::os::raw::c_int,
    ) -> *mut ImPlotItem;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_GetItemIndex(
        self_: *mut ImPlotItemGroup,
        item: *mut ImPlotItem,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_GetLegendCount(self_: *mut ImPlotItemGroup) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_GetLegendItem(
        self_: *mut ImPlotItemGroup,
        i: ::std::os::raw::c_int,
    ) -> *mut ImPlotItem;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_GetLegendLabel(
        self_: *mut ImPlotItemGroup,
        i: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlotItemGroup_Reset(self_: *mut ImPlotItemGroup);
}
unsafe extern "C" {
    pub fn ImPlotPlot_ImPlotPlot() -> *mut ImPlotPlot;
}
unsafe extern "C" {
    pub fn ImPlotPlot_destroy(self_: *mut ImPlotPlot);
}
unsafe extern "C" {
    pub fn ImPlotPlot_IsInputLocked(self_: *mut ImPlotPlot) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotPlot_ClearTextBuffer(self_: *mut ImPlotPlot);
}
unsafe extern "C" {
    pub fn ImPlotPlot_SetTitle(self_: *mut ImPlotPlot, title: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ImPlotPlot_HasTitle(self_: *mut ImPlotPlot) -> bool;
}
unsafe extern "C" {
    pub fn ImPlotPlot_GetTitle(self_: *mut ImPlotPlot) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlotPlot_XAxis_Nil(
        self_: *mut ImPlotPlot,
        i: ::std::os::raw::c_int,
    ) -> *mut ImPlotAxis;
}
unsafe extern "C" {
    pub fn ImPlotPlot_XAxis__const(
        self_: *mut ImPlotPlot,
        i: ::std::os::raw::c_int,
    ) -> *const ImPlotAxis;
}
unsafe extern "C" {
    pub fn ImPlotPlot_YAxis_Nil(
        self_: *mut ImPlotPlot,
        i: ::std::os::raw::c_int,
    ) -> *mut ImPlotAxis;
}
unsafe extern "C" {
    pub fn ImPlotPlot_YAxis__const(
        self_: *mut ImPlotPlot,
        i: ::std::os::raw::c_int,
    ) -> *const ImPlotAxis;
}
unsafe extern "C" {
    pub fn ImPlotPlot_EnabledAxesX(self_: *mut ImPlotPlot) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlotPlot_EnabledAxesY(self_: *mut ImPlotPlot) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlotPlot_SetAxisLabel(
        self_: *mut ImPlotPlot,
        axis: *mut ImPlotAxis,
        label: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn ImPlotPlot_GetAxisLabel(
        self_: *mut ImPlotPlot,
        axis: ImPlotAxis,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ImPlotSubplot_ImPlotSubplot() -> *mut ImPlotSubplot;
}
unsafe extern "C" {
    pub fn ImPlotSubplot_destroy(self_: *mut ImPlotSubplot);
}
unsafe extern "C" {
    pub fn ImPlotNextPlotData_ImPlotNextPlotData() -> *mut ImPlotNextPlotData;
}
unsafe extern "C" {
    pub fn ImPlotNextPlotData_destroy(self_: *mut ImPlotNextPlotData);
}
unsafe extern "C" {
    pub fn ImPlotNextPlotData_Reset(self_: *mut ImPlotNextPlotData);
}
unsafe extern "C" {
    pub fn ImPlotNextItemData_ImPlotNextItemData() -> *mut ImPlotNextItemData;
}
unsafe extern "C" {
    pub fn ImPlotNextItemData_destroy(self_: *mut ImPlotNextItemData);
}
unsafe extern "C" {
    pub fn ImPlotNextItemData_Reset(self_: *mut ImPlotNextItemData);
}
unsafe extern "C" {
    pub fn ImPlot_Initialize(ctx: *mut ImPlotContext);
}
unsafe extern "C" {
    pub fn ImPlot_ResetCtxForNextPlot(ctx: *mut ImPlotContext);
}
unsafe extern "C" {
    pub fn ImPlot_ResetCtxForNextAlignedPlots(ctx: *mut ImPlotContext);
}
unsafe extern "C" {
    pub fn ImPlot_ResetCtxForNextSubplot(ctx: *mut ImPlotContext);
}
unsafe extern "C" {
    pub fn ImPlot_GetPlot(title: *const ::std::os::raw::c_char) -> *mut ImPlotPlot;
}
unsafe extern "C" {
    pub fn ImPlot_GetCurrentPlot() -> *mut ImPlotPlot;
}
unsafe extern "C" {
    pub fn ImPlot_BustPlotCache();
}
unsafe extern "C" {
    pub fn ImPlot_ShowPlotContextMenu(plot: *mut ImPlotPlot);
}
unsafe extern "C" {
    pub fn ImPlot_SetupLock();
}
unsafe extern "C" {
    pub fn ImPlot_SubplotNextCell();
}
unsafe extern "C" {
    pub fn ImPlot_ShowSubplotsContextMenu(subplot: *mut ImPlotSubplot);
}
unsafe extern "C" {
    pub fn ImPlot_BeginItem(
        label_id: *const ::std::os::raw::c_char,
        flags: ImPlotItemFlags,
        recolor_from: ImPlotCol,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_EndItem();
}
unsafe extern "C" {
    pub fn ImPlot_RegisterOrGetItem(
        label_id: *const ::std::os::raw::c_char,
        flags: ImPlotItemFlags,
        just_created: *mut bool,
    ) -> *mut ImPlotItem;
}
unsafe extern "C" {
    pub fn ImPlot_GetItem(label_id: *const ::std::os::raw::c_char) -> *mut ImPlotItem;
}
unsafe extern "C" {
    pub fn ImPlot_GetCurrentItem() -> *mut ImPlotItem;
}
unsafe extern "C" {
    pub fn ImPlot_BustItemCache();
}
unsafe extern "C" {
    pub fn ImPlot_AnyAxesInputLocked(axes: *mut ImPlotAxis, count: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_AllAxesInputLocked(axes: *mut ImPlotAxis, count: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_AnyAxesHeld(axes: *mut ImPlotAxis, count: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_AnyAxesHovered(axes: *mut ImPlotAxis, count: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_FitThisFrame() -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_FitPointX(x: f64);
}
unsafe extern "C" {
    pub fn ImPlot_FitPointY(y: f64);
}
unsafe extern "C" {
    pub fn ImPlot_FitPoint(p: ImPlotPoint);
}
unsafe extern "C" {
    pub fn ImPlot_RangesOverlap(r1: ImPlotRange, r2: ImPlotRange) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ShowAxisContextMenu(
        axis: *mut ImPlotAxis,
        equal_axis: *mut ImPlotAxis,
        time_allowed: bool,
    );
}
unsafe extern "C" {
    pub fn ImPlot_GetLocationPos(
        pOut: *mut ImVec2,
        outer_rect: ImRect,
        inner_size: ImVec2,
        location: ImPlotLocation,
        pad: ImVec2,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalcLegendSize(
        pOut: *mut ImVec2,
        items: *mut ImPlotItemGroup,
        pad: ImVec2,
        spacing: ImVec2,
        vertical: bool,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ClampLegendRect(
        legend_rect: *mut ImRect,
        outer_rect: ImRect,
        pad: ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ShowLegendEntries(
        items: *mut ImPlotItemGroup,
        legend_bb: ImRect,
        interactable: bool,
        pad: ImVec2,
        spacing: ImVec2,
        vertical: bool,
        DrawList: *mut ImDrawList,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ShowAltLegend(
        title_id: *const ::std::os::raw::c_char,
        vertical: bool,
        size: ImVec2,
        interactable: bool,
    );
}
unsafe extern "C" {
    pub fn ImPlot_ShowLegendContextMenu(legend: *mut ImPlotLegend, visible: bool) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_LabelAxisValue(
        axis: ImPlotAxis,
        value: f64,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        round: bool,
    );
}
unsafe extern "C" {
    pub fn ImPlot_GetItemData() -> *const ImPlotNextItemData;
}
unsafe extern "C" {
    pub fn ImPlot_IsColorAuto_Vec4(col: ImVec4) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_IsColorAuto_PlotCol(idx: ImPlotCol) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_GetAutoColor(pOut: *mut ImVec4, idx: ImPlotCol);
}
unsafe extern "C" {
    pub fn ImPlot_GetStyleColorVec4(pOut: *mut ImVec4, idx: ImPlotCol);
}
unsafe extern "C" {
    pub fn ImPlot_GetStyleColorU32(idx: ImPlotCol) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_AddTextVertical(
        DrawList: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn ImPlot_AddTextCentered(
        DrawList: *mut ImDrawList,
        top_center: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalcTextSizeVertical(pOut: *mut ImVec2, text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ImPlot_CalcTextColor_Vec4(bg: ImVec4) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_CalcTextColor_U32(bg: ImU32) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_CalcHoverColor(col: ImU32) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_ClampLabelPos(
        pOut: *mut ImVec2,
        pos: ImVec2,
        size: ImVec2,
        Min: ImVec2,
        Max: ImVec2,
    );
}
unsafe extern "C" {
    pub fn ImPlot_GetColormapColorU32(idx: ::std::os::raw::c_int, cmap: ImPlotColormap) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_NextColormapColorU32() -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_SampleColormapU32(t: f32, cmap: ImPlotColormap) -> ImU32;
}
unsafe extern "C" {
    pub fn ImPlot_RenderColorBar(
        colors: *const ImU32,
        size: ::std::os::raw::c_int,
        DrawList: *mut ImDrawList,
        bounds: ImRect,
        vert: bool,
        reversed: bool,
        continuous: bool,
    );
}
unsafe extern "C" {
    pub fn ImPlot_NiceNum(x: f64, round: bool) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_OrderOfMagnitude(val: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_OrderToPrecision(order: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_Precision(val: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_RoundTo(val: f64, prec: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_Intersection(pOut: *mut ImVec2, a1: ImVec2, a2: ImVec2, b1: ImVec2, b2: ImVec2);
}
unsafe extern "C" {
    pub fn ImPlot_FillRange_Vector_Float_Ptr(
        buffer: *mut ImVector_float,
        n: ::std::os::raw::c_int,
        vmin: f32,
        vmax: f32,
    );
}
unsafe extern "C" {
    pub fn ImPlot_FillRange_Vector_double_Ptr(
        buffer: *mut ImVector_double,
        n: ::std::os::raw::c_int,
        vmin: f64,
        vmax: f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_FillRange_Vector_S8_Ptr(
        buffer: *mut ImVector_ImS8,
        n: ::std::os::raw::c_int,
        vmin: ImS8,
        vmax: ImS8,
    );
}
unsafe extern "C" {
    pub fn ImPlot_FillRange_Vector_U8_Ptr(
        buffer: *mut ImVector_ImU8,
        n: ::std::os::raw::c_int,
        vmin: ImU8,
        vmax: ImU8,
    );
}
unsafe extern "C" {
    pub fn ImPlot_FillRange_Vector_S16_Ptr(
        buffer: *mut ImVector_ImS16,
        n: ::std::os::raw::c_int,
        vmin: ImS16,
        vmax: ImS16,
    );
}
unsafe extern "C" {
    pub fn ImPlot_FillRange_Vector_U16_Ptr(
        buffer: *mut ImVector_ImU16,
        n: ::std::os::raw::c_int,
        vmin: ImU16,
        vmax: ImU16,
    );
}
unsafe extern "C" {
    pub fn ImPlot_FillRange_Vector_S32_Ptr(
        buffer: *mut ImVector_ImS32,
        n: ::std::os::raw::c_int,
        vmin: ImS32,
        vmax: ImS32,
    );
}
unsafe extern "C" {
    pub fn ImPlot_FillRange_Vector_U32_Ptr(
        buffer: *mut ImVector_ImU32,
        n: ::std::os::raw::c_int,
        vmin: ImU32,
        vmax: ImU32,
    );
}
unsafe extern "C" {
    pub fn ImPlot_FillRange_Vector_S64_Ptr(
        buffer: *mut ImVector_ImS64,
        n: ::std::os::raw::c_int,
        vmin: ImS64,
        vmax: ImS64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_FillRange_Vector_U64_Ptr(
        buffer: *mut ImVector_ImU64,
        n: ::std::os::raw::c_int,
        vmin: ImU64,
        vmax: ImU64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalculateBins_FloatPtr(
        values: *const f32,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalculateBins_doublePtr(
        values: *const f64,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalculateBins_S8Ptr(
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalculateBins_U8Ptr(
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalculateBins_S16Ptr(
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalculateBins_U16Ptr(
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalculateBins_S32Ptr(
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalculateBins_U32Ptr(
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalculateBins_S64Ptr(
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_CalculateBins_U64Ptr(
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
unsafe extern "C" {
    pub fn ImPlot_IsLeapYear(year: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_GetDaysInMonth(
        year: ::std::os::raw::c_int,
        month: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_MkGmtTime(pOut: *mut ImPlotTime, ptm: *mut tm);
}
unsafe extern "C" {
    pub fn ImPlot_GetGmtTime(t: ImPlotTime, ptm: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn ImPlot_MkLocTime(pOut: *mut ImPlotTime, ptm: *mut tm);
}
unsafe extern "C" {
    pub fn ImPlot_GetLocTime(t: ImPlotTime, ptm: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn ImPlot_MkTime(pOut: *mut ImPlotTime, ptm: *mut tm);
}
unsafe extern "C" {
    pub fn ImPlot_GetTime(t: ImPlotTime, ptm: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn ImPlot_MakeTime(
        pOut: *mut ImPlotTime,
        year: ::std::os::raw::c_int,
        month: ::std::os::raw::c_int,
        day: ::std::os::raw::c_int,
        hour: ::std::os::raw::c_int,
        min: ::std::os::raw::c_int,
        sec: ::std::os::raw::c_int,
        us: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_GetYear(t: ImPlotTime) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_GetMonth(t: ImPlotTime) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_AddTime(
        pOut: *mut ImPlotTime,
        t: ImPlotTime,
        unit: ImPlotTimeUnit,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ImPlot_FloorTime(pOut: *mut ImPlotTime, t: ImPlotTime, unit: ImPlotTimeUnit);
}
unsafe extern "C" {
    pub fn ImPlot_CeilTime(pOut: *mut ImPlotTime, t: ImPlotTime, unit: ImPlotTimeUnit);
}
unsafe extern "C" {
    pub fn ImPlot_RoundTime(pOut: *mut ImPlotTime, t: ImPlotTime, unit: ImPlotTimeUnit);
}
unsafe extern "C" {
    pub fn ImPlot_CombineDateTime(
        pOut: *mut ImPlotTime,
        date_part: ImPlotTime,
        time_part: ImPlotTime,
    );
}
unsafe extern "C" {
    pub fn ImPlot_Now(pOut: *mut ImPlotTime);
}
unsafe extern "C" {
    pub fn ImPlot_Today(pOut: *mut ImPlotTime);
}
unsafe extern "C" {
    pub fn ImPlot_FormatTime(
        t: ImPlotTime,
        buffer: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        fmt: ImPlotTimeFmt,
        use_24_hr_clk: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_FormatDate(
        t: ImPlotTime,
        buffer: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        fmt: ImPlotDateFmt,
        use_iso_8601: bool,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_FormatDateTime(
        t: ImPlotTime,
        buffer: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        fmt: ImPlotDateTimeSpec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_ShowDatePicker(
        id: *const ::std::os::raw::c_char,
        level: *mut ::std::os::raw::c_int,
        t: *mut ImPlotTime,
        t1: *const ImPlotTime,
        t2: *const ImPlotTime,
    ) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_ShowTimePicker(id: *const ::std::os::raw::c_char, t: *mut ImPlotTime) -> bool;
}
unsafe extern "C" {
    pub fn ImPlot_TransformForward_Log10(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_TransformInverse_Log10(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_TransformForward_SymLog(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_TransformInverse_SymLog(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_TransformForward_Logit(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_TransformInverse_Logit(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
unsafe extern "C" {
    pub fn ImPlot_Formatter_Default(
        value: f64,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_Formatter_Logit(
        value: f64,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        noname1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_Formatter_Time(
        noname1: f64,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ImPlot_Locator_Default(
        ticker: *mut ImPlotTicker,
        range: ImPlotRange,
        pixels: f32,
        vertical: bool,
        formatter: ImPlotFormatter,
        formatter_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn ImPlot_Locator_Time(
        ticker: *mut ImPlotTicker,
        range: ImPlotRange,
        pixels: f32,
        vertical: bool,
        formatter: ImPlotFormatter,
        formatter_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn ImPlot_Locator_Log10(
        ticker: *mut ImPlotTicker,
        range: ImPlotRange,
        pixels: f32,
        vertical: bool,
        formatter: ImPlotFormatter,
        formatter_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn ImPlot_Locator_SymLog(
        ticker: *mut ImPlotTicker,
        range: ImPlotRange,
        pixels: f32,
        vertical: bool,
        formatter: ImPlotFormatter,
        formatter_data: *mut ::std::os::raw::c_void,
    );
}

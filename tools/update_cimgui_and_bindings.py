#!/usr/bin/env python3
"""
Update cimgui submodule and refresh pregenerated bindings for dear-imgui-sys.

Usage examples:
  - Update to default branch `docking_inter` and regenerate bindings (Debug):
      python tools/update_cimgui_and_bindings.py

  - Specify branch / profile:
      python tools/update_cimgui_and_bindings.py --branch docking_inter --profile debug

  - Dry-run (only print commands):
      python tools/update_cimgui_and_bindings.py --dry-run

Requirements:
  - git, cargo in PATH
  - Python 3.7+
"""

import argparse
import os
import shutil
import subprocess
import sys
from pathlib import Path


def run(cmd, cwd=None, env=None, dry=False):
    print("$", " ".join(cmd))
    if dry:
        return 0
    try:
        subprocess.check_call(cmd, cwd=cwd, env=env)
        return 0
    except subprocess.CalledProcessError as e:
        print(f"Command failed (exit {e.returncode}): {' '.join(cmd)}", file=sys.stderr)
        return e.returncode


def find_bindings(target_dir: Path, profile: str) -> Path:
    build_dir = target_dir / profile / "build"
    if not build_dir.exists():
        return None
    for p in build_dir.glob("dear-imgui-sys-*/out/bindings.rs"):
        return p
    return None


def main() -> int:
    parser = argparse.ArgumentParser(description="Update cimgui submodule and pregenerated bindings")
    parser.add_argument("--submodule-path", default="dear-imgui-sys/third-party/cimgui", help="Path to cimgui submodule (relative to repo root)")
    parser.add_argument("--branch", default="docking_inter", help="Branch to checkout in cimgui submodule")
    parser.add_argument("--remote", default="origin", help="Remote name for cimgui submodule")
    parser.add_argument("--crate", default="dear-imgui-sys", help="Crate name to build for generating bindings")
    parser.add_argument("--profile", default="debug", choices=["debug", "release"], help="Cargo profile to generate bindings")
    parser.add_argument("--dry-run", action="store_true", help="Print commands without executing")
    args = parser.parse_args()

    repo_root = Path(__file__).resolve().parents[1]
    sub_path = (repo_root / args.submodule_path).resolve()
    if not sub_path.exists():
        print(f"Submodule path not found: {sub_path}", file=sys.stderr)
        return 2

    # 1) Update submodule
    print(f"Updating cimgui submodule at: {sub_path}")
    rc = run(["git", "-C", str(sub_path), "fetch", args.remote, "--tags"], dry=args.dry_run)
    if rc != 0:
        return rc
    rc = run(["git", "-C", str(sub_path), "checkout", args.branch], dry=args.dry_run)
    if rc != 0:
        return rc
    rc = run(["git", "-C", str(sub_path), "pull", args.remote, args.branch], dry=args.dry_run)
    if rc != 0:
        return rc
    # If cimgui had nested submodules (usually not needed), update them safely
    run(["git", "-C", str(sub_path), "submodule", "update", "--init", "--recursive"], dry=args.dry_run)

    # 2) Build sys crate to generate bindings (skip native C/C++ for speed)
    env = os.environ.copy()
    env["IMGUI_SYS_SKIP_CC"] = "1"
    profile_flag = []
    if args.profile == "release":
        profile_flag = ["--release"]
    print("Generating bindings via cargo build (IMGUI_SYS_SKIP_CC=1)...")
    rc = run(["cargo", "build", "-p", args.crate, *profile_flag], cwd=str(repo_root), env=env, dry=args.dry_run)
    if rc != 0:
        return rc

    # 3) Locate generated bindings.rs
    target_dir = Path(env.get("CARGO_TARGET_DIR", repo_root / "target"))
    bindings = find_bindings(Path(target_dir), args.profile)
    if bindings is None or not bindings.exists():
        print(f"Generated bindings.rs not found under {target_dir / args.profile / 'build'}", file=sys.stderr)
        return 3
    print(f"Found generated bindings: {bindings}")

    # 4) Copy into pregenerated file with header
    dest = repo_root / args.crate / "src" / "bindings_pregenerated.rs"
    header = (
        "// AUTOGENERATED: pregenerated bindings for docs.rs/offline builds\n"
        "#![allow(non_upper_case_globals, non_camel_case_types, non_snake_case)]\n\n"
    )
    if not args.dry_run:
        content = bindings.read_text(encoding="utf-8", errors="ignore")
        dest.write_text(header + content, encoding="utf-8")
    print(f"Updated pregenerated bindings: {dest}")

    print("Done.")
    return 0


if __name__ == "__main__":
    sys.exit(main())


/* automatically generated by rust-bindgen 0.72.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
pub const ImFontAtlasRectId_Invalid: i32 = -1;
pub const ImGuiKey_LegacyNativeKey_BEGIN: u32 = 0;
pub const ImGuiKey_LegacyNativeKey_END: u32 = 512;
pub const ImFontAtlasRectId_IndexMask_: u32 = 524287;
pub const ImFontAtlasRectId_GenerationMask_: u32 = 1072693248;
pub const ImFontAtlasRectId_GenerationShift_: u32 = 20;
pub type va_list = *mut ::std::os::raw::c_char;
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImU64 = ::std::os::raw::c_ulonglong;
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiCond = ::std::os::raw::c_int;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImGuiMouseButton = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImGuiTableBgTarget = ::std::os::raw::c_int;
pub type ImDrawFlags = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiButtonFlags = ::std::os::raw::c_int;
pub type ImGuiChildFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiComboFlags = ::std::os::raw::c_int;
pub type ImGuiDockNodeFlags = ::std::os::raw::c_int;
pub type ImGuiDragDropFlags = ::std::os::raw::c_int;
pub type ImGuiFocusedFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiItemFlags = ::std::os::raw::c_int;
pub type ImGuiKeyChord = ::std::os::raw::c_int;
pub type ImGuiListClipperFlags = ::std::os::raw::c_int;
pub type ImGuiPopupFlags = ::std::os::raw::c_int;
pub type ImGuiMultiSelectFlags = ::std::os::raw::c_int;
pub type ImGuiSelectableFlags = ::std::os::raw::c_int;
pub type ImGuiSliderFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTableFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnFlags = ::std::os::raw::c_int;
pub type ImGuiTableRowFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiViewportFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImWchar32 = ::std::os::raw::c_uint;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar = ImWchar32;
pub type ImGuiSelectionUserData = ImS64;
pub type ImGuiInputTextCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::std::os::raw::c_int,
>;
pub type ImGuiSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImGuiMemAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(
        sz: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ImGuiMemFreeFunc = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
pub type ImTextureID = ImU64;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImTextureRef {
    pub _TexData: *mut ImTextureData,
    pub _TexID: ImTextureID,
}
impl Default for ImTextureRef {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}?CreateContext@ImGui@@YAPEAUImGuiContext@@PEAUImFontAtlas@@@Z"]
    pub fn ImGui_CreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DestroyContext@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_DestroyContext(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetCurrentContext@ImGui@@YAPEAUImGuiContext@@XZ"]
    pub fn ImGui_GetCurrentContext() -> *mut ImGuiContext;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetCurrentContext@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_SetCurrentContext(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetIO@ImGui@@YAAEAUImGuiIO@@XZ"]
    pub fn ImGui_GetIO() -> *mut ImGuiIO;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetPlatformIO@ImGui@@YAAEAUImGuiPlatformIO@@XZ"]
    pub fn ImGui_GetPlatformIO() -> *mut ImGuiPlatformIO;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ"]
    pub fn ImGui_GetStyle() -> *mut ImGuiStyle;
}
unsafe extern "C" {
    #[link_name = "\u{1}?NewFrame@ImGui@@YAXXZ"]
    pub fn ImGui_NewFrame();
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndFrame@ImGui@@YAXXZ"]
    pub fn ImGui_EndFrame();
}
unsafe extern "C" {
    #[link_name = "\u{1}?Render@ImGui@@YAXXZ"]
    pub fn ImGui_Render();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetDrawData@ImGui@@YAPEAUImDrawData@@XZ"]
    pub fn ImGui_GetDrawData() -> *mut ImDrawData;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShowDemoWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowDemoWindow(p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShowMetricsWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowMetricsWindow(p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShowDebugLogWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowDebugLogWindow(p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShowIDStackToolWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowIDStackToolWindow(p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShowAboutWindow@ImGui@@YAXPEA_N@Z"]
    pub fn ImGui_ShowAboutWindow(p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShowStyleEditor@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_ShowStyleEditor(ref_: *mut ImGuiStyle);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShowStyleSelector@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_ShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShowFontSelector@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_ShowFontSelector(label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShowUserGuide@ImGui@@YAXXZ"]
    pub fn ImGui_ShowUserGuide();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetVersion@ImGui@@YAPEBDXZ"]
    pub fn ImGui_GetVersion() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_StyleColorsDark(dst: *mut ImGuiStyle);
}
unsafe extern "C" {
    #[link_name = "\u{1}?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_StyleColorsLight(dst: *mut ImGuiStyle);
}
unsafe extern "C" {
    #[link_name = "\u{1}?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z"]
    pub fn ImGui_StyleColorsClassic(dst: *mut ImGuiStyle);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Begin@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_Begin(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?End@ImGui@@YAXXZ"]
    pub fn ImGui_End();
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginChild@ImGui@@YA_NPEBDAEBUImVec2@@HH@Z"]
    pub fn ImGui_BeginChild(
        str_id: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginChild@ImGui@@YA_NIAEBUImVec2@@HH@Z"]
    pub fn ImGui_BeginChild1(
        id: ImGuiID,
        size: *const ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndChild@ImGui@@YAXXZ"]
    pub fn ImGui_EndChild();
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsWindowAppearing@ImGui@@YA_NXZ"]
    pub fn ImGui_IsWindowAppearing() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsWindowCollapsed@ImGui@@YA_NXZ"]
    pub fn ImGui_IsWindowCollapsed() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsWindowFocused@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsWindowHovered@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowDrawList@ImGui@@YAPEAUImDrawList@@XZ"]
    pub fn ImGui_GetWindowDrawList() -> *mut ImDrawList;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowDpiScale@ImGui@@YAMXZ"]
    pub fn ImGui_GetWindowDpiScale() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowWidth@ImGui@@YAMXZ"]
    pub fn ImGui_GetWindowWidth() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowHeight@ImGui@@YAMXZ"]
    pub fn ImGui_GetWindowHeight() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowViewport@ImGui@@YAPEAUImGuiViewport@@XZ"]
    pub fn ImGui_GetWindowViewport() -> *mut ImGuiViewport;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z"]
    pub fn ImGui_SetNextWindowPos(pos: *const ImVec2, cond: ImGuiCond, pivot: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z"]
    pub fn ImGui_SetNextWindowSize(size: *const ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_SetNextWindowSizeConstraints(
        size_min: *const ImVec2,
        size_max: *const ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetNextWindowContentSize(size: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowCollapsed@ImGui@@YAX_NH@Z"]
    pub fn ImGui_SetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowFocus@ImGui@@YAXXZ"]
    pub fn ImGui_SetNextWindowFocus();
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowScroll@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetNextWindowScroll(scroll: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowBgAlpha@ImGui@@YAXM@Z"]
    pub fn ImGui_SetNextWindowBgAlpha(alpha: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowViewport@ImGui@@YAXI@Z"]
    pub fn ImGui_SetNextWindowViewport(viewport_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowPos@ImGui@@YAXAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowPos(pos: *const ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowSize@ImGui@@YAXAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowSize(size: *const ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowCollapsed@ImGui@@YAX_NH@Z"]
    pub fn ImGui_SetWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowFocus@ImGui@@YAXXZ"]
    pub fn ImGui_SetWindowFocus();
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowPos@ImGui@@YAXPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowPos1(
        name: *const ::std::os::raw::c_char,
        pos: *const ImVec2,
        cond: ImGuiCond,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowSize@ImGui@@YAXPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowSize1(
        name: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        cond: ImGuiCond,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowCollapsed@ImGui@@YAXPEBD_NH@Z"]
    pub fn ImGui_SetWindowCollapsed1(
        name: *const ::std::os::raw::c_char,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowFocus@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SetWindowFocus1(name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetScrollX@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollX() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetScrollY@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollY() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetScrollX@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollX(scroll_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetScrollY@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollY(scroll_y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetScrollMaxX@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollMaxX() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetScrollMaxY@ImGui@@YAMXZ"]
    pub fn ImGui_GetScrollMaxY() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetScrollHereX@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollHereX(center_x_ratio: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetScrollHereY@ImGui@@YAXM@Z"]
    pub fn ImGui_SetScrollHereY(center_y_ratio: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetScrollFromPosX@ImGui@@YAXMM@Z"]
    pub fn ImGui_SetScrollFromPosX(local_x: f32, center_x_ratio: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetScrollFromPosY@ImGui@@YAXMM@Z"]
    pub fn ImGui_SetScrollFromPosY(local_y: f32, center_y_ratio: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushFont@ImGui@@YAXPEAUImFont@@M@Z"]
    pub fn ImGui_PushFont(font: *mut ImFont, font_size_base_unscaled: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopFont@ImGui@@YAXXZ"]
    pub fn ImGui_PopFont();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetFont@ImGui@@YAPEAUImFont@@XZ"]
    pub fn ImGui_GetFont() -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetFontSize@ImGui@@YAMXZ"]
    pub fn ImGui_GetFontSize() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetFontBaked@ImGui@@YAPEAUImFontBaked@@XZ"]
    pub fn ImGui_GetFontBaked() -> *mut ImFontBaked;
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushStyleColor@ImGui@@YAXHI@Z"]
    pub fn ImGui_PushStyleColor(idx: ImGuiCol, col: ImU32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z"]
    pub fn ImGui_PushStyleColor1(idx: ImGuiCol, col: *const ImVec4);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopStyleColor@ImGui@@YAXH@Z"]
    pub fn ImGui_PopStyleColor(count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushStyleVar@ImGui@@YAXHM@Z"]
    pub fn ImGui_PushStyleVar(idx: ImGuiStyleVar, val: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z"]
    pub fn ImGui_PushStyleVar1(idx: ImGuiStyleVar, val: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushStyleVarX@ImGui@@YAXHM@Z"]
    pub fn ImGui_PushStyleVarX(idx: ImGuiStyleVar, val_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushStyleVarY@ImGui@@YAXHM@Z"]
    pub fn ImGui_PushStyleVarY(idx: ImGuiStyleVar, val_y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopStyleVar@ImGui@@YAXH@Z"]
    pub fn ImGui_PopStyleVar(count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushItemFlag@ImGui@@YAXH_N@Z"]
    pub fn ImGui_PushItemFlag(option: ImGuiItemFlags, enabled: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopItemFlag@ImGui@@YAXXZ"]
    pub fn ImGui_PopItemFlag();
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushItemWidth@ImGui@@YAXM@Z"]
    pub fn ImGui_PushItemWidth(item_width: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopItemWidth@ImGui@@YAXXZ"]
    pub fn ImGui_PopItemWidth();
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextItemWidth@ImGui@@YAXM@Z"]
    pub fn ImGui_SetNextItemWidth(item_width: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?CalcItemWidth@ImGui@@YAMXZ"]
    pub fn ImGui_CalcItemWidth() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushTextWrapPos@ImGui@@YAXM@Z"]
    pub fn ImGui_PushTextWrapPos(wrap_local_pos_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopTextWrapPos@ImGui@@YAXXZ"]
    pub fn ImGui_PopTextWrapPos();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetColorU32@ImGui@@YAIHM@Z"]
    pub fn ImGui_GetColorU32(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z"]
    pub fn ImGui_GetColorU321(col: *const ImVec4) -> ImU32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetColorU32@ImGui@@YAIIM@Z"]
    pub fn ImGui_GetColorU322(col: ImU32, alpha_mul: f32) -> ImU32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetStyleColorVec4@ImGui@@YAAEBUImVec4@@H@Z"]
    pub fn ImGui_GetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetCursorScreenPos(pos: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetCursorPosX@ImGui@@YAMXZ"]
    pub fn ImGui_GetCursorPosX() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetCursorPosY@ImGui@@YAMXZ"]
    pub fn ImGui_GetCursorPosY() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetCursorPos@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_SetCursorPos(local_pos: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetCursorPosX@ImGui@@YAXM@Z"]
    pub fn ImGui_SetCursorPosX(local_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetCursorPosY@ImGui@@YAXM@Z"]
    pub fn ImGui_SetCursorPosY(local_y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Separator@ImGui@@YAXXZ"]
    pub fn ImGui_Separator();
}
unsafe extern "C" {
    #[link_name = "\u{1}?SameLine@ImGui@@YAXMM@Z"]
    pub fn ImGui_SameLine(offset_from_start_x: f32, spacing: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?NewLine@ImGui@@YAXXZ"]
    pub fn ImGui_NewLine();
}
unsafe extern "C" {
    #[link_name = "\u{1}?Spacing@ImGui@@YAXXZ"]
    pub fn ImGui_Spacing();
}
unsafe extern "C" {
    #[link_name = "\u{1}?Dummy@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_Dummy(size: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Indent@ImGui@@YAXM@Z"]
    pub fn ImGui_Indent(indent_w: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Unindent@ImGui@@YAXM@Z"]
    pub fn ImGui_Unindent(indent_w: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginGroup@ImGui@@YAXXZ"]
    pub fn ImGui_BeginGroup();
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndGroup@ImGui@@YAXXZ"]
    pub fn ImGui_EndGroup();
}
unsafe extern "C" {
    #[link_name = "\u{1}?AlignTextToFramePadding@ImGui@@YAXXZ"]
    pub fn ImGui_AlignTextToFramePadding();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetTextLineHeight@ImGui@@YAMXZ"]
    pub fn ImGui_GetTextLineHeight() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetTextLineHeightWithSpacing@ImGui@@YAMXZ"]
    pub fn ImGui_GetTextLineHeightWithSpacing() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetFrameHeight@ImGui@@YAMXZ"]
    pub fn ImGui_GetFrameHeight() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetFrameHeightWithSpacing@ImGui@@YAMXZ"]
    pub fn ImGui_GetFrameHeightWithSpacing() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_PushID(str_id: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXPEBD0@Z"]
    pub fn ImGui_PushID1(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXPEBX@Z"]
    pub fn ImGui_PushID2(ptr_id: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushID@ImGui@@YAXH@Z"]
    pub fn ImGui_PushID3(int_id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopID@ImGui@@YAXXZ"]
    pub fn ImGui_PopID();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIPEBD@Z"]
    pub fn ImGui_GetID(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIPEBD0@Z"]
    pub fn ImGui_GetID1(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIPEBX@Z"]
    pub fn ImGui_GetID2(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetID@ImGui@@YAIH@Z"]
    pub fn ImGui_GetID3(int_id: ::std::os::raw::c_int) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextUnformatted@ImGui@@YAXPEBD0@Z"]
    pub fn ImGui_TextUnformatted(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?Text@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_Text(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_TextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ"]
    pub fn ImGui_TextColored(col: *const ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z"]
    pub fn ImGui_TextColoredV(
        col: *const ImVec4,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextDisabled@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_TextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextDisabledV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_TextDisabledV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextWrapped@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_TextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextWrappedV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_TextWrappedV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}?LabelText@ImGui@@YAXPEBD0ZZ"]
    pub fn ImGui_LabelText(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?LabelTextV@ImGui@@YAXPEBD0PEAD@Z"]
    pub fn ImGui_LabelTextV(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?BulletText@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_BulletText(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}?BulletTextV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_BulletTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SeparatorText@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SeparatorText(label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z"]
    pub fn ImGui_Button(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SmallButton@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_SmallButton(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_InvisibleButton(
        str_id: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ArrowButton@ImGui@@YA_NPEBDW4ImGuiDir@@@Z"]
    pub fn ImGui_ArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?Checkbox@ImGui@@YA_NPEBDPEA_N@Z"]
    pub fn ImGui_Checkbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z"]
    pub fn ImGui_CheckboxFlags(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
        flags_value: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z"]
    pub fn ImGui_CheckboxFlags1(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_uint,
        flags_value: ::std::os::raw::c_uint,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?RadioButton@ImGui@@YA_NPEBD_N@Z"]
    pub fn ImGui_RadioButton(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?RadioButton@ImGui@@YA_NPEBDPEAHH@Z"]
    pub fn ImGui_RadioButton1(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_button: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z"]
    pub fn ImGui_ProgressBar(
        fraction: f32,
        size_arg: *const ImVec2,
        overlay: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?Bullet@ImGui@@YAXXZ"]
    pub fn ImGui_Bullet();
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextLink@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_TextLink(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextLinkOpenURL@ImGui@@YA_NPEBD0@Z"]
    pub fn ImGui_TextLinkOpenURL(
        label: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?Image@ImGui@@YAXUImTextureRef@@AEBUImVec2@@11@Z"]
    pub fn ImGui_Image(
        tex_ref: ImTextureRef,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImageWithBg@ImGui@@YAXUImTextureRef@@AEBUImVec2@@11AEBUImVec4@@2@Z"]
    pub fn ImGui_ImageWithBg(
        tex_ref: ImTextureRef,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        bg_col: *const ImVec4,
        tint_col: *const ImVec4,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImageButton@ImGui@@YA_NPEBDUImTextureRef@@AEBUImVec2@@22AEBUImVec4@@3@Z"]
    pub fn ImGui_ImageButton(
        str_id: *const ::std::os::raw::c_char,
        tex_ref: ImTextureRef,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        bg_col: *const ImVec4,
        tint_col: *const ImVec4,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginCombo@ImGui@@YA_NPEBD0H@Z"]
    pub fn ImGui_BeginCombo(
        label: *const ::std::os::raw::c_char,
        preview_value: *const ::std::os::raw::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndCombo@ImGui@@YAXXZ"]
    pub fn ImGui_EndCombo();
}
unsafe extern "C" {
    #[link_name = "\u{1}?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z"]
    pub fn ImGui_Combo(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?Combo@ImGui@@YA_NPEBDPEAH0H@Z"]
    pub fn ImGui_Combo1(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?Combo@ImGui@@YA_NPEBDPEAHP6APEBDPEAXH@Z2HH@Z"]
    pub fn ImGui_Combo2(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z"]
    pub fn ImGui_DragFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z"]
    pub fn ImGui_DragFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z"]
    pub fn ImGui_DragFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z"]
    pub fn ImGui_DragFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z"]
    pub fn ImGui_DragFloatRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z"]
    pub fn ImGui_DragInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z"]
    pub fn ImGui_DragInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z"]
    pub fn ImGui_DragInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z"]
    pub fn ImGui_DragInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z"]
    pub fn ImGui_DragIntRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z"]
    pub fn ImGui_DragScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z"]
    pub fn ImGui_DragScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z"]
    pub fn ImGui_SliderFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z"]
    pub fn ImGui_SliderFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z"]
    pub fn ImGui_SliderFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z"]
    pub fn ImGui_SliderFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z"]
    pub fn ImGui_SliderAngle(
        label: *const ::std::os::raw::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z"]
    pub fn ImGui_SliderInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z"]
    pub fn ImGui_SliderInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z"]
    pub fn ImGui_SliderInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z"]
    pub fn ImGui_SliderInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z"]
    pub fn ImGui_SliderScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z"]
    pub fn ImGui_SliderScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z"]
    pub fn ImGui_VSliderFloat(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z"]
    pub fn ImGui_VSliderInt(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z"]
    pub fn ImGui_VSliderScalar(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputText(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputTextMultiline(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        size: *const ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputTextWithHint(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z"]
    pub fn ImGui_InputFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z"]
    pub fn ImGui_InputFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z"]
    pub fn ImGui_InputFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z"]
    pub fn ImGui_InputFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z"]
    pub fn ImGui_InputInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        step_fast: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputInt2@ImGui@@YA_NPEBDQEAHH@Z"]
    pub fn ImGui_InputInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputInt3@ImGui@@YA_NPEBDQEAHH@Z"]
    pub fn ImGui_InputInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputInt4@ImGui@@YA_NPEBDQEAHH@Z"]
    pub fn ImGui_InputInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z"]
    pub fn ImGui_InputDouble(
        label: *const ::std::os::raw::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z"]
    pub fn ImGui_InputScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z"]
    pub fn ImGui_InputScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z"]
    pub fn ImGui_ColorEdit3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z"]
    pub fn ImGui_ColorEdit4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z"]
    pub fn ImGui_ColorPicker3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z"]
    pub fn ImGui_ColorPicker4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HAEBUImVec2@@@Z"]
    pub fn ImGui_ColorButton(
        desc_id: *const ::std::os::raw::c_char,
        col: *const ImVec4,
        flags: ImGuiColorEditFlags,
        size: *const ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetColorEditOptions@ImGui@@YAXH@Z"]
    pub fn ImGui_SetColorEditOptions(flags: ImGuiColorEditFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNode@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_TreeNode(label: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNode@ImGui@@YA_NPEBD0ZZ"]
    pub fn ImGui_TreeNode1(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNode@ImGui@@YA_NPEBXPEBDZZ"]
    pub fn ImGui_TreeNode2(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z"]
    pub fn ImGui_TreeNodeV(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z"]
    pub fn ImGui_TreeNodeV1(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeEx@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_TreeNodeEx(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ"]
    pub fn ImGui_TreeNodeEx1(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ"]
    pub fn ImGui_TreeNodeEx2(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z"]
    pub fn ImGui_TreeNodeExV(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z"]
    pub fn ImGui_TreeNodeExV1(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreePush@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_TreePush(str_id: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreePush@ImGui@@YAXPEBX@Z"]
    pub fn ImGui_TreePush1(ptr_id: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreePop@ImGui@@YAXXZ"]
    pub fn ImGui_TreePop();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ"]
    pub fn ImGui_GetTreeNodeToLabelSpacing() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CollapsingHeader@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_CollapsingHeader(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_CollapsingHeader1(
        label: *const ::std::os::raw::c_char,
        p_visible: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextItemOpen@ImGui@@YAX_NH@Z"]
    pub fn ImGui_SetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextItemStorageID@ImGui@@YAXI@Z"]
    pub fn ImGui_SetNextItemStorageID(storage_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z"]
    pub fn ImGui_Selectable(
        label: *const ::std::os::raw::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: *const ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z"]
    pub fn ImGui_Selectable1(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: *const ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginMultiSelect@ImGui@@YAPEAUImGuiMultiSelectIO@@HHH@Z"]
    pub fn ImGui_BeginMultiSelect(
        flags: ImGuiMultiSelectFlags,
        selection_size: ::std::os::raw::c_int,
        items_count: ::std::os::raw::c_int,
    ) -> *mut ImGuiMultiSelectIO;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndMultiSelect@ImGui@@YAPEAUImGuiMultiSelectIO@@XZ"]
    pub fn ImGui_EndMultiSelect() -> *mut ImGuiMultiSelectIO;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextItemSelectionUserData@ImGui@@YAX_J@Z"]
    pub fn ImGui_SetNextItemSelectionUserData(selection_user_data: ImGuiSelectionUserData);
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemToggledSelection@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemToggledSelection() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z"]
    pub fn ImGui_BeginListBox(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndListBox@ImGui@@YAXXZ"]
    pub fn ImGui_EndListBox();
}
unsafe extern "C" {
    #[link_name = "\u{1}?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z"]
    pub fn ImGui_ListBox(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ListBox@ImGui@@YA_NPEBDPEAHP6APEBDPEAXH@Z2HH@Z"]
    pub fn ImGui_ListBox1(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            unsafe extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z"]
    pub fn ImGui_PlotLines(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z"]
    pub fn ImGui_PlotLines1(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z"]
    pub fn ImGui_PlotHistogram(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z"]
    pub fn ImGui_PlotHistogram1(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBD_N@Z"]
    pub fn ImGui_Value(prefix: *const ::std::os::raw::c_char, b: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBDH@Z"]
    pub fn ImGui_Value1(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBDI@Z"]
    pub fn ImGui_Value2(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Value@ImGui@@YAXPEBDM0@Z"]
    pub fn ImGui_Value3(
        prefix: *const ::std::os::raw::c_char,
        v: f32,
        float_format: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginMenuBar@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginMenuBar() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndMenuBar@ImGui@@YAXXZ"]
    pub fn ImGui_EndMenuBar();
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginMainMenuBar@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginMainMenuBar() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndMainMenuBar@ImGui@@YAXXZ"]
    pub fn ImGui_EndMainMenuBar();
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginMenu@ImGui@@YA_NPEBD_N@Z"]
    pub fn ImGui_BeginMenu(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndMenu@ImGui@@YAXXZ"]
    pub fn ImGui_EndMenu();
}
unsafe extern "C" {
    #[link_name = "\u{1}?MenuItem@ImGui@@YA_NPEBD0_N1@Z"]
    pub fn ImGui_MenuItem(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z"]
    pub fn ImGui_MenuItem1(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginTooltip@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginTooltip() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndTooltip@ImGui@@YAXXZ"]
    pub fn ImGui_EndTooltip();
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetTooltip@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_SetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetTooltipV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_SetTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginItemTooltip@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginItemTooltip() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetItemTooltip@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_SetItemTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetItemTooltipV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_SetItemTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginPopup@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags)
    -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginPopupModal@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_BeginPopupModal(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndPopup@ImGui@@YAXXZ"]
    pub fn ImGui_EndPopup();
}
unsafe extern "C" {
    #[link_name = "\u{1}?OpenPopup@ImGui@@YAXPEBDH@Z"]
    pub fn ImGui_OpenPopup(str_id: *const ::std::os::raw::c_char, popup_flags: ImGuiPopupFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?OpenPopup@ImGui@@YAXIH@Z"]
    pub fn ImGui_OpenPopup1(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z"]
    pub fn ImGui_OpenPopupOnItemClick(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?CloseCurrentPopup@ImGui@@YAXXZ"]
    pub fn ImGui_CloseCurrentPopup();
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginPopupContextItem@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopupContextItem(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginPopupContextWindow@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopupContextWindow(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginPopupContextVoid@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginPopupContextVoid(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsPopupOpen@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_IsPopupOpen(str_id: *const ::std::os::raw::c_char, flags: ImGuiPopupFlags)
    -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z"]
    pub fn ImGui_BeginTable(
        str_id: *const ::std::os::raw::c_char,
        columns: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: *const ImVec2,
        inner_width: f32,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndTable@ImGui@@YAXXZ"]
    pub fn ImGui_EndTable();
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableNextRow@ImGui@@YAXHM@Z"]
    pub fn ImGui_TableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableNextColumn@ImGui@@YA_NXZ"]
    pub fn ImGui_TableNextColumn() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSetColumnIndex@ImGui@@YA_NH@Z"]
    pub fn ImGui_TableSetColumnIndex(column_n: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSetupColumn@ImGui@@YAXPEBDHMI@Z"]
    pub fn ImGui_TableSetupColumn(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTableColumnFlags,
        init_width_or_weight: f32,
        user_id: ImGuiID,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSetupScrollFreeze@ImGui@@YAXHH@Z"]
    pub fn ImGui_TableSetupScrollFreeze(cols: ::std::os::raw::c_int, rows: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableHeader@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_TableHeader(label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableHeadersRow@ImGui@@YAXXZ"]
    pub fn ImGui_TableHeadersRow();
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableAngledHeadersRow@ImGui@@YAXXZ"]
    pub fn ImGui_TableAngledHeadersRow();
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ"]
    pub fn ImGui_TableGetSortSpecs() -> *mut ImGuiTableSortSpecs;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetColumnCount@ImGui@@YAHXZ"]
    pub fn ImGui_TableGetColumnCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetColumnIndex@ImGui@@YAHXZ"]
    pub fn ImGui_TableGetColumnIndex() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetRowIndex@ImGui@@YAHXZ"]
    pub fn ImGui_TableGetRowIndex() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetColumnName@ImGui@@YAPEBDH@Z"]
    pub fn ImGui_TableGetColumnName(
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetColumnFlags@ImGui@@YAHH@Z"]
    pub fn ImGui_TableGetColumnFlags(column_n: ::std::os::raw::c_int) -> ImGuiTableColumnFlags;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSetColumnEnabled@ImGui@@YAXH_N@Z"]
    pub fn ImGui_TableSetColumnEnabled(column_n: ::std::os::raw::c_int, v: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetHoveredColumn@ImGui@@YAHXZ"]
    pub fn ImGui_TableGetHoveredColumn() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSetBgColor@ImGui@@YAXHIH@Z"]
    pub fn ImGui_TableSetBgColor(
        target: ImGuiTableBgTarget,
        color: ImU32,
        column_n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?Columns@ImGui@@YAXHPEBD_N@Z"]
    pub fn ImGui_Columns(
        count: ::std::os::raw::c_int,
        id: *const ::std::os::raw::c_char,
        borders: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?NextColumn@ImGui@@YAXXZ"]
    pub fn ImGui_NextColumn();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetColumnIndex@ImGui@@YAHXZ"]
    pub fn ImGui_GetColumnIndex() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetColumnWidth@ImGui@@YAMH@Z"]
    pub fn ImGui_GetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetColumnWidth@ImGui@@YAXHM@Z"]
    pub fn ImGui_SetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetColumnOffset@ImGui@@YAMH@Z"]
    pub fn ImGui_GetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetColumnOffset@ImGui@@YAXHM@Z"]
    pub fn ImGui_SetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetColumnsCount@ImGui@@YAHXZ"]
    pub fn ImGui_GetColumnsCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginTabBar@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_BeginTabBar(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTabBarFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndTabBar@ImGui@@YAXXZ"]
    pub fn ImGui_EndTabBar();
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z"]
    pub fn ImGui_BeginTabItem(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndTabItem@ImGui@@YAXXZ"]
    pub fn ImGui_EndTabItem();
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabItemButton@ImGui@@YA_NPEBDH@Z"]
    pub fn ImGui_TabItemButton(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetTabItemClosed@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SetTabItemClosed(tab_or_docked_window_label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockSpace@ImGui@@YAIIAEBUImVec2@@HPEBUImGuiWindowClass@@@Z"]
    pub fn ImGui_DockSpace(
        dockspace_id: ImGuiID,
        size: *const ImVec2,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockSpaceOverViewport@ImGui@@YAIIPEBUImGuiViewport@@HPEBUImGuiWindowClass@@@Z"]
    pub fn ImGui_DockSpaceOverViewport(
        dockspace_id: ImGuiID,
        viewport: *const ImGuiViewport,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowDockID@ImGui@@YAXIH@Z"]
    pub fn ImGui_SetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowClass@ImGui@@YAXPEBUImGuiWindowClass@@@Z"]
    pub fn ImGui_SetNextWindowClass(window_class: *const ImGuiWindowClass);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowDockID@ImGui@@YAIXZ"]
    pub fn ImGui_GetWindowDockID() -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsWindowDocked@ImGui@@YA_NXZ"]
    pub fn ImGui_IsWindowDocked() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogToTTY@ImGui@@YAXH@Z"]
    pub fn ImGui_LogToTTY(auto_open_depth: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogToFile@ImGui@@YAXHPEBD@Z"]
    pub fn ImGui_LogToFile(
        auto_open_depth: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogToClipboard@ImGui@@YAXH@Z"]
    pub fn ImGui_LogToClipboard(auto_open_depth: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogFinish@ImGui@@YAXXZ"]
    pub fn ImGui_LogFinish();
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogButtons@ImGui@@YAXXZ"]
    pub fn ImGui_LogButtons();
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogText@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_LogText(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogTextV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_LogTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginDragDropSource@ImGui@@YA_NH@Z"]
    pub fn ImGui_BeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z"]
    pub fn ImGui_SetDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        sz: usize,
        cond: ImGuiCond,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndDragDropSource@ImGui@@YAXXZ"]
    pub fn ImGui_EndDragDropSource();
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginDragDropTarget@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginDragDropTarget() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z"]
    pub fn ImGui_AcceptDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> *const ImGuiPayload;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndDragDropTarget@ImGui@@YAXXZ"]
    pub fn ImGui_EndDragDropTarget();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetDragDropPayload@ImGui@@YAPEBUImGuiPayload@@XZ"]
    pub fn ImGui_GetDragDropPayload() -> *const ImGuiPayload;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginDisabled@ImGui@@YAX_N@Z"]
    pub fn ImGui_BeginDisabled(disabled: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndDisabled@ImGui@@YAXXZ"]
    pub fn ImGui_EndDisabled();
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z"]
    pub fn ImGui_PushClipRect(
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopClipRect@ImGui@@YAXXZ"]
    pub fn ImGui_PopClipRect();
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetItemDefaultFocus@ImGui@@YAXXZ"]
    pub fn ImGui_SetItemDefaultFocus();
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetKeyboardFocusHere@ImGui@@YAXH@Z"]
    pub fn ImGui_SetKeyboardFocusHere(offset: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNavCursorVisible@ImGui@@YAX_N@Z"]
    pub fn ImGui_SetNavCursorVisible(visible: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextItemAllowOverlap@ImGui@@YAXXZ"]
    pub fn ImGui_SetNextItemAllowOverlap();
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemHovered@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemActive@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemActive() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemFocused@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemFocused() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemClicked@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsItemClicked(mouse_button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemVisible@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemVisible() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemEdited@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemEdited() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemActivated@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemActivated() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemDeactivated@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemDeactivated() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemDeactivatedAfterEdit@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemDeactivatedAfterEdit() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsItemToggledOpen@ImGui@@YA_NXZ"]
    pub fn ImGui_IsItemToggledOpen() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsAnyItemHovered@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyItemHovered() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsAnyItemActive@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyItemActive() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsAnyItemFocused@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyItemFocused() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetItemID@ImGui@@YAIXZ"]
    pub fn ImGui_GetItemID() -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ"]
    pub fn ImGui_GetMainViewport() -> *mut ImGuiViewport;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetBackgroundDrawList@ImGui@@YAPEAUImDrawList@@PEAUImGuiViewport@@@Z"]
    pub fn ImGui_GetBackgroundDrawList(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@PEAUImGuiViewport@@@Z"]
    pub fn ImGui_GetForegroundDrawList(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsRectVisible@ImGui@@YA_NAEBUImVec2@@@Z"]
    pub fn ImGui_IsRectVisible(size: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsRectVisible@ImGui@@YA_NAEBUImVec2@@0@Z"]
    pub fn ImGui_IsRectVisible1(rect_min: *const ImVec2, rect_max: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetTime@ImGui@@YANXZ"]
    pub fn ImGui_GetTime() -> f64;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetFrameCount@ImGui@@YAHXZ"]
    pub fn ImGui_GetFrameCount() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetDrawListSharedData@ImGui@@YAPEAUImDrawListSharedData@@XZ"]
    pub fn ImGui_GetDrawListSharedData() -> *mut ImDrawListSharedData;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetStyleColorName@ImGui@@YAPEBDH@Z"]
    pub fn ImGui_GetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetStateStorage@ImGui@@YAXPEAUImGuiStorage@@@Z"]
    pub fn ImGui_SetStateStorage(storage: *mut ImGuiStorage);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetStateStorage@ImGui@@YAPEAUImGuiStorage@@XZ"]
    pub fn ImGui_GetStateStorage() -> *mut ImGuiStorage;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorConvertU32ToFloat4@ImGui@@YA?AUImVec4@@I@Z"]
    pub fn ImGui_ColorConvertU32ToFloat4(in_: ImU32) -> ImVec4;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z"]
    pub fn ImGui_ColorConvertFloat4ToU32(in_: *const ImVec4) -> ImU32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z"]
    pub fn ImGui_ColorConvertRGBtoHSV(
        r: f32,
        g: f32,
        b: f32,
        out_h: *mut f32,
        out_s: *mut f32,
        out_v: *mut f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z"]
    pub fn ImGui_ColorConvertHSVtoRGB(
        h: f32,
        s: f32,
        v: f32,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@@Z"]
    pub fn ImGui_IsKeyDown(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsKeyPressed@ImGui@@YA_NW4ImGuiKey@@_N@Z"]
    pub fn ImGui_IsKeyPressed(key: ImGuiKey, repeat: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsKeyReleased@ImGui@@YA_NW4ImGuiKey@@@Z"]
    pub fn ImGui_IsKeyReleased(key: ImGuiKey) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsKeyChordPressed@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsKeyChordPressed(key_chord: ImGuiKeyChord) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetKeyPressedAmount@ImGui@@YAHW4ImGuiKey@@MM@Z"]
    pub fn ImGui_GetKeyPressedAmount(
        key: ImGuiKey,
        repeat_delay: f32,
        rate: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetKeyName@ImGui@@YAPEBDW4ImGuiKey@@@Z"]
    pub fn ImGui_GetKeyName(key: ImGuiKey) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextFrameWantCaptureKeyboard@ImGui@@YAX_N@Z"]
    pub fn ImGui_SetNextFrameWantCaptureKeyboard(want_capture_keyboard: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Shortcut@ImGui@@YA_NHH@Z"]
    pub fn ImGui_Shortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextItemShortcut@ImGui@@YAXHH@Z"]
    pub fn ImGui_SetNextItemShortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetItemKeyOwner@ImGui@@YAXW4ImGuiKey@@@Z"]
    pub fn ImGui_SetItemKeyOwner(key: ImGuiKey);
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseDown@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsMouseDown(button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseClicked@ImGui@@YA_NH_N@Z"]
    pub fn ImGui_IsMouseClicked(button: ImGuiMouseButton, repeat: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseReleased@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsMouseReleased(button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseDoubleClicked@ImGui@@YA_NH@Z"]
    pub fn ImGui_IsMouseDoubleClicked(button: ImGuiMouseButton) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseReleasedWithDelay@ImGui@@YA_NHM@Z"]
    pub fn ImGui_IsMouseReleasedWithDelay(button: ImGuiMouseButton, delay: f32) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetMouseClickedCount@ImGui@@YAHH@Z"]
    pub fn ImGui_GetMouseClickedCount(button: ImGuiMouseButton) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseHoveringRect@ImGui@@YA_NAEBUImVec2@@0_N@Z"]
    pub fn ImGui_IsMouseHoveringRect(
        r_min: *const ImVec2,
        r_max: *const ImVec2,
        clip: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z"]
    pub fn ImGui_IsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsAnyMouseDown@ImGui@@YA_NXZ"]
    pub fn ImGui_IsAnyMouseDown() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseDragging@ImGui@@YA_NHM@Z"]
    pub fn ImGui_IsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ResetMouseDragDelta@ImGui@@YAXH@Z"]
    pub fn ImGui_ResetMouseDragDelta(button: ImGuiMouseButton);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetMouseCursor@ImGui@@YAHXZ"]
    pub fn ImGui_GetMouseCursor() -> ImGuiMouseCursor;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetMouseCursor@ImGui@@YAXH@Z"]
    pub fn ImGui_SetMouseCursor(cursor_type: ImGuiMouseCursor);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextFrameWantCaptureMouse@ImGui@@YAX_N@Z"]
    pub fn ImGui_SetNextFrameWantCaptureMouse(want_capture_mouse: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetClipboardText@ImGui@@YAPEBDXZ"]
    pub fn ImGui_GetClipboardText() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetClipboardText@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SetClipboardText(text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?LoadIniSettingsFromDisk@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_LoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?LoadIniSettingsFromMemory@ImGui@@YAXPEBD_K@Z"]
    pub fn ImGui_LoadIniSettingsFromMemory(
        ini_data: *const ::std::os::raw::c_char,
        ini_size: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SaveIniSettingsToDisk@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_SaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SaveIniSettingsToMemory@ImGui@@YAPEBDPEA_K@Z"]
    pub fn ImGui_SaveIniSettingsToMemory(out_ini_size: *mut usize)
    -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugTextEncoding@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_DebugTextEncoding(text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugFlashStyleColor@ImGui@@YAXH@Z"]
    pub fn ImGui_DebugFlashStyleColor(idx: ImGuiCol);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugStartItemPicker@ImGui@@YAXXZ"]
    pub fn ImGui_DebugStartItemPicker();
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugCheckVersionAndDataLayout@ImGui@@YA_NPEBD_K11111@Z"]
    pub fn ImGui_DebugCheckVersionAndDataLayout(
        version_str: *const ::std::os::raw::c_char,
        sz_io: usize,
        sz_style: usize,
        sz_vec2: usize,
        sz_vec4: usize,
        sz_drawvert: usize,
        sz_drawidx: usize,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugLog@ImGui@@YAXPEBDZZ"]
    pub fn ImGui_DebugLog(fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugLogV@ImGui@@YAXPEBDPEAD@Z"]
    pub fn ImGui_DebugLogV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetAllocatorFunctions@ImGui@@YAXP6APEAX_KPEAX@ZP6AX11@Z1@Z"]
    pub fn ImGui_SetAllocatorFunctions(
        alloc_func: ImGuiMemAllocFunc,
        free_func: ImGuiMemFreeFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetAllocatorFunctions@ImGui@@YAXPEAP6APEAX_KPEAX@ZPEAP6AX11@ZPEAPEAX@Z"]
    pub fn ImGui_GetAllocatorFunctions(
        p_alloc_func: *mut ImGuiMemAllocFunc,
        p_free_func: *mut ImGuiMemFreeFunc,
        p_user_data: *mut *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?MemAlloc@ImGui@@YAPEAX_K@Z"]
    pub fn ImGui_MemAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}?MemFree@ImGui@@YAXPEAX@Z"]
    pub fn ImGui_MemFree(ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}?UpdatePlatformWindows@ImGui@@YAXXZ"]
    pub fn ImGui_UpdatePlatformWindows();
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderPlatformWindowsDefault@ImGui@@YAXPEAX0@Z"]
    pub fn ImGui_RenderPlatformWindowsDefault(
        platform_render_arg: *mut ::std::os::raw::c_void,
        renderer_render_arg: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DestroyPlatformWindows@ImGui@@YAXXZ"]
    pub fn ImGui_DestroyPlatformWindows();
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindViewportByID@ImGui@@YAPEAUImGuiViewport@@I@Z"]
    pub fn ImGui_FindViewportByID(id: ImGuiID) -> *mut ImGuiViewport;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindViewportByPlatformHandle@ImGui@@YAPEAUImGuiViewport@@PEAX@Z"]
    pub fn ImGui_FindViewportByPlatformHandle(
        platform_handle: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiViewport;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetIO@ImGui@@YAAEAUImGuiIO@@PEAUImGuiContext@@@Z"]
    pub fn ImGui_GetIO1(ctx: *mut ImGuiContext) -> *mut ImGuiIO;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetPlatformIO@ImGui@@YAAEAUImGuiPlatformIO@@PEAUImGuiContext@@@Z"]
    pub fn ImGui_GetPlatformIO1(ctx: *mut ImGuiContext) -> *mut ImGuiPlatformIO;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindWindowByID@ImGui@@YAPEAUImGuiWindow@@I@Z"]
    pub fn ImGui_FindWindowByID(id: ImGuiID) -> *mut ImGuiWindow;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindWindowByName@ImGui@@YAPEAUImGuiWindow@@PEBD@Z"]
    pub fn ImGui_FindWindowByName(name: *const ::std::os::raw::c_char) -> *mut ImGuiWindow;
}
unsafe extern "C" {
    #[link_name = "\u{1}?UpdateWindowParentAndRootLinks@ImGui@@YAXPEAUImGuiWindow@@H0@Z"]
    pub fn ImGui_UpdateWindowParentAndRootLinks(
        window: *mut ImGuiWindow,
        flags: ImGuiWindowFlags,
        parent_window: *mut ImGuiWindow,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?UpdateWindowSkipRefresh@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_UpdateWindowSkipRefresh(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?CalcWindowNextAutoFitSize@ImGui@@YA?AUImVec2@@PEAUImGuiWindow@@@Z"]
    pub fn ImGui_CalcWindowNextAutoFitSize(window: *mut ImGuiWindow) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsWindowChildOf@ImGui@@YA_NPEAUImGuiWindow@@0_N1@Z"]
    pub fn ImGui_IsWindowChildOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
        popup_hierarchy: bool,
        dock_hierarchy: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsWindowWithinBeginStackOf@ImGui@@YA_NPEAUImGuiWindow@@0@Z"]
    pub fn ImGui_IsWindowWithinBeginStackOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsWindowAbove@ImGui@@YA_NPEAUImGuiWindow@@0@Z"]
    pub fn ImGui_IsWindowAbove(
        potential_above: *mut ImGuiWindow,
        potential_below: *mut ImGuiWindow,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsWindowNavFocusable@ImGui@@YA_NPEAUImGuiWindow@@@Z"]
    pub fn ImGui_IsWindowNavFocusable(window: *mut ImGuiWindow) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowPos@ImGui@@YAXPEAUImGuiWindow@@AEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowPos2(window: *mut ImGuiWindow, pos: *const ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowSize@ImGui@@YAXPEAUImGuiWindow@@AEBUImVec2@@H@Z"]
    pub fn ImGui_SetWindowSize2(window: *mut ImGuiWindow, size: *const ImVec2, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowCollapsed@ImGui@@YAXPEAUImGuiWindow@@_NH@Z"]
    pub fn ImGui_SetWindowCollapsed2(window: *mut ImGuiWindow, collapsed: bool, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowHitTestHole@ImGui@@YAXPEAUImGuiWindow@@AEBUImVec2@@1@Z"]
    pub fn ImGui_SetWindowHitTestHole(
        window: *mut ImGuiWindow,
        pos: *const ImVec2,
        size: *const ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowHiddenAndSkipItemsForCurrentFrame@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_SetWindowHiddenAndSkipItemsForCurrentFrame(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@H@Z"]
    pub fn ImGui_FocusWindow(window: *mut ImGuiWindow, flags: ImGuiFocusRequestFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?FocusTopMostWindowUnderOne@ImGui@@YAXPEAUImGuiWindow@@0PEAUImGuiViewport@@H@Z"]
    pub fn ImGui_FocusTopMostWindowUnderOne(
        under_this_window: *mut ImGuiWindow,
        ignore_window: *mut ImGuiWindow,
        filter_viewport: *mut ImGuiViewport,
        flags: ImGuiFocusRequestFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?BringWindowToFocusFront@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_BringWindowToFocusFront(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?BringWindowToDisplayFront@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_BringWindowToDisplayFront(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?BringWindowToDisplayBack@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_BringWindowToDisplayBack(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?BringWindowToDisplayBehind@ImGui@@YAXPEAUImGuiWindow@@0@Z"]
    pub fn ImGui_BringWindowToDisplayBehind(
        window: *mut ImGuiWindow,
        above_window: *mut ImGuiWindow,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindWindowDisplayIndex@ImGui@@YAHPEAUImGuiWindow@@@Z"]
    pub fn ImGui_FindWindowDisplayIndex(window: *mut ImGuiWindow) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindBottomMostVisibleWindowWithinBeginStack@ImGui@@YAPEAUImGuiWindow@@PEAU2@@Z"]
    pub fn ImGui_FindBottomMostVisibleWindowWithinBeginStack(
        window: *mut ImGuiWindow,
    ) -> *mut ImGuiWindow;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextWindowRefreshPolicy@ImGui@@YAXH@Z"]
    pub fn ImGui_SetNextWindowRefreshPolicy(flags: ImGuiWindowRefreshFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?RegisterUserTexture@ImGui@@YAXPEAUImTextureData@@@Z"]
    pub fn ImGui_RegisterUserTexture(tex: *mut ImTextureData);
}
unsafe extern "C" {
    #[link_name = "\u{1}?UnregisterUserTexture@ImGui@@YAXPEAUImTextureData@@@Z"]
    pub fn ImGui_UnregisterUserTexture(tex: *mut ImTextureData);
}
unsafe extern "C" {
    #[link_name = "\u{1}?RegisterFontAtlas@ImGui@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImGui_RegisterFontAtlas(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?UnregisterFontAtlas@ImGui@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImGui_UnregisterFontAtlas(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetCurrentFont@ImGui@@YAXPEAUImFont@@MM@Z"]
    pub fn ImGui_SetCurrentFont(
        font: *mut ImFont,
        font_size_before_scaling: f32,
        font_size_after_scaling: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?UpdateCurrentFontSize@ImGui@@YAXM@Z"]
    pub fn ImGui_UpdateCurrentFontSize(restore_font_size_after_scaling: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetFontRasterizerDensity@ImGui@@YAXM@Z"]
    pub fn ImGui_SetFontRasterizerDensity(rasterizer_density: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetDefaultFont@ImGui@@YAPEAUImFont@@XZ"]
    pub fn ImGui_GetDefaultFont() -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushPasswordFont@ImGui@@YAXXZ"]
    pub fn ImGui_PushPasswordFont();
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopPasswordFont@ImGui@@YAXXZ"]
    pub fn ImGui_PopPasswordFont();
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddDrawListToDrawDataEx@ImGui@@YAXPEAUImDrawData@@PEAU?$ImVector@PEAUImDrawList@@@@PEAUImDrawList@@@Z"]
    pub fn ImGui_AddDrawListToDrawDataEx(
        draw_data: *mut ImDrawData,
        out_list: *mut ImVector<*mut ImDrawList>,
        draw_list: *mut ImDrawList,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?Initialize@ImGui@@YAXXZ"]
    pub fn ImGui_Initialize();
}
unsafe extern "C" {
    #[link_name = "\u{1}?Shutdown@ImGui@@YAXXZ"]
    pub fn ImGui_Shutdown();
}
unsafe extern "C" {
    #[link_name = "\u{1}?UpdateInputEvents@ImGui@@YAX_N@Z"]
    pub fn ImGui_UpdateInputEvents(trickle_fast_inputs: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?UpdateHoveredWindowAndCaptureFlags@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_UpdateHoveredWindowAndCaptureFlags(mouse_pos: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindHoveredWindowEx@ImGui@@YAXAEBUImVec2@@_NPEAPEAUImGuiWindow@@2@Z"]
    pub fn ImGui_FindHoveredWindowEx(
        pos: *const ImVec2,
        find_first_and_in_any_viewport: bool,
        out_hovered_window: *mut *mut ImGuiWindow,
        out_hovered_window_under_moving_window: *mut *mut ImGuiWindow,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?StartMouseMovingWindow@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_StartMouseMovingWindow(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?StartMouseMovingWindowOrNode@ImGui@@YAXPEAUImGuiWindow@@PEAUImGuiDockNode@@_N@Z"]
    pub fn ImGui_StartMouseMovingWindowOrNode(
        window: *mut ImGuiWindow,
        node: *mut ImGuiDockNode,
        undock: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?StopMouseMovingWindow@ImGui@@YAXXZ"]
    pub fn ImGui_StopMouseMovingWindow();
}
unsafe extern "C" {
    #[link_name = "\u{1}?UpdateMouseMovingWindowNewFrame@ImGui@@YAXXZ"]
    pub fn ImGui_UpdateMouseMovingWindowNewFrame();
}
unsafe extern "C" {
    #[link_name = "\u{1}?UpdateMouseMovingWindowEndFrame@ImGui@@YAXXZ"]
    pub fn ImGui_UpdateMouseMovingWindowEndFrame();
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddContextHook@ImGui@@YAIPEAUImGuiContext@@PEBUImGuiContextHook@@@Z"]
    pub fn ImGui_AddContextHook(
        context: *mut ImGuiContext,
        hook: *const ImGuiContextHook,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?RemoveContextHook@ImGui@@YAXPEAUImGuiContext@@I@Z"]
    pub fn ImGui_RemoveContextHook(context: *mut ImGuiContext, hook_to_remove: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?CallContextHooks@ImGui@@YAXPEAUImGuiContext@@W4ImGuiContextHookType@@@Z"]
    pub fn ImGui_CallContextHooks(context: *mut ImGuiContext, type_: ImGuiContextHookType);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TranslateWindowsInViewport@ImGui@@YAXPEAUImGuiViewportP@@AEBUImVec2@@111@Z"]
    pub fn ImGui_TranslateWindowsInViewport(
        viewport: *mut ImGuiViewportP,
        old_pos: *const ImVec2,
        new_pos: *const ImVec2,
        old_size: *const ImVec2,
        new_size: *const ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ScaleWindowsInViewport@ImGui@@YAXPEAUImGuiViewportP@@M@Z"]
    pub fn ImGui_ScaleWindowsInViewport(viewport: *mut ImGuiViewportP, scale: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DestroyPlatformWindow@ImGui@@YAXPEAUImGuiViewportP@@@Z"]
    pub fn ImGui_DestroyPlatformWindow(viewport: *mut ImGuiViewportP);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowViewport@ImGui@@YAXPEAUImGuiWindow@@PEAUImGuiViewportP@@@Z"]
    pub fn ImGui_SetWindowViewport(window: *mut ImGuiWindow, viewport: *mut ImGuiViewportP);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetCurrentViewport@ImGui@@YAXPEAUImGuiWindow@@PEAUImGuiViewportP@@@Z"]
    pub fn ImGui_SetCurrentViewport(window: *mut ImGuiWindow, viewport: *mut ImGuiViewportP);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetViewportPlatformMonitor@ImGui@@YAPEBUImGuiPlatformMonitor@@PEAUImGuiViewport@@@Z"]
    pub fn ImGui_GetViewportPlatformMonitor(
        viewport: *mut ImGuiViewport,
    ) -> *const ImGuiPlatformMonitor;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindHoveredViewportFromPlatformWindowStack@ImGui@@YAPEAUImGuiViewportP@@AEBUImVec2@@@Z"]
    pub fn ImGui_FindHoveredViewportFromPlatformWindowStack(
        mouse_platform_pos: *const ImVec2,
    ) -> *mut ImGuiViewportP;
}
unsafe extern "C" {
    #[link_name = "\u{1}?MarkIniSettingsDirty@ImGui@@YAXXZ"]
    pub fn ImGui_MarkIniSettingsDirty();
}
unsafe extern "C" {
    #[link_name = "\u{1}?MarkIniSettingsDirty@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_MarkIniSettingsDirty1(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearIniSettings@ImGui@@YAXXZ"]
    pub fn ImGui_ClearIniSettings();
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddSettingsHandler@ImGui@@YAXPEBUImGuiSettingsHandler@@@Z"]
    pub fn ImGui_AddSettingsHandler(handler: *const ImGuiSettingsHandler);
}
unsafe extern "C" {
    #[link_name = "\u{1}?RemoveSettingsHandler@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_RemoveSettingsHandler(type_name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindSettingsHandler@ImGui@@YAPEAUImGuiSettingsHandler@@PEBD@Z"]
    pub fn ImGui_FindSettingsHandler(
        type_name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiSettingsHandler;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CreateNewWindowSettings@ImGui@@YAPEAUImGuiWindowSettings@@PEBD@Z"]
    pub fn ImGui_CreateNewWindowSettings(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindowSettings;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindWindowSettingsByID@ImGui@@YAPEAUImGuiWindowSettings@@I@Z"]
    pub fn ImGui_FindWindowSettingsByID(id: ImGuiID) -> *mut ImGuiWindowSettings;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindWindowSettingsByWindow@ImGui@@YAPEAUImGuiWindowSettings@@PEAUImGuiWindow@@@Z"]
    pub fn ImGui_FindWindowSettingsByWindow(window: *mut ImGuiWindow) -> *mut ImGuiWindowSettings;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearWindowSettings@ImGui@@YAXPEBD@Z"]
    pub fn ImGui_ClearWindowSettings(name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?LocalizeRegisterEntries@ImGui@@YAXPEBUImGuiLocEntry@@H@Z"]
    pub fn ImGui_LocalizeRegisterEntries(
        entries: *const ImGuiLocEntry,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetScrollX@ImGui@@YAXPEAUImGuiWindow@@M@Z"]
    pub fn ImGui_SetScrollX1(window: *mut ImGuiWindow, scroll_x: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetScrollY@ImGui@@YAXPEAUImGuiWindow@@M@Z"]
    pub fn ImGui_SetScrollY1(window: *mut ImGuiWindow, scroll_y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetScrollFromPosX@ImGui@@YAXPEAUImGuiWindow@@MM@Z"]
    pub fn ImGui_SetScrollFromPosX1(window: *mut ImGuiWindow, local_x: f32, center_x_ratio: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetScrollFromPosY@ImGui@@YAXPEAUImGuiWindow@@MM@Z"]
    pub fn ImGui_SetScrollFromPosY1(window: *mut ImGuiWindow, local_y: f32, center_y_ratio: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ScrollToItem@ImGui@@YAXH@Z"]
    pub fn ImGui_ScrollToItem(flags: ImGuiScrollFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ScrollToRect@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@H@Z"]
    pub fn ImGui_ScrollToRect(
        window: *mut ImGuiWindow,
        rect: *const ImRect,
        flags: ImGuiScrollFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ScrollToRectEx@ImGui@@YA?AUImVec2@@PEAUImGuiWindow@@AEBUImRect@@H@Z"]
    pub fn ImGui_ScrollToRectEx(
        window: *mut ImGuiWindow,
        rect: *const ImRect,
        flags: ImGuiScrollFlags,
    ) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z"]
    pub fn ImGui_SetActiveID(id: ImGuiID, window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetFocusID@ImGui@@YAXIPEAUImGuiWindow@@@Z"]
    pub fn ImGui_SetFocusID(id: ImGuiID, window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearActiveID@ImGui@@YAXXZ"]
    pub fn ImGui_ClearActiveID();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetHoveredID@ImGui@@YAIXZ"]
    pub fn ImGui_GetHoveredID() -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetHoveredID@ImGui@@YAXI@Z"]
    pub fn ImGui_SetHoveredID(id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?KeepAliveID@ImGui@@YAXI@Z"]
    pub fn ImGui_KeepAliveID(id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?MarkItemEdited@ImGui@@YAXI@Z"]
    pub fn ImGui_MarkItemEdited(id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushOverrideID@ImGui@@YAXI@Z"]
    pub fn ImGui_PushOverrideID(id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetIDWithSeed@ImGui@@YAIPEBD0I@Z"]
    pub fn ImGui_GetIDWithSeed(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
        seed: ImGuiID,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetIDWithSeed@ImGui@@YAIHI@Z"]
    pub fn ImGui_GetIDWithSeed1(n: ::std::os::raw::c_int, seed: ImGuiID) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z"]
    pub fn ImGui_ItemSize(size: *const ImVec2, text_baseline_y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z"]
    pub fn ImGui_ItemAdd(
        bb: *const ImRect,
        id: ImGuiID,
        nav_bb: *const ImRect,
        extra_flags: ImGuiItemFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ItemHoverable@ImGui@@YA_NAEBUImRect@@IH@Z"]
    pub fn ImGui_ItemHoverable(bb: *const ImRect, id: ImGuiID, item_flags: ImGuiItemFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsWindowContentHoverable@ImGui@@YA_NPEAUImGuiWindow@@H@Z"]
    pub fn ImGui_IsWindowContentHoverable(
        window: *mut ImGuiWindow,
        flags: ImGuiHoveredFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsClippedEx@ImGui@@YA_NAEBUImRect@@I@Z"]
    pub fn ImGui_IsClippedEx(bb: *const ImRect, id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetLastItemData@ImGui@@YAXIHHAEBUImRect@@@Z"]
    pub fn ImGui_SetLastItemData(
        item_id: ImGuiID,
        item_flags: ImGuiItemFlags,
        status_flags: ImGuiItemStatusFlags,
        item_rect: *const ImRect,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z"]
    pub fn ImGui_CalcItemSize(size: ImVec2, default_w: f32, default_h: f32) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CalcWrapWidthForPos@ImGui@@YAMAEBUImVec2@@M@Z"]
    pub fn ImGui_CalcWrapWidthForPos(pos: *const ImVec2, wrap_pos_x: f32) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushMultiItemsWidths@ImGui@@YAXHM@Z"]
    pub fn ImGui_PushMultiItemsWidths(components: ::std::os::raw::c_int, width_full: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShrinkWidths@ImGui@@YAXPEAUImGuiShrinkWidthItem@@HMM@Z"]
    pub fn ImGui_ShrinkWidths(
        items: *mut ImGuiShrinkWidthItem,
        count: ::std::os::raw::c_int,
        width_excess: f32,
        width_min: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetStyleVarInfo@ImGui@@YAPEBUImGuiStyleVarInfo@@H@Z"]
    pub fn ImGui_GetStyleVarInfo(idx: ImGuiStyleVar) -> *const ImGuiStyleVarInfo;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginDisabledOverrideReenable@ImGui@@YAXXZ"]
    pub fn ImGui_BeginDisabledOverrideReenable();
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndDisabledOverrideReenable@ImGui@@YAXXZ"]
    pub fn ImGui_EndDisabledOverrideReenable();
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogBegin@ImGui@@YAXHH@Z"]
    pub fn ImGui_LogBegin(flags: ImGuiLogFlags, auto_open_depth: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogToBuffer@ImGui@@YAXH@Z"]
    pub fn ImGui_LogToBuffer(auto_open_depth: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogRenderedText@ImGui@@YAXPEBUImVec2@@PEBD1@Z"]
    pub fn ImGui_LogRenderedText(
        ref_pos: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?LogSetNextTextDecoration@ImGui@@YAXPEBD0@Z"]
    pub fn ImGui_LogSetNextTextDecoration(
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginChildEx@ImGui@@YA_NPEBDIAEBUImVec2@@HH@Z"]
    pub fn ImGui_BeginChildEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        size_arg: *const ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginPopupEx@ImGui@@YA_NIH@Z"]
    pub fn ImGui_BeginPopupEx(id: ImGuiID, extra_window_flags: ImGuiWindowFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginPopupMenuEx@ImGui@@YA_NIPEBDH@Z"]
    pub fn ImGui_BeginPopupMenuEx(
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        extra_window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?OpenPopupEx@ImGui@@YAXIH@Z"]
    pub fn ImGui_OpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClosePopupToLevel@ImGui@@YAXH_N@Z"]
    pub fn ImGui_ClosePopupToLevel(
        remaining: ::std::os::raw::c_int,
        restore_focus_to_window_under_popup: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClosePopupsOverWindow@ImGui@@YAXPEAUImGuiWindow@@_N@Z"]
    pub fn ImGui_ClosePopupsOverWindow(
        ref_window: *mut ImGuiWindow,
        restore_focus_to_window_under_popup: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClosePopupsExceptModals@ImGui@@YAXXZ"]
    pub fn ImGui_ClosePopupsExceptModals();
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsPopupOpen@ImGui@@YA_NIH@Z"]
    pub fn ImGui_IsPopupOpen1(id: ImGuiID, popup_flags: ImGuiPopupFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetPopupAllowedExtentRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@@Z"]
    pub fn ImGui_GetPopupAllowedExtentRect(window: *mut ImGuiWindow) -> ImRect;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetTopMostPopupModal@ImGui@@YAPEAUImGuiWindow@@XZ"]
    pub fn ImGui_GetTopMostPopupModal() -> *mut ImGuiWindow;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetTopMostAndVisiblePopupModal@ImGui@@YAPEAUImGuiWindow@@XZ"]
    pub fn ImGui_GetTopMostAndVisiblePopupModal() -> *mut ImGuiWindow;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindBlockingModal@ImGui@@YAPEAUImGuiWindow@@PEAU2@@Z"]
    pub fn ImGui_FindBlockingModal(window: *mut ImGuiWindow) -> *mut ImGuiWindow;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindBestWindowPosForPopup@ImGui@@YA?AUImVec2@@PEAUImGuiWindow@@@Z"]
    pub fn ImGui_FindBestWindowPosForPopup(window: *mut ImGuiWindow) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindBestWindowPosForPopupEx@ImGui@@YA?AUImVec2@@AEBU2@0PEAW4ImGuiDir@@AEBUImRect@@2W4ImGuiPopupPositionPolicy@@@Z"]
    pub fn ImGui_FindBestWindowPosForPopupEx(
        ref_pos: *const ImVec2,
        size: *const ImVec2,
        last_dir: *mut ImGuiDir,
        r_outer: *const ImRect,
        r_avoid: *const ImRect,
        policy: ImGuiPopupPositionPolicy,
    ) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginTooltipEx@ImGui@@YA_NHH@Z"]
    pub fn ImGui_BeginTooltipEx(
        tooltip_flags: ImGuiTooltipFlags,
        extra_window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginTooltipHidden@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginTooltipHidden() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@W4ImGuiDir@@MH@Z"]
    pub fn ImGui_BeginViewportSideBar(
        name: *const ::std::os::raw::c_char,
        viewport: *mut ImGuiViewport,
        dir: ImGuiDir,
        size: f32,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginMenuEx@ImGui@@YA_NPEBD0_N@Z"]
    pub fn ImGui_BeginMenuEx(
        label: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?MenuItemEx@ImGui@@YA_NPEBD00_N1@Z"]
    pub fn ImGui_MenuItemEx(
        label: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z"]
    pub fn ImGui_BeginComboPopup(
        popup_id: ImGuiID,
        bb: *const ImRect,
        flags: ImGuiComboFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginComboPreview@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginComboPreview() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndComboPreview@ImGui@@YAXXZ"]
    pub fn ImGui_EndComboPreview();
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavInitWindow@ImGui@@YAXPEAUImGuiWindow@@_N@Z"]
    pub fn ImGui_NavInitWindow(window: *mut ImGuiWindow, force_reinit: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavInitRequestApplyResult@ImGui@@YAXXZ"]
    pub fn ImGui_NavInitRequestApplyResult();
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavMoveRequestButNoResultYet@ImGui@@YA_NXZ"]
    pub fn ImGui_NavMoveRequestButNoResultYet() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavMoveRequestSubmit@ImGui@@YAXW4ImGuiDir@@0HH@Z"]
    pub fn ImGui_NavMoveRequestSubmit(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        move_flags: ImGuiNavMoveFlags,
        scroll_flags: ImGuiScrollFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavMoveRequestForward@ImGui@@YAXW4ImGuiDir@@0HH@Z"]
    pub fn ImGui_NavMoveRequestForward(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        move_flags: ImGuiNavMoveFlags,
        scroll_flags: ImGuiScrollFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavMoveRequestResolveWithLastItem@ImGui@@YAXPEAUImGuiNavItemData@@@Z"]
    pub fn ImGui_NavMoveRequestResolveWithLastItem(result: *mut ImGuiNavItemData);
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavMoveRequestResolveWithPastTreeNode@ImGui@@YAXPEAUImGuiNavItemData@@PEBUImGuiTreeNodeStackData@@@Z"]
    pub fn ImGui_NavMoveRequestResolveWithPastTreeNode(
        result: *mut ImGuiNavItemData,
        tree_node_data: *const ImGuiTreeNodeStackData,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavMoveRequestCancel@ImGui@@YAXXZ"]
    pub fn ImGui_NavMoveRequestCancel();
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavMoveRequestApplyResult@ImGui@@YAXXZ"]
    pub fn ImGui_NavMoveRequestApplyResult();
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavMoveRequestTryWrapping@ImGui@@YAXPEAUImGuiWindow@@H@Z"]
    pub fn ImGui_NavMoveRequestTryWrapping(window: *mut ImGuiWindow, move_flags: ImGuiNavMoveFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavHighlightActivated@ImGui@@YAXI@Z"]
    pub fn ImGui_NavHighlightActivated(id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavClearPreferredPosForAxis@ImGui@@YAXW4ImGuiAxis@@@Z"]
    pub fn ImGui_NavClearPreferredPosForAxis(axis: ImGuiAxis);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNavCursorVisibleAfterMove@ImGui@@YAXXZ"]
    pub fn ImGui_SetNavCursorVisibleAfterMove();
}
unsafe extern "C" {
    #[link_name = "\u{1}?NavUpdateCurrentWindowIsScrollPushableX@ImGui@@YAXXZ"]
    pub fn ImGui_NavUpdateCurrentWindowIsScrollPushableX();
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNavWindow@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_SetNavWindow(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNavID@ImGui@@YAXIW4ImGuiNavLayer@@IAEBUImRect@@@Z"]
    pub fn ImGui_SetNavID(
        id: ImGuiID,
        nav_layer: ImGuiNavLayer,
        focus_scope_id: ImGuiID,
        rect_rel: *const ImRect,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNavFocusScope@ImGui@@YAXI@Z"]
    pub fn ImGui_SetNavFocusScope(focus_scope_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?FocusItem@ImGui@@YAXXZ"]
    pub fn ImGui_FocusItem();
}
unsafe extern "C" {
    #[link_name = "\u{1}?ActivateItemByID@ImGui@@YAXI@Z"]
    pub fn ImGui_ActivateItemByID(id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?FixupKeyChord@ImGui@@YAHH@Z"]
    pub fn ImGui_FixupKeyChord(key_chord: ImGuiKeyChord) -> ImGuiKeyChord;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetKeyData@ImGui@@YAPEAUImGuiKeyData@@PEAUImGuiContext@@W4ImGuiKey@@@Z"]
    pub fn ImGui_GetKeyData(ctx: *mut ImGuiContext, key: ImGuiKey) -> *mut ImGuiKeyData;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetKeyChordName@ImGui@@YAPEBDH@Z"]
    pub fn ImGui_GetKeyChordName(key_chord: ImGuiKeyChord) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseDragPastThreshold@ImGui@@YA_NHM@Z"]
    pub fn ImGui_IsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetKeyMagnitude2d@ImGui@@YA?AUImVec2@@W4ImGuiKey@@000@Z"]
    pub fn ImGui_GetKeyMagnitude2d(
        key_left: ImGuiKey,
        key_right: ImGuiKey,
        key_up: ImGuiKey,
        key_down: ImGuiKey,
    ) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetNavTweakPressedAmount@ImGui@@YAMW4ImGuiAxis@@@Z"]
    pub fn ImGui_GetNavTweakPressedAmount(axis: ImGuiAxis) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CalcTypematicRepeatAmount@ImGui@@YAHMMMM@Z"]
    pub fn ImGui_CalcTypematicRepeatAmount(
        t0: f32,
        t1: f32,
        repeat_delay: f32,
        repeat_rate: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetTypematicRepeatRate@ImGui@@YAXHPEAM0@Z"]
    pub fn ImGui_GetTypematicRepeatRate(
        flags: ImGuiInputFlags,
        repeat_delay: *mut f32,
        repeat_rate: *mut f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TeleportMousePos@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_TeleportMousePos(pos: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetActiveIdUsingAllKeyboardKeys@ImGui@@YAXXZ"]
    pub fn ImGui_SetActiveIdUsingAllKeyboardKeys();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetKeyOwner@ImGui@@YAIW4ImGuiKey@@@Z"]
    pub fn ImGui_GetKeyOwner(key: ImGuiKey) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetKeyOwner@ImGui@@YAXW4ImGuiKey@@IH@Z"]
    pub fn ImGui_SetKeyOwner(key: ImGuiKey, owner_id: ImGuiID, flags: ImGuiInputFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetKeyOwnersForKeyChord@ImGui@@YAXHIH@Z"]
    pub fn ImGui_SetKeyOwnersForKeyChord(
        key: ImGuiKeyChord,
        owner_id: ImGuiID,
        flags: ImGuiInputFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetItemKeyOwner@ImGui@@YAXW4ImGuiKey@@H@Z"]
    pub fn ImGui_SetItemKeyOwner1(key: ImGuiKey, flags: ImGuiInputFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TestKeyOwner@ImGui@@YA_NW4ImGuiKey@@I@Z"]
    pub fn ImGui_TestKeyOwner(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsKeyDown@ImGui@@YA_NW4ImGuiKey@@I@Z"]
    pub fn ImGui_IsKeyDown1(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsKeyPressed@ImGui@@YA_NW4ImGuiKey@@HI@Z"]
    pub fn ImGui_IsKeyPressed1(key: ImGuiKey, flags: ImGuiInputFlags, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsKeyReleased@ImGui@@YA_NW4ImGuiKey@@I@Z"]
    pub fn ImGui_IsKeyReleased1(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsKeyChordPressed@ImGui@@YA_NHHI@Z"]
    pub fn ImGui_IsKeyChordPressed1(
        key_chord: ImGuiKeyChord,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseDown@ImGui@@YA_NHI@Z"]
    pub fn ImGui_IsMouseDown1(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseClicked@ImGui@@YA_NHHI@Z"]
    pub fn ImGui_IsMouseClicked1(
        button: ImGuiMouseButton,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseReleased@ImGui@@YA_NHI@Z"]
    pub fn ImGui_IsMouseReleased1(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsMouseDoubleClicked@ImGui@@YA_NHI@Z"]
    pub fn ImGui_IsMouseDoubleClicked1(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?Shortcut@ImGui@@YA_NHHI@Z"]
    pub fn ImGui_Shortcut1(
        key_chord: ImGuiKeyChord,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetShortcutRouting@ImGui@@YA_NHHI@Z"]
    pub fn ImGui_SetShortcutRouting(
        key_chord: ImGuiKeyChord,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TestShortcutRouting@ImGui@@YA_NHI@Z"]
    pub fn ImGui_TestShortcutRouting(key_chord: ImGuiKeyChord, owner_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetShortcutRoutingData@ImGui@@YAPEAUImGuiKeyRoutingData@@H@Z"]
    pub fn ImGui_GetShortcutRoutingData(key_chord: ImGuiKeyChord) -> *mut ImGuiKeyRoutingData;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextInitialize@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_DockContextInitialize(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextShutdown@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_DockContextShutdown(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextClearNodes@ImGui@@YAXPEAUImGuiContext@@I_N@Z"]
    pub fn ImGui_DockContextClearNodes(
        ctx: *mut ImGuiContext,
        root_id: ImGuiID,
        clear_settings_refs: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextRebuildNodes@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_DockContextRebuildNodes(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextNewFrameUpdateUndocking@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_DockContextNewFrameUpdateUndocking(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextNewFrameUpdateDocking@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_DockContextNewFrameUpdateDocking(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextEndFrame@ImGui@@YAXPEAUImGuiContext@@@Z"]
    pub fn ImGui_DockContextEndFrame(ctx: *mut ImGuiContext);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextGenNodeID@ImGui@@YAIPEAUImGuiContext@@@Z"]
    pub fn ImGui_DockContextGenNodeID(ctx: *mut ImGuiContext) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextQueueDock@ImGui@@YAXPEAUImGuiContext@@PEAUImGuiWindow@@PEAUImGuiDockNode@@1W4ImGuiDir@@M_N@Z"]
    pub fn ImGui_DockContextQueueDock(
        ctx: *mut ImGuiContext,
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload: *mut ImGuiWindow,
        split_dir: ImGuiDir,
        split_ratio: f32,
        split_outer: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextQueueUndockWindow@ImGui@@YAXPEAUImGuiContext@@PEAUImGuiWindow@@@Z"]
    pub fn ImGui_DockContextQueueUndockWindow(ctx: *mut ImGuiContext, window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextQueueUndockNode@ImGui@@YAXPEAUImGuiContext@@PEAUImGuiDockNode@@@Z"]
    pub fn ImGui_DockContextQueueUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextProcessUndockWindow@ImGui@@YAXPEAUImGuiContext@@PEAUImGuiWindow@@_N@Z"]
    pub fn ImGui_DockContextProcessUndockWindow(
        ctx: *mut ImGuiContext,
        window: *mut ImGuiWindow,
        clear_persistent_docking_ref: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextProcessUndockNode@ImGui@@YAXPEAUImGuiContext@@PEAUImGuiDockNode@@@Z"]
    pub fn ImGui_DockContextProcessUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextCalcDropPosForDocking@ImGui@@YA_NPEAUImGuiWindow@@PEAUImGuiDockNode@@01W4ImGuiDir@@_NPEAUImVec2@@@Z"]
    pub fn ImGui_DockContextCalcDropPosForDocking(
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload_window: *mut ImGuiWindow,
        payload_node: *mut ImGuiDockNode,
        split_dir: ImGuiDir,
        split_outer: bool,
        out_pos: *mut ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockContextFindNodeByID@ImGui@@YAPEAUImGuiDockNode@@PEAUImGuiContext@@I@Z"]
    pub fn ImGui_DockContextFindNodeByID(ctx: *mut ImGuiContext, id: ImGuiID)
    -> *mut ImGuiDockNode;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockNodeWindowMenuHandler_Default@ImGui@@YAXPEAUImGuiContext@@PEAUImGuiDockNode@@PEAUImGuiTabBar@@@Z"]
    pub fn ImGui_DockNodeWindowMenuHandler_Default(
        ctx: *mut ImGuiContext,
        node: *mut ImGuiDockNode,
        tab_bar: *mut ImGuiTabBar,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockNodeBeginAmendTabBar@ImGui@@YA_NPEAUImGuiDockNode@@@Z"]
    pub fn ImGui_DockNodeBeginAmendTabBar(node: *mut ImGuiDockNode) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockNodeEndAmendTabBar@ImGui@@YAXXZ"]
    pub fn ImGui_DockNodeEndAmendTabBar();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowAlwaysWantOwnTabBar@ImGui@@YA_NPEAUImGuiWindow@@@Z"]
    pub fn ImGui_GetWindowAlwaysWantOwnTabBar(window: *mut ImGuiWindow) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginDocked@ImGui@@YAXPEAUImGuiWindow@@PEA_N@Z"]
    pub fn ImGui_BeginDocked(window: *mut ImGuiWindow, p_open: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginDockableDragDropSource@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_BeginDockableDragDropSource(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginDockableDragDropTarget@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_BeginDockableDragDropTarget(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowDock@ImGui@@YAXPEAUImGuiWindow@@IH@Z"]
    pub fn ImGui_SetWindowDock(window: *mut ImGuiWindow, dock_id: ImGuiID, cond: ImGuiCond);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderDockWindow@ImGui@@YAXPEBDI@Z"]
    pub fn ImGui_DockBuilderDockWindow(
        window_name: *const ::std::os::raw::c_char,
        node_id: ImGuiID,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderGetNode@ImGui@@YAPEAUImGuiDockNode@@I@Z"]
    pub fn ImGui_DockBuilderGetNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderAddNode@ImGui@@YAIIH@Z"]
    pub fn ImGui_DockBuilderAddNode(node_id: ImGuiID, flags: ImGuiDockNodeFlags) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderRemoveNode@ImGui@@YAXI@Z"]
    pub fn ImGui_DockBuilderRemoveNode(node_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderRemoveNodeDockedWindows@ImGui@@YAXI_N@Z"]
    pub fn ImGui_DockBuilderRemoveNodeDockedWindows(node_id: ImGuiID, clear_settings_refs: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderRemoveNodeChildNodes@ImGui@@YAXI@Z"]
    pub fn ImGui_DockBuilderRemoveNodeChildNodes(node_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderSetNodePos@ImGui@@YAXIUImVec2@@@Z"]
    pub fn ImGui_DockBuilderSetNodePos(node_id: ImGuiID, pos: ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderSetNodeSize@ImGui@@YAXIUImVec2@@@Z"]
    pub fn ImGui_DockBuilderSetNodeSize(node_id: ImGuiID, size: ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderSplitNode@ImGui@@YAIIW4ImGuiDir@@MPEAI1@Z"]
    pub fn ImGui_DockBuilderSplitNode(
        node_id: ImGuiID,
        split_dir: ImGuiDir,
        size_ratio_for_node_at_dir: f32,
        out_id_at_dir: *mut ImGuiID,
        out_id_at_opposite_dir: *mut ImGuiID,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderCopyDockSpace@ImGui@@YAXIIPEAU?$ImVector@PEBD@@@Z"]
    pub fn ImGui_DockBuilderCopyDockSpace(
        src_dockspace_id: ImGuiID,
        dst_dockspace_id: ImGuiID,
        in_window_remap_pairs: *mut ImVector<*const ::std::os::raw::c_char>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderCopyNode@ImGui@@YAXIIPEAU?$ImVector@I@@@Z"]
    pub fn ImGui_DockBuilderCopyNode(
        src_node_id: ImGuiID,
        dst_node_id: ImGuiID,
        out_node_remap_pairs: *mut ImVector<ImGuiID>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderCopyWindowSettings@ImGui@@YAXPEBD0@Z"]
    pub fn ImGui_DockBuilderCopyWindowSettings(
        src_name: *const ::std::os::raw::c_char,
        dst_name: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DockBuilderFinish@ImGui@@YAXI@Z"]
    pub fn ImGui_DockBuilderFinish(node_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushFocusScope@ImGui@@YAXI@Z"]
    pub fn ImGui_PushFocusScope(id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopFocusScope@ImGui@@YAXXZ"]
    pub fn ImGui_PopFocusScope();
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsDragDropActive@ImGui@@YA_NXZ"]
    pub fn ImGui_IsDragDropActive() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginDragDropTargetCustom@ImGui@@YA_NAEBUImRect@@I@Z"]
    pub fn ImGui_BeginDragDropTargetCustom(bb: *const ImRect, id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearDragDrop@ImGui@@YAXXZ"]
    pub fn ImGui_ClearDragDrop();
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsDragDropPayloadBeingAccepted@ImGui@@YA_NXZ"]
    pub fn ImGui_IsDragDropPayloadBeingAccepted() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderDragDropTargetRect@ImGui@@YAXAEBUImRect@@0@Z"]
    pub fn ImGui_RenderDragDropTargetRect(bb: *const ImRect, item_clip_rect: *const ImRect);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetTypingSelectRequest@ImGui@@YAPEAUImGuiTypingSelectRequest@@H@Z"]
    pub fn ImGui_GetTypingSelectRequest(
        flags: ImGuiTypingSelectFlags,
    ) -> *mut ImGuiTypingSelectRequest;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TypingSelectFindMatch@ImGui@@YAHPEAUImGuiTypingSelectRequest@@HP6APEBDPEAXH@Z1H@Z"]
    pub fn ImGui_TypingSelectFindMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        nav_item_idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TypingSelectFindNextSingleCharMatch@ImGui@@YAHPEAUImGuiTypingSelectRequest@@HP6APEBDPEAXH@Z1H@Z"]
    pub fn ImGui_TypingSelectFindNextSingleCharMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        nav_item_idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TypingSelectFindBestLeadingMatch@ImGui@@YAHPEAUImGuiTypingSelectRequest@@HP6APEBDPEAXH@Z1@Z"]
    pub fn ImGui_TypingSelectFindBestLeadingMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginBoxSelect@ImGui@@YA_NAEBUImRect@@PEAUImGuiWindow@@IH@Z"]
    pub fn ImGui_BeginBoxSelect(
        scope_rect: *const ImRect,
        window: *mut ImGuiWindow,
        box_select_id: ImGuiID,
        ms_flags: ImGuiMultiSelectFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndBoxSelect@ImGui@@YAXAEBUImRect@@H@Z"]
    pub fn ImGui_EndBoxSelect(scope_rect: *const ImRect, ms_flags: ImGuiMultiSelectFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?MultiSelectItemHeader@ImGui@@YAXIPEA_NPEAH@Z"]
    pub fn ImGui_MultiSelectItemHeader(
        id: ImGuiID,
        p_selected: *mut bool,
        p_button_flags: *mut ImGuiButtonFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?MultiSelectItemFooter@ImGui@@YAXIPEA_N0@Z"]
    pub fn ImGui_MultiSelectItemFooter(id: ImGuiID, p_selected: *mut bool, p_pressed: *mut bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?MultiSelectAddSetAll@ImGui@@YAXPEAUImGuiMultiSelectTempData@@_N@Z"]
    pub fn ImGui_MultiSelectAddSetAll(ms: *mut ImGuiMultiSelectTempData, selected: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?MultiSelectAddSetRange@ImGui@@YAXPEAUImGuiMultiSelectTempData@@_NH_J2@Z"]
    pub fn ImGui_MultiSelectAddSetRange(
        ms: *mut ImGuiMultiSelectTempData,
        selected: bool,
        range_dir: ::std::os::raw::c_int,
        first_item: ImGuiSelectionUserData,
        last_item: ImGuiSelectionUserData,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z"]
    pub fn ImGui_SetWindowClipRectBeforeSetChannel(
        window: *mut ImGuiWindow,
        clip_rect: *const ImRect,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginColumns@ImGui@@YAXPEBDHH@Z"]
    pub fn ImGui_BeginColumns(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        flags: ImGuiOldColumnFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndColumns@ImGui@@YAXXZ"]
    pub fn ImGui_EndColumns();
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushColumnClipRect@ImGui@@YAXH@Z"]
    pub fn ImGui_PushColumnClipRect(column_index: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushColumnsBackground@ImGui@@YAXXZ"]
    pub fn ImGui_PushColumnsBackground();
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopColumnsBackground@ImGui@@YAXXZ"]
    pub fn ImGui_PopColumnsBackground();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetColumnsID@ImGui@@YAIPEBDH@Z"]
    pub fn ImGui_GetColumnsID(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z"]
    pub fn ImGui_FindOrCreateColumns(window: *mut ImGuiWindow, id: ImGuiID)
    -> *mut ImGuiOldColumns;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z"]
    pub fn ImGui_GetColumnOffsetFromNorm(columns: *const ImGuiOldColumns, offset_norm: f32) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetColumnNormFromOffset@ImGui@@YAMPEBUImGuiOldColumns@@M@Z"]
    pub fn ImGui_GetColumnNormFromOffset(columns: *const ImGuiOldColumns, offset: f32) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableOpenContextMenu@ImGui@@YAXH@Z"]
    pub fn ImGui_TableOpenContextMenu(column_n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSetColumnWidth@ImGui@@YAXHM@Z"]
    pub fn ImGui_TableSetColumnWidth(column_n: ::std::os::raw::c_int, width: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSetColumnSortDirection@ImGui@@YAXHW4ImGuiSortDirection@@_N@Z"]
    pub fn ImGui_TableSetColumnSortDirection(
        column_n: ::std::os::raw::c_int,
        sort_direction: ImGuiSortDirection,
        append_to_sort_specs: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetHoveredRow@ImGui@@YAHXZ"]
    pub fn ImGui_TableGetHoveredRow() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetHeaderRowHeight@ImGui@@YAMXZ"]
    pub fn ImGui_TableGetHeaderRowHeight() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetHeaderAngledMaxLabelWidth@ImGui@@YAMXZ"]
    pub fn ImGui_TableGetHeaderAngledMaxLabelWidth() -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TablePushBackgroundChannel@ImGui@@YAXXZ"]
    pub fn ImGui_TablePushBackgroundChannel();
}
unsafe extern "C" {
    #[link_name = "\u{1}?TablePopBackgroundChannel@ImGui@@YAXXZ"]
    pub fn ImGui_TablePopBackgroundChannel();
}
unsafe extern "C" {
    #[link_name = "\u{1}?TablePushColumnChannel@ImGui@@YAXH@Z"]
    pub fn ImGui_TablePushColumnChannel(column_n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TablePopColumnChannel@ImGui@@YAXXZ"]
    pub fn ImGui_TablePopColumnChannel();
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableAngledHeadersRowEx@ImGui@@YAXIMMPEBUImGuiTableHeaderData@@H@Z"]
    pub fn ImGui_TableAngledHeadersRowEx(
        row_id: ImGuiID,
        angle: f32,
        max_label_width: f32,
        data: *const ImGuiTableHeaderData,
        data_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableFindByID@ImGui@@YAPEAUImGuiTable@@I@Z"]
    pub fn ImGui_TableFindByID(id: ImGuiID) -> *mut ImGuiTable;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z"]
    pub fn ImGui_BeginTableEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        columns_count: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: *const ImVec2,
        inner_width: f32,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z"]
    pub fn ImGui_TableBeginInitMemory(table: *mut ImGuiTable, columns_count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableBeginApplyRequests(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableSetupDrawChannels(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableUpdateLayout(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableUpdateBorders(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableUpdateColumnsWeightFromWidth(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableDrawBorders(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableDrawDefaultContextMenu@ImGui@@YAXPEAUImGuiTable@@H@Z"]
    pub fn ImGui_TableDrawDefaultContextMenu(
        table: *mut ImGuiTable,
        flags_for_section_to_display: ImGuiTableFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableBeginContextMenuPopup@ImGui@@YA_NPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableBeginContextMenuPopup(table: *mut ImGuiTable) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableMergeDrawChannels(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableSortSpecsSanitize(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableSortSpecsBuild(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetColumnNextSortDirection@ImGui@@YA?AW4ImGuiSortDirection@@PEAUImGuiTableColumn@@@Z"]
    pub fn ImGui_TableGetColumnNextSortDirection(
        column: *mut ImGuiTableColumn,
    ) -> ImGuiSortDirection;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableFixColumnSortDirection@ImGui@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z"]
    pub fn ImGui_TableFixColumnSortDirection(table: *mut ImGuiTable, column: *mut ImGuiTableColumn);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetColumnWidthAuto@ImGui@@YAMPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z"]
    pub fn ImGui_TableGetColumnWidthAuto(
        table: *mut ImGuiTable,
        column: *mut ImGuiTableColumn,
    ) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableBeginRow(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableEndRow(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z"]
    pub fn ImGui_TableBeginCell(table: *mut ImGuiTable, column_n: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableEndCell(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetCellBgRect@ImGui@@YA?AUImRect@@PEBUImGuiTable@@H@Z"]
    pub fn ImGui_TableGetCellBgRect(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> ImRect;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z"]
    pub fn ImGui_TableGetColumnName1(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetColumnResizeID@ImGui@@YAIPEAUImGuiTable@@HH@Z"]
    pub fn ImGui_TableGetColumnResizeID(
        table: *mut ImGuiTable,
        column_n: ::std::os::raw::c_int,
        instance_no: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableCalcMaxColumnWidth@ImGui@@YAMPEBUImGuiTable@@H@Z"]
    pub fn ImGui_TableCalcMaxColumnWidth(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSetColumnWidthAutoSingle@ImGui@@YAXPEAUImGuiTable@@H@Z"]
    pub fn ImGui_TableSetColumnWidthAutoSingle(
        table: *mut ImGuiTable,
        column_n: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSetColumnWidthAutoAll@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableSetColumnWidthAutoAll(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableRemove@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableRemove(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableGcCompactTransientBuffers(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTableTempData@@@Z"]
    pub fn ImGui_TableGcCompactTransientBuffers1(table: *mut ImGuiTableTempData);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGcCompactSettings@ImGui@@YAXXZ"]
    pub fn ImGui_TableGcCompactSettings();
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableLoadSettings@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableLoadSettings(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableSaveSettings(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableResetSettings@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_TableResetSettings(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z"]
    pub fn ImGui_TableGetBoundSettings(table: *mut ImGuiTable) -> *mut ImGuiTableSettings;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSettingsAddSettingsHandler@ImGui@@YAXXZ"]
    pub fn ImGui_TableSettingsAddSettingsHandler();
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSettingsCreate@ImGui@@YAPEAUImGuiTableSettings@@IH@Z"]
    pub fn ImGui_TableSettingsCreate(
        id: ImGuiID,
        columns_count: ::std::os::raw::c_int,
    ) -> *mut ImGuiTableSettings;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TableSettingsFindByID@ImGui@@YAPEAUImGuiTableSettings@@I@Z"]
    pub fn ImGui_TableSettingsFindByID(id: ImGuiID) -> *mut ImGuiTableSettings;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginTabBarEx@ImGui@@YA_NPEAUImGuiTabBar@@AEBUImRect@@H@Z"]
    pub fn ImGui_BeginTabBarEx(
        tab_bar: *mut ImGuiTabBar,
        bb: *const ImRect,
        flags: ImGuiTabBarFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z"]
    pub fn ImGui_TabBarFindTabByID(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID)
    -> *mut ImGuiTabItem;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarFindTabByOrder@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@H@Z"]
    pub fn ImGui_TabBarFindTabByOrder(
        tab_bar: *mut ImGuiTabBar,
        order: ::std::os::raw::c_int,
    ) -> *mut ImGuiTabItem;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarFindMostRecentlySelectedTabForActiveWindow@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z"]
    pub fn ImGui_TabBarFindMostRecentlySelectedTabForActiveWindow(
        tab_bar: *mut ImGuiTabBar,
    ) -> *mut ImGuiTabItem;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarGetCurrentTab@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z"]
    pub fn ImGui_TabBarGetCurrentTab(tab_bar: *mut ImGuiTabBar) -> *mut ImGuiTabItem;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarGetTabName@ImGui@@YAPEBDPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z"]
    pub fn ImGui_TabBarGetTabName(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarAddTab@ImGui@@YAXPEAUImGuiTabBar@@HPEAUImGuiWindow@@@Z"]
    pub fn ImGui_TabBarAddTab(
        tab_bar: *mut ImGuiTabBar,
        tab_flags: ImGuiTabItemFlags,
        window: *mut ImGuiWindow,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarRemoveTab@ImGui@@YAXPEAUImGuiTabBar@@I@Z"]
    pub fn ImGui_TabBarRemoveTab(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z"]
    pub fn ImGui_TabBarCloseTab(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarQueueFocus@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z"]
    pub fn ImGui_TabBarQueueFocus(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarQueueFocus@ImGui@@YAXPEAUImGuiTabBar@@PEBD@Z"]
    pub fn ImGui_TabBarQueueFocus1(
        tab_bar: *mut ImGuiTabBar,
        tab_name: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@H@Z"]
    pub fn ImGui_TabBarQueueReorder(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
        offset: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@UImVec2@@@Z"]
    pub fn ImGui_TabBarQueueReorderFromMousePos(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
        mouse_pos: ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z"]
    pub fn ImGui_TabBarProcessReorder(tab_bar: *mut ImGuiTabBar) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NHPEAUImGuiWindow@@@Z"]
    pub fn ImGui_TabItemEx(
        tab_bar: *mut ImGuiTabBar,
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
        docked_window: *mut ImGuiWindow,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabItemSpacing@ImGui@@YAXPEBDHM@Z"]
    pub fn ImGui_TabItemSpacing(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTabItemFlags,
        width: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z"]
    pub fn ImGui_TabItemCalcSize(
        label: *const ::std::os::raw::c_char,
        has_close_button_or_unsaved_marker: bool,
    ) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEAUImGuiWindow@@@Z"]
    pub fn ImGui_TabItemCalcSize1(window: *mut ImGuiWindow) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z"]
    pub fn ImGui_TabItemBackground(
        draw_list: *mut ImDrawList,
        bb: *const ImRect,
        flags: ImGuiTabItemFlags,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z"]
    pub fn ImGui_TabItemLabelAndCloseButton(
        draw_list: *mut ImDrawList,
        bb: *const ImRect,
        flags: ImGuiTabItemFlags,
        frame_padding: ImVec2,
        label: *const ::std::os::raw::c_char,
        tab_id: ImGuiID,
        close_button_id: ImGuiID,
        is_contents_visible: bool,
        out_just_closed: *mut bool,
        out_text_clipped: *mut bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z"]
    pub fn ImGui_RenderText(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_hash: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderTextWrapped@ImGui@@YAXUImVec2@@PEBD1M@Z"]
    pub fn ImGui_RenderTextWrapped(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z"]
    pub fn ImGui_RenderTextClipped(
        pos_min: *const ImVec2,
        pos_max: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: *const ImVec2,
        clip_rect: *const ImRect,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderTextClippedEx@ImGui@@YAXPEAUImDrawList@@AEBUImVec2@@1PEBD2PEBU3@1PEBUImRect@@@Z"]
    pub fn ImGui_RenderTextClippedEx(
        draw_list: *mut ImDrawList,
        pos_min: *const ImVec2,
        pos_max: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: *const ImVec2,
        clip_rect: *const ImRect,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderTextEllipsis@ImGui@@YAXPEAUImDrawList@@AEBUImVec2@@1MPEBD2PEBU3@@Z"]
    pub fn ImGui_RenderTextEllipsis(
        draw_list: *mut ImDrawList,
        pos_min: *const ImVec2,
        pos_max: *const ImVec2,
        ellipsis_max_x: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z"]
    pub fn ImGui_RenderFrame(
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        borders: bool,
        rounding: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderFrameBorder@ImGui@@YAXUImVec2@@0M@Z"]
    pub fn ImGui_RenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z"]
    pub fn ImGui_RenderColorRectWithAlphaCheckerboard(
        draw_list: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        grid_step: f32,
        grid_off: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderNavCursor@ImGui@@YAXAEBUImRect@@IH@Z"]
    pub fn ImGui_RenderNavCursor(bb: *const ImRect, id: ImGuiID, flags: ImGuiNavRenderCursorFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z"]
    pub fn ImGui_FindRenderedTextEnd(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderMouseCursor@ImGui@@YAXUImVec2@@MHIII@Z"]
    pub fn ImGui_RenderMouseCursor(
        pos: ImVec2,
        scale: f32,
        mouse_cursor: ImGuiMouseCursor,
        col_fill: ImU32,
        col_border: ImU32,
        col_shadow: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IW4ImGuiDir@@M@Z"]
    pub fn ImGui_RenderArrow(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        dir: ImGuiDir,
        scale: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z"]
    pub fn ImGui_RenderBullet(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z"]
    pub fn ImGui_RenderCheckMark(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32, sz: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1W4ImGuiDir@@I@Z"]
    pub fn ImGui_RenderArrowPointingAt(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        half_sz: ImVec2,
        direction: ImGuiDir,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderArrowDockMenu@ImGui@@YAXPEAUImDrawList@@UImVec2@@MI@Z"]
    pub fn ImGui_RenderArrowDockMenu(
        draw_list: *mut ImDrawList,
        p_min: ImVec2,
        sz: f32,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z"]
    pub fn ImGui_RenderRectFilledRangeH(
        draw_list: *mut ImDrawList,
        rect: *const ImRect,
        col: ImU32,
        x_start_norm: f32,
        x_end_norm: f32,
        rounding: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@1IM@Z"]
    pub fn ImGui_RenderRectFilledWithHole(
        draw_list: *mut ImDrawList,
        outer: *const ImRect,
        inner: *const ImRect,
        col: ImU32,
        rounding: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?CalcRoundingFlagsForRectInRect@ImGui@@YAHAEBUImRect@@0M@Z"]
    pub fn ImGui_CalcRoundingFlagsForRectInRect(
        r_in: *const ImRect,
        r_outer: *const ImRect,
        threshold: f32,
    ) -> ImDrawFlags;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextEx@ImGui@@YAXPEBD0H@Z"]
    pub fn ImGui_TextEx(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        flags: ImGuiTextFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextAligned@ImGui@@YAXMMPEBDZZ"]
    pub fn ImGui_TextAligned(align_x: f32, size_x: f32, fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TextAlignedV@ImGui@@YAXMMPEBDPEAD@Z"]
    pub fn ImGui_TextAlignedV(
        align_x: f32,
        size_x: f32,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z"]
    pub fn ImGui_ButtonEx(
        label: *const ::std::os::raw::c_char,
        size_arg: *const ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ArrowButtonEx@ImGui@@YA_NPEBDW4ImGuiDir@@UImVec2@@H@Z"]
    pub fn ImGui_ArrowButtonEx(
        str_id: *const ::std::os::raw::c_char,
        dir: ImGuiDir,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImageButtonEx@ImGui@@YA_NIUImTextureRef@@AEBUImVec2@@11AEBUImVec4@@2H@Z"]
    pub fn ImGui_ImageButtonEx(
        id: ImGuiID,
        tex_ref: ImTextureRef,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        bg_col: *const ImVec4,
        tint_col: *const ImVec4,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SeparatorEx@ImGui@@YAXHM@Z"]
    pub fn ImGui_SeparatorEx(flags: ImGuiSeparatorFlags, thickness: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SeparatorTextEx@ImGui@@YAXIPEBD0M@Z"]
    pub fn ImGui_SeparatorTextEx(
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
        extra_width: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?CheckboxFlags@ImGui@@YA_NPEBDPEA_J_J@Z"]
    pub fn ImGui_CheckboxFlags2(
        label: *const ::std::os::raw::c_char,
        flags: *mut ImS64,
        flags_value: ImS64,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CheckboxFlags@ImGui@@YA_NPEBDPEA_K_K@Z"]
    pub fn ImGui_CheckboxFlags3(
        label: *const ::std::os::raw::c_char,
        flags: *mut ImU64,
        flags_value: ImU64,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z"]
    pub fn ImGui_CloseButton(id: ImGuiID, pos: *const ImVec2) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CollapseButton@ImGui@@YA_NIAEBUImVec2@@PEAUImGuiDockNode@@@Z"]
    pub fn ImGui_CollapseButton(
        id: ImGuiID,
        pos: *const ImVec2,
        dock_node: *mut ImGuiDockNode,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z"]
    pub fn ImGui_Scrollbar(axis: ImGuiAxis);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEA_J_J3H@Z"]
    pub fn ImGui_ScrollbarEx(
        bb: *const ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        p_scroll_v: *mut ImS64,
        avail_v: ImS64,
        contents_v: ImS64,
        draw_rounding_flags: ImDrawFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z"]
    pub fn ImGui_GetWindowScrollbarRect(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImRect;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z"]
    pub fn ImGui_GetWindowScrollbarID(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowResizeCornerID@ImGui@@YAIPEAUImGuiWindow@@H@Z"]
    pub fn ImGui_GetWindowResizeCornerID(
        window: *mut ImGuiWindow,
        n: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetWindowResizeBorderID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiDir@@@Z"]
    pub fn ImGui_GetWindowResizeBorderID(window: *mut ImGuiWindow, dir: ImGuiDir) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z"]
    pub fn ImGui_ButtonBehavior(
        bb: *const ImRect,
        id: ImGuiID,
        out_hovered: *mut bool,
        out_held: *mut bool,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z"]
    pub fn ImGui_DragBehavior(
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z"]
    pub fn ImGui_SliderBehavior(
        bb: *const ImRect,
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
        out_grab_bb: *mut ImRect,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMMI@Z"]
    pub fn ImGui_SplitterBehavior(
        bb: *const ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        size1: *mut f32,
        size2: *mut f32,
        min_size1: f32,
        min_size2: f32,
        hover_extend: f32,
        hover_visibility_delay: f32,
        bg_col: ImU32,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z"]
    pub fn ImGui_TreeNodeBehavior(
        id: ImGuiID,
        flags: ImGuiTreeNodeFlags,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeDrawLineToChildNode@ImGui@@YAXAEBUImVec2@@@Z"]
    pub fn ImGui_TreeNodeDrawLineToChildNode(target_pos: *const ImVec2);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeDrawLineToTreePop@ImGui@@YAXPEBUImGuiTreeNodeStackData@@@Z"]
    pub fn ImGui_TreeNodeDrawLineToTreePop(data: *const ImGuiTreeNodeStackData);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreePushOverrideID@ImGui@@YAXI@Z"]
    pub fn ImGui_TreePushOverrideID(id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeGetOpen@ImGui@@YA_NI@Z"]
    pub fn ImGui_TreeNodeGetOpen(storage_id: ImGuiID) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeSetOpen@ImGui@@YAXI_N@Z"]
    pub fn ImGui_TreeNodeSetOpen(storage_id: ImGuiID, open: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TreeNodeUpdateNextOpen@ImGui@@YA_NIH@Z"]
    pub fn ImGui_TreeNodeUpdateNextOpen(storage_id: ImGuiID, flags: ImGuiTreeNodeFlags) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z"]
    pub fn ImGui_DataTypeGetInfo(data_type: ImGuiDataType) -> *const ImGuiDataTypeInfo;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z"]
    pub fn ImGui_DataTypeFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        data_type: ImGuiDataType,
        p_data: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z"]
    pub fn ImGui_DataTypeApplyOp(
        data_type: ImGuiDataType,
        op: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_void,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DataTypeApplyFromText@ImGui@@YA_NPEBDHPEAX01@Z"]
    pub fn ImGui_DataTypeApplyFromText(
        buf: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        p_data_when_empty: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DataTypeCompare@ImGui@@YAHHPEBX0@Z"]
    pub fn ImGui_DataTypeCompare(
        data_type: ImGuiDataType,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z"]
    pub fn ImGui_DataTypeClamp(
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DataTypeIsZero@ImGui@@YA_NHPEBX@Z"]
    pub fn ImGui_DataTypeIsZero(
        data_type: ImGuiDataType,
        p_data: *const ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z"]
    pub fn ImGui_InputTextEx(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        size_arg: *const ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?InputTextDeactivateHook@ImGui@@YAXI@Z"]
    pub fn ImGui_InputTextDeactivateHook(id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z"]
    pub fn ImGui_TempInputText(
        bb: *const ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z"]
    pub fn ImGui_TempInputScalar(
        bb: *const ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        p_clamp_min: *const ::std::os::raw::c_void,
        p_clamp_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetNextItemRefVal@ImGui@@YAXHPEAX@Z"]
    pub fn ImGui_SetNextItemRefVal(data_type: ImGuiDataType, p_data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z"]
    pub fn ImGui_ColorTooltip(
        text: *const ::std::os::raw::c_char,
        col: *const f32,
        flags: ImGuiColorEditFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z"]
    pub fn ImGui_ColorEditOptionsPopup(col: *const f32, flags: ImGuiColorEditFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z"]
    pub fn ImGui_ColorPickerOptionsPopup(ref_col: *const f32, flags: ImGuiColorEditFlags);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMAEBUImVec2@@@Z"]
    pub fn ImGui_PlotEx(
        plot_type: ImGuiPlotType,
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        size_arg: *const ImVec2,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z"]
    pub fn ImGui_ShadeVertsLinearColorGradientKeepAlpha(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        gradient_p0: ImVec2,
        gradient_p1: ImVec2,
        col0: ImU32,
        col1: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z"]
    pub fn ImGui_ShadeVertsLinearUV(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        clamp: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShadeVertsTransformPos@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@MM1@Z"]
    pub fn ImGui_ShadeVertsTransformPos(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        pivot_in: *const ImVec2,
        cos_a: f32,
        sin_a: f32,
        pivot_out: *const ImVec2,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?GcCompactTransientMiscBuffers@ImGui@@YAXXZ"]
    pub fn ImGui_GcCompactTransientMiscBuffers();
}
unsafe extern "C" {
    #[link_name = "\u{1}?GcCompactTransientWindowBuffers@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_GcCompactTransientWindowBuffers(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GcAwakeTransientWindowBuffers@ImGui@@YAXPEAUImGuiWindow@@@Z"]
    pub fn ImGui_GcAwakeTransientWindowBuffers(window: *mut ImGuiWindow);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ErrorLog@ImGui@@YA_NPEBD@Z"]
    pub fn ImGui_ErrorLog(msg: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ErrorRecoveryStoreState@ImGui@@YAXPEAUImGuiErrorRecoveryState@@@Z"]
    pub fn ImGui_ErrorRecoveryStoreState(state_out: *mut ImGuiErrorRecoveryState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ErrorRecoveryTryToRecoverState@ImGui@@YAXPEBUImGuiErrorRecoveryState@@@Z"]
    pub fn ImGui_ErrorRecoveryTryToRecoverState(state_in: *const ImGuiErrorRecoveryState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ErrorRecoveryTryToRecoverWindowState@ImGui@@YAXPEBUImGuiErrorRecoveryState@@@Z"]
    pub fn ImGui_ErrorRecoveryTryToRecoverWindowState(state_in: *const ImGuiErrorRecoveryState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ErrorCheckUsingSetCursorPosToExtendParentBoundaries@ImGui@@YAXXZ"]
    pub fn ImGui_ErrorCheckUsingSetCursorPosToExtendParentBoundaries();
}
unsafe extern "C" {
    #[link_name = "\u{1}?ErrorCheckEndFrameFinalizeErrorTooltip@ImGui@@YAXXZ"]
    pub fn ImGui_ErrorCheckEndFrameFinalizeErrorTooltip();
}
unsafe extern "C" {
    #[link_name = "\u{1}?BeginErrorTooltip@ImGui@@YA_NXZ"]
    pub fn ImGui_BeginErrorTooltip() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?EndErrorTooltip@ImGui@@YAXXZ"]
    pub fn ImGui_EndErrorTooltip();
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugAllocHook@ImGui@@YAXPEAUImGuiDebugAllocInfo@@HPEAX_K@Z"]
    pub fn ImGui_DebugAllocHook(
        info: *mut ImGuiDebugAllocInfo,
        frame_count: ::std::os::raw::c_int,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugDrawCursorPos@ImGui@@YAXI@Z"]
    pub fn ImGui_DebugDrawCursorPos(col: ImU32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugDrawLineExtents@ImGui@@YAXI@Z"]
    pub fn ImGui_DebugDrawLineExtents(col: ImU32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugDrawItemRect@ImGui@@YAXI@Z"]
    pub fn ImGui_DebugDrawItemRect(col: ImU32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugTextUnformattedWithLocateItem@ImGui@@YAXPEBD0@Z"]
    pub fn ImGui_DebugTextUnformattedWithLocateItem(
        line_begin: *const ::std::os::raw::c_char,
        line_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugLocateItem@ImGui@@YAXI@Z"]
    pub fn ImGui_DebugLocateItem(target_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugLocateItemOnHover@ImGui@@YAXI@Z"]
    pub fn ImGui_DebugLocateItemOnHover(target_id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugLocateItemResolveWithLastItem@ImGui@@YAXXZ"]
    pub fn ImGui_DebugLocateItemResolveWithLastItem();
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugBreakClearData@ImGui@@YAXXZ"]
    pub fn ImGui_DebugBreakClearData();
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugBreakButton@ImGui@@YA_NPEBD0@Z"]
    pub fn ImGui_DebugBreakButton(
        label: *const ::std::os::raw::c_char,
        description_of_location: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugBreakButtonTooltip@ImGui@@YAX_NPEBD@Z"]
    pub fn ImGui_DebugBreakButtonTooltip(
        keyboard_only: bool,
        description_of_location: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ShowFontAtlas@ImGui@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImGui_ShowFontAtlas(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugHookIdInfo@ImGui@@YAXIHPEBX0@Z"]
    pub fn ImGui_DebugHookIdInfo(
        id: ImGuiID,
        data_type: ImGuiDataType,
        data_id: *const ::std::os::raw::c_void,
        data_id_end: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeColumns@ImGui@@YAXPEAUImGuiOldColumns@@@Z"]
    pub fn ImGui_DebugNodeColumns(columns: *mut ImGuiOldColumns);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeDockNode@ImGui@@YAXPEAUImGuiDockNode@@PEBD@Z"]
    pub fn ImGui_DebugNodeDockNode(node: *mut ImGuiDockNode, label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeDrawList@ImGui@@YAXPEAUImGuiWindow@@PEAUImGuiViewportP@@PEBUImDrawList@@PEBD@Z"]
    pub fn ImGui_DebugNodeDrawList(
        window: *mut ImGuiWindow,
        viewport: *mut ImGuiViewportP,
        draw_list: *const ImDrawList,
        label: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeDrawCmdShowMeshAndBoundingBox@ImGui@@YAXPEAUImDrawList@@PEBU2@PEBUImDrawCmd@@_N3@Z"]
    pub fn ImGui_DebugNodeDrawCmdShowMeshAndBoundingBox(
        out_draw_list: *mut ImDrawList,
        draw_list: *const ImDrawList,
        draw_cmd: *const ImDrawCmd,
        show_mesh: bool,
        show_aabb: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeFont@ImGui@@YAXPEAUImFont@@@Z"]
    pub fn ImGui_DebugNodeFont(font: *mut ImFont);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeFontGlyphesForSrcMask@ImGui@@YAXPEAUImFont@@PEAUImFontBaked@@H@Z"]
    pub fn ImGui_DebugNodeFontGlyphesForSrcMask(
        font: *mut ImFont,
        baked: *mut ImFontBaked,
        src_mask: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeFontGlyph@ImGui@@YAXPEAUImFont@@PEBUImFontGlyph@@@Z"]
    pub fn ImGui_DebugNodeFontGlyph(font: *mut ImFont, glyph: *const ImFontGlyph);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeTexture@ImGui@@YAXPEAUImTextureData@@HPEBUImFontAtlasRect@@@Z"]
    pub fn ImGui_DebugNodeTexture(
        tex: *mut ImTextureData,
        int_id: ::std::os::raw::c_int,
        highlight_rect: *const ImFontAtlasRect,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeStorage@ImGui@@YAXPEAUImGuiStorage@@PEBD@Z"]
    pub fn ImGui_DebugNodeStorage(storage: *mut ImGuiStorage, label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeTabBar@ImGui@@YAXPEAUImGuiTabBar@@PEBD@Z"]
    pub fn ImGui_DebugNodeTabBar(tab_bar: *mut ImGuiTabBar, label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z"]
    pub fn ImGui_DebugNodeTable(table: *mut ImGuiTable);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeTableSettings@ImGui@@YAXPEAUImGuiTableSettings@@@Z"]
    pub fn ImGui_DebugNodeTableSettings(settings: *mut ImGuiTableSettings);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeInputTextState@ImGui@@YAXPEAUImGuiInputTextState@@@Z"]
    pub fn ImGui_DebugNodeInputTextState(state: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeTypingSelectState@ImGui@@YAXPEAUImGuiTypingSelectState@@@Z"]
    pub fn ImGui_DebugNodeTypingSelectState(state: *mut ImGuiTypingSelectState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeMultiSelectState@ImGui@@YAXPEAUImGuiMultiSelectState@@@Z"]
    pub fn ImGui_DebugNodeMultiSelectState(state: *mut ImGuiMultiSelectState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeWindow@ImGui@@YAXPEAUImGuiWindow@@PEBD@Z"]
    pub fn ImGui_DebugNodeWindow(window: *mut ImGuiWindow, label: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeWindowSettings@ImGui@@YAXPEAUImGuiWindowSettings@@@Z"]
    pub fn ImGui_DebugNodeWindowSettings(settings: *mut ImGuiWindowSettings);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeWindowsList@ImGui@@YAXPEAU?$ImVector@PEAUImGuiWindow@@@@PEBD@Z"]
    pub fn ImGui_DebugNodeWindowsList(
        windows: *mut ImVector<*mut ImGuiWindow>,
        label: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeWindowsListByBeginStackParent@ImGui@@YAXPEAPEAUImGuiWindow@@HPEAU2@@Z"]
    pub fn ImGui_DebugNodeWindowsListByBeginStackParent(
        windows: *mut *mut ImGuiWindow,
        windows_size: ::std::os::raw::c_int,
        parent_in_begin_stack: *mut ImGuiWindow,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodeViewport@ImGui@@YAXPEAUImGuiViewportP@@@Z"]
    pub fn ImGui_DebugNodeViewport(viewport: *mut ImGuiViewportP);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugNodePlatformMonitor@ImGui@@YAXPEAUImGuiPlatformMonitor@@PEBDH@Z"]
    pub fn ImGui_DebugNodePlatformMonitor(
        monitor: *mut ImGuiPlatformMonitor,
        label: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugRenderKeyboardPreview@ImGui@@YAXPEAUImDrawList@@@Z"]
    pub fn ImGui_DebugRenderKeyboardPreview(draw_list: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DebugRenderViewportThumbnail@ImGui@@YAXPEAUImDrawList@@PEAUImGuiViewportP@@AEBUImRect@@@Z"]
    pub fn ImGui_DebugRenderViewportThumbnail(
        draw_list: *mut ImDrawList,
        viewport: *mut ImGuiViewportP,
        bb: *const ImRect,
    );
}
pub const ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 131072;
pub const ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags_NoDocking: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 196608;
pub const ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 197120;
pub const ImGuiWindowFlags_DockNodeHost: ImGuiWindowFlags_ = 8388608;
pub const ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub type ImGuiWindowFlags_ = ::std::os::raw::c_int;
pub const ImGuiChildFlags_None: ImGuiChildFlags_ = 0;
pub const ImGuiChildFlags_Borders: ImGuiChildFlags_ = 1;
pub const ImGuiChildFlags_AlwaysUseWindowPadding: ImGuiChildFlags_ = 2;
pub const ImGuiChildFlags_ResizeX: ImGuiChildFlags_ = 4;
pub const ImGuiChildFlags_ResizeY: ImGuiChildFlags_ = 8;
pub const ImGuiChildFlags_AutoResizeX: ImGuiChildFlags_ = 16;
pub const ImGuiChildFlags_AutoResizeY: ImGuiChildFlags_ = 32;
pub const ImGuiChildFlags_AlwaysAutoResize: ImGuiChildFlags_ = 64;
pub const ImGuiChildFlags_FrameStyle: ImGuiChildFlags_ = 128;
pub const ImGuiChildFlags_NavFlattened: ImGuiChildFlags_ = 256;
pub type ImGuiChildFlags_ = ::std::os::raw::c_int;
pub const ImGuiItemFlags_None: ImGuiItemFlags_ = 0;
pub const ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = 1;
pub const ImGuiItemFlags_NoNav: ImGuiItemFlags_ = 2;
pub const ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = 4;
pub const ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = 8;
pub const ImGuiItemFlags_AutoClosePopups: ImGuiItemFlags_ = 16;
pub const ImGuiItemFlags_AllowDuplicateId: ImGuiItemFlags_ = 32;
pub type ImGuiItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags_EscapeClearsAll: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags_AlwaysOverwrite: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags_ParseEmptyRefVal: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags_DisplayEmptyRefVal: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags_ElideLeft: ImGuiInputTextFlags_ = 131072;
pub const ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ = 262144;
pub const ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 524288;
pub const ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 1048576;
pub const ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ = 2097152;
pub const ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 4194304;
pub const ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 8388608;
pub type ImGuiInputTextFlags_ = ::std::os::raw::c_int;
pub const ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags_AllowOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags_SpanLabelWidth: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags_SpanAllColumns: ImGuiTreeNodeFlags_ = 16384;
pub const ImGuiTreeNodeFlags_LabelSpanAllColumns: ImGuiTreeNodeFlags_ = 32768;
pub const ImGuiTreeNodeFlags_NavLeftJumpsToParent: ImGuiTreeNodeFlags_ = 131072;
pub const ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub const ImGuiTreeNodeFlags_DrawLinesNone: ImGuiTreeNodeFlags_ = 262144;
pub const ImGuiTreeNodeFlags_DrawLinesFull: ImGuiTreeNodeFlags_ = 524288;
pub const ImGuiTreeNodeFlags_DrawLinesToNodes: ImGuiTreeNodeFlags_ = 1048576;
pub type ImGuiTreeNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags_NoReopen: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 1024;
pub const ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 2048;
pub const ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 3072;
pub type ImGuiPopupFlags_ = ::std::os::raw::c_int;
pub const ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags_NoAutoClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags_AllowOverlap: ImGuiSelectableFlags_ = 16;
pub const ImGuiSelectableFlags_Highlight: ImGuiSelectableFlags_ = 32;
pub type ImGuiSelectableFlags_ = ::std::os::raw::c_int;
pub const ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags_WidthFitPreview: ImGuiComboFlags_ = 128;
pub const ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags_DrawSelectedOverline: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags_FittingPolicyMixed: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags_FittingPolicyShrink: ImGuiTabBarFlags_ = 256;
pub const ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 512;
pub const ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 896;
pub const ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 128;
pub type ImGuiTabBarFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub const ImGuiTabItemFlags_NoAssumedClosure: ImGuiTabItemFlags_ = 256;
pub type ImGuiTabItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags_NoPopupHierarchy: ImGuiFocusedFlags_ = 8;
pub const ImGuiFocusedFlags_DockHierarchy: ImGuiFocusedFlags_ = 16;
pub const ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::std::os::raw::c_int;
pub const ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags_NoPopupHierarchy: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags_DockHierarchy: ImGuiHoveredFlags_ = 16;
pub const ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ = 128;
pub const ImGuiHoveredFlags_AllowWhenOverlappedByItem: ImGuiHoveredFlags_ = 256;
pub const ImGuiHoveredFlags_AllowWhenOverlappedByWindow: ImGuiHoveredFlags_ = 512;
pub const ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 1024;
pub const ImGuiHoveredFlags_NoNavOverride: ImGuiHoveredFlags_ = 2048;
pub const ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 768;
pub const ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 928;
pub const ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub const ImGuiHoveredFlags_ForTooltip: ImGuiHoveredFlags_ = 4096;
pub const ImGuiHoveredFlags_Stationary: ImGuiHoveredFlags_ = 8192;
pub const ImGuiHoveredFlags_DelayNone: ImGuiHoveredFlags_ = 16384;
pub const ImGuiHoveredFlags_DelayShort: ImGuiHoveredFlags_ = 32768;
pub const ImGuiHoveredFlags_DelayNormal: ImGuiHoveredFlags_ = 65536;
pub const ImGuiHoveredFlags_NoSharedDelay: ImGuiHoveredFlags_ = 131072;
pub type ImGuiHoveredFlags_ = ::std::os::raw::c_int;
pub const ImGuiDockNodeFlags_None: ImGuiDockNodeFlags_ = 0;
pub const ImGuiDockNodeFlags_KeepAliveOnly: ImGuiDockNodeFlags_ = 1;
pub const ImGuiDockNodeFlags_NoDockingOverCentralNode: ImGuiDockNodeFlags_ = 4;
pub const ImGuiDockNodeFlags_PassthruCentralNode: ImGuiDockNodeFlags_ = 8;
pub const ImGuiDockNodeFlags_NoDockingSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags_NoResize: ImGuiDockNodeFlags_ = 32;
pub const ImGuiDockNodeFlags_AutoHideTabBar: ImGuiDockNodeFlags_ = 64;
pub const ImGuiDockNodeFlags_NoUndocking: ImGuiDockNodeFlags_ = 128;
pub type ImGuiDockNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags_PayloadAutoExpire: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags_PayloadNoCrossContext: ImGuiDragDropFlags_ = 64;
pub const ImGuiDragDropFlags_PayloadNoCrossProcess: ImGuiDragDropFlags_ = 128;
pub const ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ = 2048;
pub const ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub type ImGuiDragDropFlags_ = ::std::os::raw::c_int;
pub const ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType_Bool: ImGuiDataType_ = 10;
pub const ImGuiDataType_String: ImGuiDataType_ = 11;
pub const ImGuiDataType_COUNT: ImGuiDataType_ = 12;
pub type ImGuiDataType_ = ::std::os::raw::c_int;
pub const ImGuiDir_None: ImGuiDir = -1;
pub const ImGuiDir_Left: ImGuiDir = 0;
pub const ImGuiDir_Right: ImGuiDir = 1;
pub const ImGuiDir_Up: ImGuiDir = 2;
pub const ImGuiDir_Down: ImGuiDir = 3;
pub const ImGuiDir_COUNT: ImGuiDir = 4;
pub type ImGuiDir = ::std::os::raw::c_int;
pub const ImGuiSortDirection_None: ImGuiSortDirection = 0;
pub const ImGuiSortDirection_Ascending: ImGuiSortDirection = 1;
pub const ImGuiSortDirection_Descending: ImGuiSortDirection = 2;
pub type ImGuiSortDirection = ImU8;
pub const ImGuiKey_None: ImGuiKey = 0;
pub const ImGuiKey_NamedKey_BEGIN: ImGuiKey = 512;
pub const ImGuiKey_Tab: ImGuiKey = 512;
pub const ImGuiKey_LeftArrow: ImGuiKey = 513;
pub const ImGuiKey_RightArrow: ImGuiKey = 514;
pub const ImGuiKey_UpArrow: ImGuiKey = 515;
pub const ImGuiKey_DownArrow: ImGuiKey = 516;
pub const ImGuiKey_PageUp: ImGuiKey = 517;
pub const ImGuiKey_PageDown: ImGuiKey = 518;
pub const ImGuiKey_Home: ImGuiKey = 519;
pub const ImGuiKey_End: ImGuiKey = 520;
pub const ImGuiKey_Insert: ImGuiKey = 521;
pub const ImGuiKey_Delete: ImGuiKey = 522;
pub const ImGuiKey_Backspace: ImGuiKey = 523;
pub const ImGuiKey_Space: ImGuiKey = 524;
pub const ImGuiKey_Enter: ImGuiKey = 525;
pub const ImGuiKey_Escape: ImGuiKey = 526;
pub const ImGuiKey_LeftCtrl: ImGuiKey = 527;
pub const ImGuiKey_LeftShift: ImGuiKey = 528;
pub const ImGuiKey_LeftAlt: ImGuiKey = 529;
pub const ImGuiKey_LeftSuper: ImGuiKey = 530;
pub const ImGuiKey_RightCtrl: ImGuiKey = 531;
pub const ImGuiKey_RightShift: ImGuiKey = 532;
pub const ImGuiKey_RightAlt: ImGuiKey = 533;
pub const ImGuiKey_RightSuper: ImGuiKey = 534;
pub const ImGuiKey_Menu: ImGuiKey = 535;
pub const ImGuiKey_0: ImGuiKey = 536;
pub const ImGuiKey_1: ImGuiKey = 537;
pub const ImGuiKey_2: ImGuiKey = 538;
pub const ImGuiKey_3: ImGuiKey = 539;
pub const ImGuiKey_4: ImGuiKey = 540;
pub const ImGuiKey_5: ImGuiKey = 541;
pub const ImGuiKey_6: ImGuiKey = 542;
pub const ImGuiKey_7: ImGuiKey = 543;
pub const ImGuiKey_8: ImGuiKey = 544;
pub const ImGuiKey_9: ImGuiKey = 545;
pub const ImGuiKey_A: ImGuiKey = 546;
pub const ImGuiKey_B: ImGuiKey = 547;
pub const ImGuiKey_C: ImGuiKey = 548;
pub const ImGuiKey_D: ImGuiKey = 549;
pub const ImGuiKey_E: ImGuiKey = 550;
pub const ImGuiKey_F: ImGuiKey = 551;
pub const ImGuiKey_G: ImGuiKey = 552;
pub const ImGuiKey_H: ImGuiKey = 553;
pub const ImGuiKey_I: ImGuiKey = 554;
pub const ImGuiKey_J: ImGuiKey = 555;
pub const ImGuiKey_K: ImGuiKey = 556;
pub const ImGuiKey_L: ImGuiKey = 557;
pub const ImGuiKey_M: ImGuiKey = 558;
pub const ImGuiKey_N: ImGuiKey = 559;
pub const ImGuiKey_O: ImGuiKey = 560;
pub const ImGuiKey_P: ImGuiKey = 561;
pub const ImGuiKey_Q: ImGuiKey = 562;
pub const ImGuiKey_R: ImGuiKey = 563;
pub const ImGuiKey_S: ImGuiKey = 564;
pub const ImGuiKey_T: ImGuiKey = 565;
pub const ImGuiKey_U: ImGuiKey = 566;
pub const ImGuiKey_V: ImGuiKey = 567;
pub const ImGuiKey_W: ImGuiKey = 568;
pub const ImGuiKey_X: ImGuiKey = 569;
pub const ImGuiKey_Y: ImGuiKey = 570;
pub const ImGuiKey_Z: ImGuiKey = 571;
pub const ImGuiKey_F1: ImGuiKey = 572;
pub const ImGuiKey_F2: ImGuiKey = 573;
pub const ImGuiKey_F3: ImGuiKey = 574;
pub const ImGuiKey_F4: ImGuiKey = 575;
pub const ImGuiKey_F5: ImGuiKey = 576;
pub const ImGuiKey_F6: ImGuiKey = 577;
pub const ImGuiKey_F7: ImGuiKey = 578;
pub const ImGuiKey_F8: ImGuiKey = 579;
pub const ImGuiKey_F9: ImGuiKey = 580;
pub const ImGuiKey_F10: ImGuiKey = 581;
pub const ImGuiKey_F11: ImGuiKey = 582;
pub const ImGuiKey_F12: ImGuiKey = 583;
pub const ImGuiKey_F13: ImGuiKey = 584;
pub const ImGuiKey_F14: ImGuiKey = 585;
pub const ImGuiKey_F15: ImGuiKey = 586;
pub const ImGuiKey_F16: ImGuiKey = 587;
pub const ImGuiKey_F17: ImGuiKey = 588;
pub const ImGuiKey_F18: ImGuiKey = 589;
pub const ImGuiKey_F19: ImGuiKey = 590;
pub const ImGuiKey_F20: ImGuiKey = 591;
pub const ImGuiKey_F21: ImGuiKey = 592;
pub const ImGuiKey_F22: ImGuiKey = 593;
pub const ImGuiKey_F23: ImGuiKey = 594;
pub const ImGuiKey_F24: ImGuiKey = 595;
pub const ImGuiKey_Apostrophe: ImGuiKey = 596;
pub const ImGuiKey_Comma: ImGuiKey = 597;
pub const ImGuiKey_Minus: ImGuiKey = 598;
pub const ImGuiKey_Period: ImGuiKey = 599;
pub const ImGuiKey_Slash: ImGuiKey = 600;
pub const ImGuiKey_Semicolon: ImGuiKey = 601;
pub const ImGuiKey_Equal: ImGuiKey = 602;
pub const ImGuiKey_LeftBracket: ImGuiKey = 603;
pub const ImGuiKey_Backslash: ImGuiKey = 604;
pub const ImGuiKey_RightBracket: ImGuiKey = 605;
pub const ImGuiKey_GraveAccent: ImGuiKey = 606;
pub const ImGuiKey_CapsLock: ImGuiKey = 607;
pub const ImGuiKey_ScrollLock: ImGuiKey = 608;
pub const ImGuiKey_NumLock: ImGuiKey = 609;
pub const ImGuiKey_PrintScreen: ImGuiKey = 610;
pub const ImGuiKey_Pause: ImGuiKey = 611;
pub const ImGuiKey_Keypad0: ImGuiKey = 612;
pub const ImGuiKey_Keypad1: ImGuiKey = 613;
pub const ImGuiKey_Keypad2: ImGuiKey = 614;
pub const ImGuiKey_Keypad3: ImGuiKey = 615;
pub const ImGuiKey_Keypad4: ImGuiKey = 616;
pub const ImGuiKey_Keypad5: ImGuiKey = 617;
pub const ImGuiKey_Keypad6: ImGuiKey = 618;
pub const ImGuiKey_Keypad7: ImGuiKey = 619;
pub const ImGuiKey_Keypad8: ImGuiKey = 620;
pub const ImGuiKey_Keypad9: ImGuiKey = 621;
pub const ImGuiKey_KeypadDecimal: ImGuiKey = 622;
pub const ImGuiKey_KeypadDivide: ImGuiKey = 623;
pub const ImGuiKey_KeypadMultiply: ImGuiKey = 624;
pub const ImGuiKey_KeypadSubtract: ImGuiKey = 625;
pub const ImGuiKey_KeypadAdd: ImGuiKey = 626;
pub const ImGuiKey_KeypadEnter: ImGuiKey = 627;
pub const ImGuiKey_KeypadEqual: ImGuiKey = 628;
pub const ImGuiKey_AppBack: ImGuiKey = 629;
pub const ImGuiKey_AppForward: ImGuiKey = 630;
pub const ImGuiKey_Oem102: ImGuiKey = 631;
pub const ImGuiKey_GamepadStart: ImGuiKey = 632;
pub const ImGuiKey_GamepadBack: ImGuiKey = 633;
pub const ImGuiKey_GamepadFaceLeft: ImGuiKey = 634;
pub const ImGuiKey_GamepadFaceRight: ImGuiKey = 635;
pub const ImGuiKey_GamepadFaceUp: ImGuiKey = 636;
pub const ImGuiKey_GamepadFaceDown: ImGuiKey = 637;
pub const ImGuiKey_GamepadDpadLeft: ImGuiKey = 638;
pub const ImGuiKey_GamepadDpadRight: ImGuiKey = 639;
pub const ImGuiKey_GamepadDpadUp: ImGuiKey = 640;
pub const ImGuiKey_GamepadDpadDown: ImGuiKey = 641;
pub const ImGuiKey_GamepadL1: ImGuiKey = 642;
pub const ImGuiKey_GamepadR1: ImGuiKey = 643;
pub const ImGuiKey_GamepadL2: ImGuiKey = 644;
pub const ImGuiKey_GamepadR2: ImGuiKey = 645;
pub const ImGuiKey_GamepadL3: ImGuiKey = 646;
pub const ImGuiKey_GamepadR3: ImGuiKey = 647;
pub const ImGuiKey_GamepadLStickLeft: ImGuiKey = 648;
pub const ImGuiKey_GamepadLStickRight: ImGuiKey = 649;
pub const ImGuiKey_GamepadLStickUp: ImGuiKey = 650;
pub const ImGuiKey_GamepadLStickDown: ImGuiKey = 651;
pub const ImGuiKey_GamepadRStickLeft: ImGuiKey = 652;
pub const ImGuiKey_GamepadRStickRight: ImGuiKey = 653;
pub const ImGuiKey_GamepadRStickUp: ImGuiKey = 654;
pub const ImGuiKey_GamepadRStickDown: ImGuiKey = 655;
pub const ImGuiKey_MouseLeft: ImGuiKey = 656;
pub const ImGuiKey_MouseRight: ImGuiKey = 657;
pub const ImGuiKey_MouseMiddle: ImGuiKey = 658;
pub const ImGuiKey_MouseX1: ImGuiKey = 659;
pub const ImGuiKey_MouseX2: ImGuiKey = 660;
pub const ImGuiKey_MouseWheelX: ImGuiKey = 661;
pub const ImGuiKey_MouseWheelY: ImGuiKey = 662;
pub const ImGuiKey_ReservedForModCtrl: ImGuiKey = 663;
pub const ImGuiKey_ReservedForModShift: ImGuiKey = 664;
pub const ImGuiKey_ReservedForModAlt: ImGuiKey = 665;
pub const ImGuiKey_ReservedForModSuper: ImGuiKey = 666;
pub const ImGuiKey_NamedKey_END: ImGuiKey = 667;
pub const ImGuiKey_NamedKey_COUNT: ImGuiKey = 155;
pub const ImGuiMod_None: ImGuiKey = 0;
pub const ImGuiMod_Ctrl: ImGuiKey = 4096;
pub const ImGuiMod_Shift: ImGuiKey = 8192;
pub const ImGuiMod_Alt: ImGuiKey = 16384;
pub const ImGuiMod_Super: ImGuiKey = 32768;
pub const ImGuiMod_Mask_: ImGuiKey = 61440;
pub type ImGuiKey = ::std::os::raw::c_int;
pub const ImGuiInputFlags_None: ImGuiInputFlags_ = 0;
pub const ImGuiInputFlags_Repeat: ImGuiInputFlags_ = 1;
pub const ImGuiInputFlags_RouteActive: ImGuiInputFlags_ = 1024;
pub const ImGuiInputFlags_RouteFocused: ImGuiInputFlags_ = 2048;
pub const ImGuiInputFlags_RouteGlobal: ImGuiInputFlags_ = 4096;
pub const ImGuiInputFlags_RouteAlways: ImGuiInputFlags_ = 8192;
pub const ImGuiInputFlags_RouteOverFocused: ImGuiInputFlags_ = 16384;
pub const ImGuiInputFlags_RouteOverActive: ImGuiInputFlags_ = 32768;
pub const ImGuiInputFlags_RouteUnlessBgFocused: ImGuiInputFlags_ = 65536;
pub const ImGuiInputFlags_RouteFromRootWindow: ImGuiInputFlags_ = 131072;
pub const ImGuiInputFlags_Tooltip: ImGuiInputFlags_ = 262144;
pub type ImGuiInputFlags_ = ::std::os::raw::c_int;
pub const ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags_NoKeyboard: ImGuiConfigFlags_ = 64;
pub const ImGuiConfigFlags_DockingEnable: ImGuiConfigFlags_ = 128;
pub const ImGuiConfigFlags_ViewportsEnable: ImGuiConfigFlags_ = 1024;
pub const ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub type ImGuiConfigFlags_ = ::std::os::raw::c_int;
pub const ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub const ImGuiBackendFlags_RendererHasTextures: ImGuiBackendFlags_ = 16;
pub const ImGuiBackendFlags_PlatformHasViewports: ImGuiBackendFlags_ = 1024;
pub const ImGuiBackendFlags_HasMouseHoveredViewport: ImGuiBackendFlags_ = 2048;
pub const ImGuiBackendFlags_RendererHasViewports: ImGuiBackendFlags_ = 4096;
pub type ImGuiBackendFlags_ = ::std::os::raw::c_int;
pub const ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol_InputTextCursor: ImGuiCol_ = 33;
pub const ImGuiCol_TabHovered: ImGuiCol_ = 34;
pub const ImGuiCol_Tab: ImGuiCol_ = 35;
pub const ImGuiCol_TabSelected: ImGuiCol_ = 36;
pub const ImGuiCol_TabSelectedOverline: ImGuiCol_ = 37;
pub const ImGuiCol_TabDimmed: ImGuiCol_ = 38;
pub const ImGuiCol_TabDimmedSelected: ImGuiCol_ = 39;
pub const ImGuiCol_TabDimmedSelectedOverline: ImGuiCol_ = 40;
pub const ImGuiCol_DockingPreview: ImGuiCol_ = 41;
pub const ImGuiCol_DockingEmptyBg: ImGuiCol_ = 42;
pub const ImGuiCol_PlotLines: ImGuiCol_ = 43;
pub const ImGuiCol_PlotLinesHovered: ImGuiCol_ = 44;
pub const ImGuiCol_PlotHistogram: ImGuiCol_ = 45;
pub const ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 46;
pub const ImGuiCol_TableHeaderBg: ImGuiCol_ = 47;
pub const ImGuiCol_TableBorderStrong: ImGuiCol_ = 48;
pub const ImGuiCol_TableBorderLight: ImGuiCol_ = 49;
pub const ImGuiCol_TableRowBg: ImGuiCol_ = 50;
pub const ImGuiCol_TableRowBgAlt: ImGuiCol_ = 51;
pub const ImGuiCol_TextLink: ImGuiCol_ = 52;
pub const ImGuiCol_TextSelectedBg: ImGuiCol_ = 53;
pub const ImGuiCol_TreeLines: ImGuiCol_ = 54;
pub const ImGuiCol_DragDropTarget: ImGuiCol_ = 55;
pub const ImGuiCol_NavCursor: ImGuiCol_ = 56;
pub const ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 57;
pub const ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 58;
pub const ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 59;
pub const ImGuiCol_COUNT: ImGuiCol_ = 60;
pub type ImGuiCol_ = ::std::os::raw::c_int;
pub const ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar_DisabledAlpha: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar_CellPadding: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar_ScrollbarPadding: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar_ImageBorderSize: ImGuiStyleVar_ = 23;
pub const ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 24;
pub const ImGuiStyleVar_TabBorderSize: ImGuiStyleVar_ = 25;
pub const ImGuiStyleVar_TabMinWidthBase: ImGuiStyleVar_ = 26;
pub const ImGuiStyleVar_TabMinWidthShrink: ImGuiStyleVar_ = 27;
pub const ImGuiStyleVar_TabBarBorderSize: ImGuiStyleVar_ = 28;
pub const ImGuiStyleVar_TabBarOverlineSize: ImGuiStyleVar_ = 29;
pub const ImGuiStyleVar_TableAngledHeadersAngle: ImGuiStyleVar_ = 30;
pub const ImGuiStyleVar_TableAngledHeadersTextAlign: ImGuiStyleVar_ = 31;
pub const ImGuiStyleVar_TreeLinesSize: ImGuiStyleVar_ = 32;
pub const ImGuiStyleVar_TreeLinesRounding: ImGuiStyleVar_ = 33;
pub const ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 34;
pub const ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 35;
pub const ImGuiStyleVar_SeparatorTextBorderSize: ImGuiStyleVar_ = 36;
pub const ImGuiStyleVar_SeparatorTextAlign: ImGuiStyleVar_ = 37;
pub const ImGuiStyleVar_SeparatorTextPadding: ImGuiStyleVar_ = 38;
pub const ImGuiStyleVar_DockingSeparatorSize: ImGuiStyleVar_ = 39;
pub const ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 40;
pub type ImGuiStyleVar_ = ::std::os::raw::c_int;
pub const ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub const ImGuiButtonFlags_EnableNav: ImGuiButtonFlags_ = 8;
pub type ImGuiButtonFlags_ = ::std::os::raw::c_int;
pub const ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags_AlphaOpaque: ImGuiColorEditFlags_ = 2048;
pub const ImGuiColorEditFlags_AlphaNoBg: ImGuiColorEditFlags_ = 4096;
pub const ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 8192;
pub const ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags_DefaultOptions_: ImGuiColorEditFlags_ = 177209344;
pub const ImGuiColorEditFlags_AlphaMask_: ImGuiColorEditFlags_ = 14338;
pub const ImGuiColorEditFlags_DisplayMask_: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags_DataTypeMask_: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags_PickerMask_: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags_InputMask_: ImGuiColorEditFlags_ = 402653184;
pub type ImGuiColorEditFlags_ = ::std::os::raw::c_int;
pub const ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags_WrapAround: ImGuiSliderFlags_ = 256;
pub const ImGuiSliderFlags_ClampOnInput: ImGuiSliderFlags_ = 512;
pub const ImGuiSliderFlags_ClampZeroRange: ImGuiSliderFlags_ = 1024;
pub const ImGuiSliderFlags_NoSpeedTweaks: ImGuiSliderFlags_ = 2048;
pub const ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 1536;
pub const ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub type ImGuiSliderFlags_ = ::std::os::raw::c_int;
pub const ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::std::os::raw::c_int;
pub const ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor_Wait: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor_Progress: ImGuiMouseCursor_ = 9;
pub const ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 10;
pub const ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 11;
pub type ImGuiMouseCursor_ = ::std::os::raw::c_int;
pub const ImGuiMouseSource_Mouse: ImGuiMouseSource = 0;
pub const ImGuiMouseSource_TouchScreen: ImGuiMouseSource = 1;
pub const ImGuiMouseSource_Pen: ImGuiMouseSource = 2;
pub const ImGuiMouseSource_COUNT: ImGuiMouseSource = 3;
pub type ImGuiMouseSource = ::std::os::raw::c_int;
pub const ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::std::os::raw::c_int;
pub const ImGuiTableFlags_None: ImGuiTableFlags_ = 0;
pub const ImGuiTableFlags_Resizable: ImGuiTableFlags_ = 1;
pub const ImGuiTableFlags_Reorderable: ImGuiTableFlags_ = 2;
pub const ImGuiTableFlags_Hideable: ImGuiTableFlags_ = 4;
pub const ImGuiTableFlags_Sortable: ImGuiTableFlags_ = 8;
pub const ImGuiTableFlags_NoSavedSettings: ImGuiTableFlags_ = 16;
pub const ImGuiTableFlags_ContextMenuInBody: ImGuiTableFlags_ = 32;
pub const ImGuiTableFlags_RowBg: ImGuiTableFlags_ = 64;
pub const ImGuiTableFlags_BordersInnerH: ImGuiTableFlags_ = 128;
pub const ImGuiTableFlags_BordersOuterH: ImGuiTableFlags_ = 256;
pub const ImGuiTableFlags_BordersInnerV: ImGuiTableFlags_ = 512;
pub const ImGuiTableFlags_BordersOuterV: ImGuiTableFlags_ = 1024;
pub const ImGuiTableFlags_BordersH: ImGuiTableFlags_ = 384;
pub const ImGuiTableFlags_BordersV: ImGuiTableFlags_ = 1536;
pub const ImGuiTableFlags_BordersInner: ImGuiTableFlags_ = 640;
pub const ImGuiTableFlags_BordersOuter: ImGuiTableFlags_ = 1280;
pub const ImGuiTableFlags_Borders: ImGuiTableFlags_ = 1920;
pub const ImGuiTableFlags_NoBordersInBody: ImGuiTableFlags_ = 2048;
pub const ImGuiTableFlags_NoBordersInBodyUntilResize: ImGuiTableFlags_ = 4096;
pub const ImGuiTableFlags_SizingFixedFit: ImGuiTableFlags_ = 8192;
pub const ImGuiTableFlags_SizingFixedSame: ImGuiTableFlags_ = 16384;
pub const ImGuiTableFlags_SizingStretchProp: ImGuiTableFlags_ = 24576;
pub const ImGuiTableFlags_SizingStretchSame: ImGuiTableFlags_ = 32768;
pub const ImGuiTableFlags_NoHostExtendX: ImGuiTableFlags_ = 65536;
pub const ImGuiTableFlags_NoHostExtendY: ImGuiTableFlags_ = 131072;
pub const ImGuiTableFlags_NoKeepColumnsVisible: ImGuiTableFlags_ = 262144;
pub const ImGuiTableFlags_PreciseWidths: ImGuiTableFlags_ = 524288;
pub const ImGuiTableFlags_NoClip: ImGuiTableFlags_ = 1048576;
pub const ImGuiTableFlags_PadOuterX: ImGuiTableFlags_ = 2097152;
pub const ImGuiTableFlags_NoPadOuterX: ImGuiTableFlags_ = 4194304;
pub const ImGuiTableFlags_NoPadInnerX: ImGuiTableFlags_ = 8388608;
pub const ImGuiTableFlags_ScrollX: ImGuiTableFlags_ = 16777216;
pub const ImGuiTableFlags_ScrollY: ImGuiTableFlags_ = 33554432;
pub const ImGuiTableFlags_SortMulti: ImGuiTableFlags_ = 67108864;
pub const ImGuiTableFlags_SortTristate: ImGuiTableFlags_ = 134217728;
pub const ImGuiTableFlags_HighlightHoveredColumn: ImGuiTableFlags_ = 268435456;
pub const ImGuiTableFlags_SizingMask_: ImGuiTableFlags_ = 57344;
pub type ImGuiTableFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableColumnFlags_None: ImGuiTableColumnFlags_ = 0;
pub const ImGuiTableColumnFlags_Disabled: ImGuiTableColumnFlags_ = 1;
pub const ImGuiTableColumnFlags_DefaultHide: ImGuiTableColumnFlags_ = 2;
pub const ImGuiTableColumnFlags_DefaultSort: ImGuiTableColumnFlags_ = 4;
pub const ImGuiTableColumnFlags_WidthStretch: ImGuiTableColumnFlags_ = 8;
pub const ImGuiTableColumnFlags_WidthFixed: ImGuiTableColumnFlags_ = 16;
pub const ImGuiTableColumnFlags_NoResize: ImGuiTableColumnFlags_ = 32;
pub const ImGuiTableColumnFlags_NoReorder: ImGuiTableColumnFlags_ = 64;
pub const ImGuiTableColumnFlags_NoHide: ImGuiTableColumnFlags_ = 128;
pub const ImGuiTableColumnFlags_NoClip: ImGuiTableColumnFlags_ = 256;
pub const ImGuiTableColumnFlags_NoSort: ImGuiTableColumnFlags_ = 512;
pub const ImGuiTableColumnFlags_NoSortAscending: ImGuiTableColumnFlags_ = 1024;
pub const ImGuiTableColumnFlags_NoSortDescending: ImGuiTableColumnFlags_ = 2048;
pub const ImGuiTableColumnFlags_NoHeaderLabel: ImGuiTableColumnFlags_ = 4096;
pub const ImGuiTableColumnFlags_NoHeaderWidth: ImGuiTableColumnFlags_ = 8192;
pub const ImGuiTableColumnFlags_PreferSortAscending: ImGuiTableColumnFlags_ = 16384;
pub const ImGuiTableColumnFlags_PreferSortDescending: ImGuiTableColumnFlags_ = 32768;
pub const ImGuiTableColumnFlags_IndentEnable: ImGuiTableColumnFlags_ = 65536;
pub const ImGuiTableColumnFlags_IndentDisable: ImGuiTableColumnFlags_ = 131072;
pub const ImGuiTableColumnFlags_AngledHeader: ImGuiTableColumnFlags_ = 262144;
pub const ImGuiTableColumnFlags_IsEnabled: ImGuiTableColumnFlags_ = 16777216;
pub const ImGuiTableColumnFlags_IsVisible: ImGuiTableColumnFlags_ = 33554432;
pub const ImGuiTableColumnFlags_IsSorted: ImGuiTableColumnFlags_ = 67108864;
pub const ImGuiTableColumnFlags_IsHovered: ImGuiTableColumnFlags_ = 134217728;
pub const ImGuiTableColumnFlags_WidthMask_: ImGuiTableColumnFlags_ = 24;
pub const ImGuiTableColumnFlags_IndentMask_: ImGuiTableColumnFlags_ = 196608;
pub const ImGuiTableColumnFlags_StatusMask_: ImGuiTableColumnFlags_ = 251658240;
pub const ImGuiTableColumnFlags_NoDirectResize_: ImGuiTableColumnFlags_ = 1073741824;
pub type ImGuiTableColumnFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableRowFlags_None: ImGuiTableRowFlags_ = 0;
pub const ImGuiTableRowFlags_Headers: ImGuiTableRowFlags_ = 1;
pub type ImGuiTableRowFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableBgTarget_None: ImGuiTableBgTarget_ = 0;
pub const ImGuiTableBgTarget_RowBg0: ImGuiTableBgTarget_ = 1;
pub const ImGuiTableBgTarget_RowBg1: ImGuiTableBgTarget_ = 2;
pub const ImGuiTableBgTarget_CellBg: ImGuiTableBgTarget_ = 3;
pub type ImGuiTableBgTarget_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTableSortSpecs {
    pub Specs: *const ImGuiTableColumnSortSpecs,
    pub SpecsCount: ::std::os::raw::c_int,
    pub SpecsDirty: bool,
}
impl Default for ImGuiTableSortSpecs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTableColumnSortSpecs {
    pub ColumnUserID: ImGuiID,
    pub ColumnIndex: ImS16,
    pub SortOrder: ImS16,
    pub SortDirection: ImGuiSortDirection,
}
impl Default for ImGuiTableColumnSortSpecs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImNewWrapper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImVector<T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut T,
}
pub type ImVector_value_type<T> = T;
pub type ImVector_iterator<T> = *mut ImVector_value_type<T>;
pub type ImVector_const_iterator<T> = *const ImVector_value_type<T>;
impl<T> Default for ImVector<T> {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiStyle {
    pub FontSizeBase: f32,
    pub FontScaleMain: f32,
    pub FontScaleDpi: f32,
    pub Alpha: f32,
    pub DisabledAlpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowBorderHoverPadding: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub CellPadding: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub ScrollbarPadding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub ImageBorderSize: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabMinWidthBase: f32,
    pub TabMinWidthShrink: f32,
    pub TabCloseButtonMinWidthSelected: f32,
    pub TabCloseButtonMinWidthUnselected: f32,
    pub TabBarBorderSize: f32,
    pub TabBarOverlineSize: f32,
    pub TableAngledHeadersAngle: f32,
    pub TableAngledHeadersTextAlign: ImVec2,
    pub TreeLinesFlags: ImGuiTreeNodeFlags,
    pub TreeLinesSize: f32,
    pub TreeLinesRounding: f32,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub SeparatorTextBorderSize: f32,
    pub SeparatorTextAlign: ImVec2,
    pub SeparatorTextPadding: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub DockingSeparatorSize: f32,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleTessellationMaxError: f32,
    pub Colors: [ImVec4; 60usize],
    pub HoverStationaryDelay: f32,
    pub HoverDelayShort: f32,
    pub HoverDelayNormal: f32,
    pub HoverFlagsForTooltipMouse: ImGuiHoveredFlags,
    pub HoverFlagsForTooltipNav: ImGuiHoveredFlags,
    pub _MainScale: f32,
    pub _NextFrameFontSizeBase: f32,
}
unsafe extern "C" {
    #[link_name = "\u{1}?ScaleAllSizes@ImGuiStyle@@QEAAXM@Z"]
    pub fn ImGuiStyle_ScaleAllSizes(this: *mut ImGuiStyle, scale_factor: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiStyle@@QEAA@XZ"]
    pub fn ImGuiStyle_ImGuiStyle(this: *mut ImGuiStyle);
}
impl Default for ImGuiStyle {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiStyle {
    #[inline]
    pub unsafe fn ScaleAllSizes(&mut self, scale_factor: f32) {
        ImGuiStyle_ScaleAllSizes(self, scale_factor)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiStyle_ImGuiStyle(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiKeyData {
    pub Down: bool,
    pub DownDuration: f32,
    pub DownDurationPrev: f32,
    pub AnalogValue: f32,
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiIO {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DisplayFramebufferScale: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::std::os::raw::c_char,
    pub LogFilename: *const ::std::os::raw::c_char,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontDefault: *mut ImFont,
    pub FontAllowUserScaling: bool,
    pub ConfigNavSwapGamepadButtons: bool,
    pub ConfigNavMoveSetMousePos: bool,
    pub ConfigNavCaptureKeyboard: bool,
    pub ConfigNavEscapeClearFocusItem: bool,
    pub ConfigNavEscapeClearFocusWindow: bool,
    pub ConfigNavCursorVisibleAuto: bool,
    pub ConfigNavCursorVisibleAlways: bool,
    pub ConfigDockingNoSplit: bool,
    pub ConfigDockingWithShift: bool,
    pub ConfigDockingAlwaysTabBar: bool,
    pub ConfigDockingTransparentPayload: bool,
    pub ConfigViewportsNoAutoMerge: bool,
    pub ConfigViewportsNoTaskBarIcon: bool,
    pub ConfigViewportsNoDecoration: bool,
    pub ConfigViewportsNoDefaultParent: bool,
    pub ConfigViewportPlatformFocusSetsImGuiFocus: bool,
    pub ConfigDpiScaleFonts: bool,
    pub ConfigDpiScaleViewports: bool,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigInputTrickleEventQueue: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigInputTextEnterKeepActive: bool,
    pub ConfigDragClickToInputText: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigWindowsCopyContentsWithCtrlC: bool,
    pub ConfigScrollbarScrollByPage: bool,
    pub ConfigMemoryCompactTimer: f32,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub ConfigErrorRecovery: bool,
    pub ConfigErrorRecoveryEnableAssert: bool,
    pub ConfigErrorRecoveryEnableDebugLog: bool,
    pub ConfigErrorRecoveryEnableTooltip: bool,
    pub ConfigDebugIsDebuggerPresent: bool,
    pub ConfigDebugHighlightIdConflicts: bool,
    pub ConfigDebugHighlightIdConflictsShowItemPicker: bool,
    pub ConfigDebugBeginReturnValueOnce: bool,
    pub ConfigDebugBeginReturnValueLoop: bool,
    pub ConfigDebugIgnoreFocusLoss: bool,
    pub ConfigDebugIniSettings: bool,
    pub BackendPlatformName: *const ::std::os::raw::c_char,
    pub BackendRendererName: *const ::std::os::raw::c_char,
    pub BackendPlatformUserData: *mut ::std::os::raw::c_void,
    pub BackendRendererUserData: *mut ::std::os::raw::c_void,
    pub BackendLanguageUserData: *mut ::std::os::raw::c_void,
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::std::os::raw::c_int,
    pub MetricsRenderIndices: ::std::os::raw::c_int,
    pub MetricsRenderWindows: ::std::os::raw::c_int,
    pub MetricsActiveWindows: ::std::os::raw::c_int,
    pub MouseDelta: ImVec2,
    pub Ctx: *mut ImGuiContext,
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub MouseSource: ImGuiMouseSource,
    pub MouseHoveredViewport: ImGuiID,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub KeyMods: ImGuiKeyChord,
    pub KeysData: [ImGuiKeyData; 155usize],
    pub WantCaptureMouseUnlessPopupClose: bool,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseClickedCount: [ImU16; 5usize],
    pub MouseClickedLastCount: [ImU16; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseReleasedTime: [f64; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownOwnedUnlessPopupClose: [bool; 5usize],
    pub MouseWheelRequestAxisSwap: bool,
    pub MouseCtrlLeftAsRightClick: bool,
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub PenPressure: f32,
    pub AppFocusLost: bool,
    pub AppAcceptingEvents: bool,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector<ImWchar>,
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddKeyEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_N@Z"]
    pub fn ImGuiIO_AddKeyEvent(this: *mut ImGuiIO, key: ImGuiKey, down: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddKeyAnalogEvent@ImGuiIO@@QEAAXW4ImGuiKey@@_NM@Z"]
    pub fn ImGuiIO_AddKeyAnalogEvent(this: *mut ImGuiIO, key: ImGuiKey, down: bool, v: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddMousePosEvent@ImGuiIO@@QEAAXMM@Z"]
    pub fn ImGuiIO_AddMousePosEvent(this: *mut ImGuiIO, x: f32, y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddMouseButtonEvent@ImGuiIO@@QEAAXH_N@Z"]
    pub fn ImGuiIO_AddMouseButtonEvent(
        this: *mut ImGuiIO,
        button: ::std::os::raw::c_int,
        down: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddMouseWheelEvent@ImGuiIO@@QEAAXMM@Z"]
    pub fn ImGuiIO_AddMouseWheelEvent(this: *mut ImGuiIO, wheel_x: f32, wheel_y: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddMouseSourceEvent@ImGuiIO@@QEAAXW4ImGuiMouseSource@@@Z"]
    pub fn ImGuiIO_AddMouseSourceEvent(this: *mut ImGuiIO, source: ImGuiMouseSource);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddMouseViewportEvent@ImGuiIO@@QEAAXI@Z"]
    pub fn ImGuiIO_AddMouseViewportEvent(this: *mut ImGuiIO, id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddFocusEvent@ImGuiIO@@QEAAX_N@Z"]
    pub fn ImGuiIO_AddFocusEvent(this: *mut ImGuiIO, focused: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddInputCharacter@ImGuiIO@@QEAAXI@Z"]
    pub fn ImGuiIO_AddInputCharacter(this: *mut ImGuiIO, c: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddInputCharacterUTF16@ImGuiIO@@QEAAXG@Z"]
    pub fn ImGuiIO_AddInputCharacterUTF16(this: *mut ImGuiIO, c: ImWchar16);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddInputCharactersUTF8@ImGuiIO@@QEAAXPEBD@Z"]
    pub fn ImGuiIO_AddInputCharactersUTF8(this: *mut ImGuiIO, str_: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetKeyEventNativeData@ImGuiIO@@QEAAXW4ImGuiKey@@HHH@Z"]
    pub fn ImGuiIO_SetKeyEventNativeData(
        this: *mut ImGuiIO,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetAppAcceptingEvents@ImGuiIO@@QEAAX_N@Z"]
    pub fn ImGuiIO_SetAppAcceptingEvents(this: *mut ImGuiIO, accepting_events: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearEventsQueue@ImGuiIO@@QEAAXXZ"]
    pub fn ImGuiIO_ClearEventsQueue(this: *mut ImGuiIO);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearInputKeys@ImGuiIO@@QEAAXXZ"]
    pub fn ImGuiIO_ClearInputKeys(this: *mut ImGuiIO);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearInputMouse@ImGuiIO@@QEAAXXZ"]
    pub fn ImGuiIO_ClearInputMouse(this: *mut ImGuiIO);
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiIO@@QEAA@XZ"]
    pub fn ImGuiIO_ImGuiIO(this: *mut ImGuiIO);
}
impl Default for ImGuiIO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiIO {
    #[inline]
    pub unsafe fn AddKeyEvent(&mut self, key: ImGuiKey, down: bool) {
        ImGuiIO_AddKeyEvent(self, key, down)
    }
    #[inline]
    pub unsafe fn AddKeyAnalogEvent(&mut self, key: ImGuiKey, down: bool, v: f32) {
        ImGuiIO_AddKeyAnalogEvent(self, key, down, v)
    }
    #[inline]
    pub unsafe fn AddMousePosEvent(&mut self, x: f32, y: f32) {
        ImGuiIO_AddMousePosEvent(self, x, y)
    }
    #[inline]
    pub unsafe fn AddMouseButtonEvent(&mut self, button: ::std::os::raw::c_int, down: bool) {
        ImGuiIO_AddMouseButtonEvent(self, button, down)
    }
    #[inline]
    pub unsafe fn AddMouseWheelEvent(&mut self, wheel_x: f32, wheel_y: f32) {
        ImGuiIO_AddMouseWheelEvent(self, wheel_x, wheel_y)
    }
    #[inline]
    pub unsafe fn AddMouseSourceEvent(&mut self, source: ImGuiMouseSource) {
        ImGuiIO_AddMouseSourceEvent(self, source)
    }
    #[inline]
    pub unsafe fn AddMouseViewportEvent(&mut self, id: ImGuiID) {
        ImGuiIO_AddMouseViewportEvent(self, id)
    }
    #[inline]
    pub unsafe fn AddFocusEvent(&mut self, focused: bool) {
        ImGuiIO_AddFocusEvent(self, focused)
    }
    #[inline]
    pub unsafe fn AddInputCharacter(&mut self, c: ::std::os::raw::c_uint) {
        ImGuiIO_AddInputCharacter(self, c)
    }
    #[inline]
    pub unsafe fn AddInputCharacterUTF16(&mut self, c: ImWchar16) {
        ImGuiIO_AddInputCharacterUTF16(self, c)
    }
    #[inline]
    pub unsafe fn AddInputCharactersUTF8(&mut self, str_: *const ::std::os::raw::c_char) {
        ImGuiIO_AddInputCharactersUTF8(self, str_)
    }
    #[inline]
    pub unsafe fn SetKeyEventNativeData(
        &mut self,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    ) {
        ImGuiIO_SetKeyEventNativeData(
            self,
            key,
            native_keycode,
            native_scancode,
            native_legacy_index,
        )
    }
    #[inline]
    pub unsafe fn SetAppAcceptingEvents(&mut self, accepting_events: bool) {
        ImGuiIO_SetAppAcceptingEvents(self, accepting_events)
    }
    #[inline]
    pub unsafe fn ClearEventsQueue(&mut self) {
        ImGuiIO_ClearEventsQueue(self)
    }
    #[inline]
    pub unsafe fn ClearInputKeys(&mut self) {
        ImGuiIO_ClearInputKeys(self)
    }
    #[inline]
    pub unsafe fn ClearInputMouse(&mut self) {
        ImGuiIO_ClearInputMouse(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiIO_ImGuiIO(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputTextCallbackData {
    pub Ctx: *mut ImGuiContext,
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::std::os::raw::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::std::os::raw::c_char,
    pub BufTextLen: ::std::os::raw::c_int,
    pub BufSize: ::std::os::raw::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::std::os::raw::c_int,
    pub SelectionStart: ::std::os::raw::c_int,
    pub SelectionEnd: ::std::os::raw::c_int,
}
unsafe extern "C" {
    #[link_name = "\u{1}?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z"]
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        this: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z"]
    pub fn ImGuiInputTextCallbackData_InsertChars(
        this: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiInputTextCallbackData@@QEAA@XZ"]
    pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(
        this: *mut ImGuiInputTextCallbackData,
    );
}
impl Default for ImGuiInputTextCallbackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiInputTextCallbackData {
    #[inline]
    pub unsafe fn DeleteChars(
        &mut self,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    ) {
        ImGuiInputTextCallbackData_DeleteChars(self, pos, bytes_count)
    }
    #[inline]
    pub unsafe fn InsertChars(
        &mut self,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImGuiInputTextCallbackData_InsertChars(self, pos, text, text_end)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
impl Default for ImGuiSizeCallbackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiWindowClass {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub FocusRouteParentWindowId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiPayload {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
impl Default for ImGuiPayload {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiOnceUponAFrame {
    pub RefFrame: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImGuiTextFilter {
    pub InputBuf: [::std::os::raw::c_char; 256usize],
    pub Filters: ImVector<ImGuiTextFilter_ImGuiTextRange>,
    pub CountGrep: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTextFilter_ImGuiTextRange {
    pub b: *const ::std::os::raw::c_char,
    pub e: *const ::std::os::raw::c_char,
}
unsafe extern "C" {
    #[link_name = "\u{1}?split@ImGuiTextRange@ImGuiTextFilter@@QEBAXDPEAU?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@@Z"]
    pub fn ImGuiTextFilter_ImGuiTextRange_split(
        this: *const ImGuiTextFilter_ImGuiTextRange,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector<ImGuiTextFilter_ImGuiTextRange>,
    );
}
impl Default for ImGuiTextFilter_ImGuiTextRange {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiTextFilter_ImGuiTextRange {
    #[inline]
    pub unsafe fn split(
        &self,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector<ImGuiTextFilter_ImGuiTextRange>,
    ) {
        ImGuiTextFilter_ImGuiTextRange_split(self, separator, out)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z"]
    pub fn ImGuiTextFilter_Draw(
        this: *mut ImGuiTextFilter,
        label: *const ::std::os::raw::c_char,
        width: f32,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z"]
    pub fn ImGuiTextFilter_PassFilter(
        this: *const ImGuiTextFilter,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?Build@ImGuiTextFilter@@QEAAXXZ"]
    pub fn ImGuiTextFilter_Build(this: *mut ImGuiTextFilter);
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiTextFilter@@QEAA@PEBD@Z"]
    pub fn ImGuiTextFilter_ImGuiTextFilter(
        this: *mut ImGuiTextFilter,
        default_filter: *const ::std::os::raw::c_char,
    );
}
impl Default for ImGuiTextFilter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiTextFilter {
    #[inline]
    pub unsafe fn Draw(&mut self, label: *const ::std::os::raw::c_char, width: f32) -> bool {
        ImGuiTextFilter_Draw(self, label, width)
    }
    #[inline]
    pub unsafe fn PassFilter(
        &self,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool {
        ImGuiTextFilter_PassFilter(self, text, text_end)
    }
    #[inline]
    pub unsafe fn Build(&mut self) {
        ImGuiTextFilter_Build(self)
    }
    #[inline]
    pub unsafe fn new(default_filter: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiTextFilter_ImGuiTextFilter(__bindgen_tmp.as_mut_ptr(), default_filter);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector<::std::os::raw::c_char>,
}
unsafe extern "C" {
    #[link_name = "\u{1}?EmptyString@ImGuiTextBuffer@@2PADA"]
    pub static mut ImGuiTextBuffer_EmptyString: [::std::os::raw::c_char; 1usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}?append@ImGuiTextBuffer@@QEAAXPEBD0@Z"]
    pub fn ImGuiTextBuffer_append(
        this: *mut ImGuiTextBuffer,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ"]
    pub fn ImGuiTextBuffer_appendf(
        this: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?appendfv@ImGuiTextBuffer@@QEAAXPEBDPEAD@Z"]
    pub fn ImGuiTextBuffer_appendfv(
        this: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
impl Default for ImGuiTextBuffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiTextBuffer {
    #[inline]
    pub unsafe fn append(
        &mut self,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) {
        ImGuiTextBuffer_append(self, str_, str_end)
    }
    #[inline]
    pub unsafe fn appendfv(&mut self, fmt: *const ::std::os::raw::c_char, args: va_list) {
        ImGuiTextBuffer_appendfv(self, fmt, args)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
}
impl Default for ImGuiStoragePair__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ImGuiStoragePair {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiStorage {
    pub Data: ImVector<ImGuiStoragePair>,
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetInt@ImGuiStorage@@QEBAHIH@Z"]
    pub fn ImGuiStorage_GetInt(
        this: *const ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetInt@ImGuiStorage@@QEAAXIH@Z"]
    pub fn ImGuiStorage_SetInt(this: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetBool@ImGuiStorage@@QEBA_NI_N@Z"]
    pub fn ImGuiStorage_GetBool(this: *const ImGuiStorage, key: ImGuiID, default_val: bool)
    -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetBool@ImGuiStorage@@QEAAXI_N@Z"]
    pub fn ImGuiStorage_SetBool(this: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetFloat@ImGuiStorage@@QEBAMIM@Z"]
    pub fn ImGuiStorage_GetFloat(this: *const ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetFloat@ImGuiStorage@@QEAAXIM@Z"]
    pub fn ImGuiStorage_SetFloat(this: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetVoidPtr@ImGuiStorage@@QEBAPEAXI@Z"]
    pub fn ImGuiStorage_GetVoidPtr(
        this: *const ImGuiStorage,
        key: ImGuiID,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetVoidPtr@ImGuiStorage@@QEAAXIPEAX@Z"]
    pub fn ImGuiStorage_SetVoidPtr(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        val: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z"]
    pub fn ImGuiStorage_GetIntRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetBoolRef@ImGuiStorage@@QEAAPEA_NI_N@Z"]
    pub fn ImGuiStorage_GetBoolRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> *mut bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetFloatRef@ImGuiStorage@@QEAAPEAMIM@Z"]
    pub fn ImGuiStorage_GetFloatRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: f32,
    ) -> *mut f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetVoidPtrRef@ImGuiStorage@@QEAAPEAPEAXIPEAX@Z"]
    pub fn ImGuiStorage_GetVoidPtrRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}?BuildSortByKey@ImGuiStorage@@QEAAXXZ"]
    pub fn ImGuiStorage_BuildSortByKey(this: *mut ImGuiStorage);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetAllInt@ImGuiStorage@@QEAAXH@Z"]
    pub fn ImGuiStorage_SetAllInt(this: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}
impl Default for ImGuiStorage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiStorage {
    #[inline]
    pub unsafe fn GetInt(
        &self,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        ImGuiStorage_GetInt(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetInt(&mut self, key: ImGuiID, val: ::std::os::raw::c_int) {
        ImGuiStorage_SetInt(self, key, val)
    }
    #[inline]
    pub unsafe fn GetBool(&self, key: ImGuiID, default_val: bool) -> bool {
        ImGuiStorage_GetBool(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetBool(&mut self, key: ImGuiID, val: bool) {
        ImGuiStorage_SetBool(self, key, val)
    }
    #[inline]
    pub unsafe fn GetFloat(&self, key: ImGuiID, default_val: f32) -> f32 {
        ImGuiStorage_GetFloat(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetFloat(&mut self, key: ImGuiID, val: f32) {
        ImGuiStorage_SetFloat(self, key, val)
    }
    #[inline]
    pub unsafe fn GetVoidPtr(&self, key: ImGuiID) -> *mut ::std::os::raw::c_void {
        ImGuiStorage_GetVoidPtr(self, key)
    }
    #[inline]
    pub unsafe fn SetVoidPtr(&mut self, key: ImGuiID, val: *mut ::std::os::raw::c_void) {
        ImGuiStorage_SetVoidPtr(self, key, val)
    }
    #[inline]
    pub unsafe fn GetIntRef(
        &mut self,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int {
        ImGuiStorage_GetIntRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetBoolRef(&mut self, key: ImGuiID, default_val: bool) -> *mut bool {
        ImGuiStorage_GetBoolRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetFloatRef(&mut self, key: ImGuiID, default_val: f32) -> *mut f32 {
        ImGuiStorage_GetFloatRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetVoidPtrRef(
        &mut self,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void {
        ImGuiStorage_GetVoidPtrRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn BuildSortByKey(&mut self) {
        ImGuiStorage_BuildSortByKey(self)
    }
    #[inline]
    pub unsafe fn SetAllInt(&mut self, val: ::std::os::raw::c_int) {
        ImGuiStorage_SetAllInt(self, val)
    }
}
pub const ImGuiListClipperFlags_None: ImGuiListClipperFlags_ = 0;
pub const ImGuiListClipperFlags_NoSetTableRowCounters: ImGuiListClipperFlags_ = 1;
pub type ImGuiListClipperFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiListClipper {
    pub Ctx: *mut ImGuiContext,
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f64,
    pub StartSeekOffsetY: f64,
    pub TempData: *mut ::std::os::raw::c_void,
    pub Flags: ImGuiListClipperFlags,
}
unsafe extern "C" {
    #[link_name = "\u{1}?Begin@ImGuiListClipper@@QEAAXHM@Z"]
    pub fn ImGuiListClipper_Begin(
        this: *mut ImGuiListClipper,
        items_count: ::std::os::raw::c_int,
        items_height: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?End@ImGuiListClipper@@QEAAXXZ"]
    pub fn ImGuiListClipper_End(this: *mut ImGuiListClipper);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Step@ImGuiListClipper@@QEAA_NXZ"]
    pub fn ImGuiListClipper_Step(this: *mut ImGuiListClipper) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IncludeItemsByIndex@ImGuiListClipper@@QEAAXHH@Z"]
    pub fn ImGuiListClipper_IncludeItemsByIndex(
        this: *mut ImGuiListClipper,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SeekCursorForItem@ImGuiListClipper@@QEAAXH@Z"]
    pub fn ImGuiListClipper_SeekCursorForItem(
        this: *mut ImGuiListClipper,
        item_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiListClipper@@QEAA@XZ"]
    pub fn ImGuiListClipper_ImGuiListClipper(this: *mut ImGuiListClipper);
}
unsafe extern "C" {
    #[link_name = "\u{1}??1ImGuiListClipper@@QEAA@XZ"]
    pub fn ImGuiListClipper_ImGuiListClipper_destructor(this: *mut ImGuiListClipper);
}
impl Default for ImGuiListClipper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiListClipper {
    #[inline]
    pub unsafe fn Begin(&mut self, items_count: ::std::os::raw::c_int, items_height: f32) {
        ImGuiListClipper_Begin(self, items_count, items_height)
    }
    #[inline]
    pub unsafe fn End(&mut self) {
        ImGuiListClipper_End(self)
    }
    #[inline]
    pub unsafe fn Step(&mut self) -> bool {
        ImGuiListClipper_Step(self)
    }
    #[inline]
    pub unsafe fn IncludeItemsByIndex(
        &mut self,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    ) {
        ImGuiListClipper_IncludeItemsByIndex(self, item_begin, item_end)
    }
    #[inline]
    pub unsafe fn SeekCursorForItem(&mut self, item_index: ::std::os::raw::c_int) {
        ImGuiListClipper_SeekCursorForItem(self, item_index)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiListClipper_ImGuiListClipper(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiListClipper_ImGuiListClipper_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImColor {
    pub Value: ImVec4,
}
pub const ImGuiMultiSelectFlags_None: ImGuiMultiSelectFlags_ = 0;
pub const ImGuiMultiSelectFlags_SingleSelect: ImGuiMultiSelectFlags_ = 1;
pub const ImGuiMultiSelectFlags_NoSelectAll: ImGuiMultiSelectFlags_ = 2;
pub const ImGuiMultiSelectFlags_NoRangeSelect: ImGuiMultiSelectFlags_ = 4;
pub const ImGuiMultiSelectFlags_NoAutoSelect: ImGuiMultiSelectFlags_ = 8;
pub const ImGuiMultiSelectFlags_NoAutoClear: ImGuiMultiSelectFlags_ = 16;
pub const ImGuiMultiSelectFlags_NoAutoClearOnReselect: ImGuiMultiSelectFlags_ = 32;
pub const ImGuiMultiSelectFlags_BoxSelect1d: ImGuiMultiSelectFlags_ = 64;
pub const ImGuiMultiSelectFlags_BoxSelect2d: ImGuiMultiSelectFlags_ = 128;
pub const ImGuiMultiSelectFlags_BoxSelectNoScroll: ImGuiMultiSelectFlags_ = 256;
pub const ImGuiMultiSelectFlags_ClearOnEscape: ImGuiMultiSelectFlags_ = 512;
pub const ImGuiMultiSelectFlags_ClearOnClickVoid: ImGuiMultiSelectFlags_ = 1024;
pub const ImGuiMultiSelectFlags_ScopeWindow: ImGuiMultiSelectFlags_ = 2048;
pub const ImGuiMultiSelectFlags_ScopeRect: ImGuiMultiSelectFlags_ = 4096;
pub const ImGuiMultiSelectFlags_SelectOnClick: ImGuiMultiSelectFlags_ = 8192;
pub const ImGuiMultiSelectFlags_SelectOnClickRelease: ImGuiMultiSelectFlags_ = 16384;
pub const ImGuiMultiSelectFlags_NavWrapX: ImGuiMultiSelectFlags_ = 65536;
pub type ImGuiMultiSelectFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImGuiMultiSelectIO {
    pub Requests: ImVector<ImGuiSelectionRequest>,
    pub RangeSrcItem: ImGuiSelectionUserData,
    pub NavIdItem: ImGuiSelectionUserData,
    pub NavIdSelected: bool,
    pub RangeSrcReset: bool,
    pub ItemsCount: ::std::os::raw::c_int,
}
impl Default for ImGuiMultiSelectIO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiSelectionRequestType_None: ImGuiSelectionRequestType = 0;
pub const ImGuiSelectionRequestType_SetAll: ImGuiSelectionRequestType = 1;
pub const ImGuiSelectionRequestType_SetRange: ImGuiSelectionRequestType = 2;
pub type ImGuiSelectionRequestType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiSelectionRequest {
    pub Type: ImGuiSelectionRequestType,
    pub Selected: bool,
    pub RangeDirection: ImS8,
    pub RangeFirstItem: ImGuiSelectionUserData,
    pub RangeLastItem: ImGuiSelectionUserData,
}
impl Default for ImGuiSelectionRequest {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiSelectionBasicStorage {
    pub Size: ::std::os::raw::c_int,
    pub PreserveOrder: bool,
    pub UserData: *mut ::std::os::raw::c_void,
    pub AdapterIndexToStorageId: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ImGuiSelectionBasicStorage,
            idx: ::std::os::raw::c_int,
        ) -> ImGuiID,
    >,
    pub _SelectionOrder: ::std::os::raw::c_int,
    pub _Storage: ImGuiStorage,
}
unsafe extern "C" {
    #[link_name = "\u{1}?ApplyRequests@ImGuiSelectionBasicStorage@@QEAAXPEAUImGuiMultiSelectIO@@@Z"]
    pub fn ImGuiSelectionBasicStorage_ApplyRequests(
        this: *mut ImGuiSelectionBasicStorage,
        ms_io: *mut ImGuiMultiSelectIO,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?Contains@ImGuiSelectionBasicStorage@@QEBA_NI@Z"]
    pub fn ImGuiSelectionBasicStorage_Contains(
        this: *const ImGuiSelectionBasicStorage,
        id: ImGuiID,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?Clear@ImGuiSelectionBasicStorage@@QEAAXXZ"]
    pub fn ImGuiSelectionBasicStorage_Clear(this: *mut ImGuiSelectionBasicStorage);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Swap@ImGuiSelectionBasicStorage@@QEAAXAEAU1@@Z"]
    pub fn ImGuiSelectionBasicStorage_Swap(
        this: *mut ImGuiSelectionBasicStorage,
        r: *mut ImGuiSelectionBasicStorage,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetItemSelected@ImGuiSelectionBasicStorage@@QEAAXI_N@Z"]
    pub fn ImGuiSelectionBasicStorage_SetItemSelected(
        this: *mut ImGuiSelectionBasicStorage,
        id: ImGuiID,
        selected: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetNextSelectedItem@ImGuiSelectionBasicStorage@@QEAA_NPEAPEAXPEAI@Z"]
    pub fn ImGuiSelectionBasicStorage_GetNextSelectedItem(
        this: *mut ImGuiSelectionBasicStorage,
        opaque_it: *mut *mut ::std::os::raw::c_void,
        out_id: *mut ImGuiID,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiSelectionBasicStorage@@QEAA@XZ"]
    pub fn ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage(
        this: *mut ImGuiSelectionBasicStorage,
    );
}
impl Default for ImGuiSelectionBasicStorage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiSelectionBasicStorage {
    #[inline]
    pub unsafe fn ApplyRequests(&mut self, ms_io: *mut ImGuiMultiSelectIO) {
        ImGuiSelectionBasicStorage_ApplyRequests(self, ms_io)
    }
    #[inline]
    pub unsafe fn Contains(&self, id: ImGuiID) -> bool {
        ImGuiSelectionBasicStorage_Contains(self, id)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImGuiSelectionBasicStorage_Clear(self)
    }
    #[inline]
    pub unsafe fn Swap(&mut self, r: *mut ImGuiSelectionBasicStorage) {
        ImGuiSelectionBasicStorage_Swap(self, r)
    }
    #[inline]
    pub unsafe fn SetItemSelected(&mut self, id: ImGuiID, selected: bool) {
        ImGuiSelectionBasicStorage_SetItemSelected(self, id, selected)
    }
    #[inline]
    pub unsafe fn GetNextSelectedItem(
        &mut self,
        opaque_it: *mut *mut ::std::os::raw::c_void,
        out_id: *mut ImGuiID,
    ) -> bool {
        ImGuiSelectionBasicStorage_GetNextSelectedItem(self, opaque_it, out_id)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiSelectionExternalStorage {
    pub UserData: *mut ::std::os::raw::c_void,
    pub AdapterSetItemSelected: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ImGuiSelectionExternalStorage,
            idx: ::std::os::raw::c_int,
            selected: bool,
        ),
    >,
}
unsafe extern "C" {
    #[link_name = "\u{1}?ApplyRequests@ImGuiSelectionExternalStorage@@QEAAXPEAUImGuiMultiSelectIO@@@Z"]
    pub fn ImGuiSelectionExternalStorage_ApplyRequests(
        this: *mut ImGuiSelectionExternalStorage,
        ms_io: *mut ImGuiMultiSelectIO,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiSelectionExternalStorage@@QEAA@XZ"]
    pub fn ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage(
        this: *mut ImGuiSelectionExternalStorage,
    );
}
impl Default for ImGuiSelectionExternalStorage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiSelectionExternalStorage {
    #[inline]
    pub unsafe fn ApplyRequests(&mut self, ms_io: *mut ImGuiMultiSelectIO) {
        ImGuiSelectionExternalStorage_ApplyRequests(self, ms_io)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
pub type ImDrawIdx = ::std::os::raw::c_ushort;
pub type ImDrawCallback = ::std::option::Option<
    unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TexRef: ImTextureRef,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
    pub UserCallbackDataSize: ::std::os::raw::c_int,
    pub UserCallbackDataOffset: ::std::os::raw::c_int,
}
impl Default for ImDrawCmd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImDrawCmdHeader {
    pub ClipRect: ImVec4,
    pub TexRef: ImTextureRef,
    pub VtxOffset: ::std::os::raw::c_uint,
}
impl Default for ImDrawCmdHeader {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector<ImDrawCmd>,
    pub _IdxBuffer: ImVector<ImDrawIdx>,
}
impl Default for ImDrawChannel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImDrawListSplitter {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector<ImDrawChannel>,
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ"]
    pub fn ImDrawListSplitter_ClearFreeMemory(this: *mut ImDrawListSplitter);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z"]
    pub fn ImDrawListSplitter_Split(
        this: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z"]
    pub fn ImDrawListSplitter_Merge(this: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z"]
    pub fn ImDrawListSplitter_SetCurrentChannel(
        this: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    );
}
impl Default for ImDrawListSplitter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImDrawListSplitter {
    #[inline]
    pub unsafe fn ClearFreeMemory(&mut self) {
        ImDrawListSplitter_ClearFreeMemory(self)
    }
    #[inline]
    pub unsafe fn Split(&mut self, draw_list: *mut ImDrawList, count: ::std::os::raw::c_int) {
        ImDrawListSplitter_Split(self, draw_list, count)
    }
    #[inline]
    pub unsafe fn Merge(&mut self, draw_list: *mut ImDrawList) {
        ImDrawListSplitter_Merge(self, draw_list)
    }
    #[inline]
    pub unsafe fn SetCurrentChannel(
        &mut self,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    ) {
        ImDrawListSplitter_SetCurrentChannel(self, draw_list, channel_idx)
    }
}
pub const ImDrawFlags_None: ImDrawFlags_ = 0;
pub const ImDrawFlags_Closed: ImDrawFlags_ = 1;
pub const ImDrawFlags_RoundCornersTopLeft: ImDrawFlags_ = 16;
pub const ImDrawFlags_RoundCornersTopRight: ImDrawFlags_ = 32;
pub const ImDrawFlags_RoundCornersBottomLeft: ImDrawFlags_ = 64;
pub const ImDrawFlags_RoundCornersBottomRight: ImDrawFlags_ = 128;
pub const ImDrawFlags_RoundCornersNone: ImDrawFlags_ = 256;
pub const ImDrawFlags_RoundCornersTop: ImDrawFlags_ = 48;
pub const ImDrawFlags_RoundCornersBottom: ImDrawFlags_ = 192;
pub const ImDrawFlags_RoundCornersLeft: ImDrawFlags_ = 80;
pub const ImDrawFlags_RoundCornersRight: ImDrawFlags_ = 160;
pub const ImDrawFlags_RoundCornersAll: ImDrawFlags_ = 240;
pub const ImDrawFlags_RoundCornersDefault_: ImDrawFlags_ = 240;
pub const ImDrawFlags_RoundCornersMask_: ImDrawFlags_ = 496;
pub type ImDrawFlags_ = ::std::os::raw::c_int;
pub const ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImDrawList {
    pub CmdBuffer: ImVector<ImDrawCmd>,
    pub IdxBuffer: ImVector<ImDrawIdx>,
    pub VtxBuffer: ImVector<ImDrawVert>,
    pub Flags: ImDrawListFlags,
    pub _VtxCurrentIdx: ::std::os::raw::c_uint,
    pub _Data: *mut ImDrawListSharedData,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _Path: ImVector<ImVec2>,
    pub _CmdHeader: ImDrawCmdHeader,
    pub _Splitter: ImDrawListSplitter,
    pub _ClipRectStack: ImVector<ImVec4>,
    pub _TextureStack: ImVector<ImTextureRef>,
    pub _CallbacksDataBuf: ImVector<ImU8>,
    pub _FringeScale: f32,
    pub _OwnerName: *const ::std::os::raw::c_char,
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushClipRect@ImDrawList@@QEAAXAEBUImVec2@@0_N@Z"]
    pub fn ImDrawList_PushClipRect(
        this: *mut ImDrawList,
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushClipRectFullScreen@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_PushClipRectFullScreen(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopClipRect@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_PopClipRect(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PushTexture@ImDrawList@@QEAAXUImTextureRef@@@Z"]
    pub fn ImDrawList_PushTexture(this: *mut ImDrawList, tex_ref: ImTextureRef);
}
unsafe extern "C" {
    #[link_name = "\u{1}?PopTexture@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_PopTexture(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z"]
    pub fn ImDrawList_AddLine(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z"]
    pub fn ImDrawList_AddRect(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z"]
    pub fn ImDrawList_AddRectFilled(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z"]
    pub fn ImDrawList_AddRectFilledMultiColor(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z"]
    pub fn ImDrawList_AddQuad(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z"]
    pub fn ImDrawList_AddQuadFilled(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z"]
    pub fn ImDrawList_AddTriangle(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z"]
    pub fn ImDrawList_AddTriangleFilled(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z"]
    pub fn ImDrawList_AddCircle(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z"]
    pub fn ImDrawList_AddCircleFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z"]
    pub fn ImDrawList_AddNgon(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z"]
    pub fn ImDrawList_AddNgonFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddEllipse@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z"]
    pub fn ImDrawList_AddEllipse(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddEllipseFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z"]
    pub fn ImDrawList_AddEllipseFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z"]
    pub fn ImDrawList_AddText(
        this: *mut ImDrawList,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddText@ImDrawList@@QEAAXPEAUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z"]
    pub fn ImDrawList_AddText1(
        this: *mut ImDrawList,
        font: *mut ImFont,
        font_size: f32,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z"]
    pub fn ImDrawList_AddBezierCubic(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z"]
    pub fn ImDrawList_AddBezierQuadratic(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z"]
    pub fn ImDrawList_AddPolyline(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z"]
    pub fn ImDrawList_AddConvexPolyFilled(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddConcavePolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z"]
    pub fn ImDrawList_AddConcavePolyFilled(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddImage@ImDrawList@@QEAAXUImTextureRef@@AEBUImVec2@@111I@Z"]
    pub fn ImDrawList_AddImage(
        this: *mut ImDrawList,
        tex_ref: ImTextureRef,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddImageQuad@ImDrawList@@QEAAXUImTextureRef@@AEBUImVec2@@1111111I@Z"]
    pub fn ImDrawList_AddImageQuad(
        this: *mut ImDrawList,
        tex_ref: ImTextureRef,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        uv1: *const ImVec2,
        uv2: *const ImVec2,
        uv3: *const ImVec2,
        uv4: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddImageRounded@ImDrawList@@QEAAXUImTextureRef@@AEBUImVec2@@111IMH@Z"]
    pub fn ImDrawList_AddImageRounded(
        this: *mut ImDrawList,
        tex_ref: ImTextureRef,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z"]
    pub fn ImDrawList_PathArcTo(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z"]
    pub fn ImDrawList_PathArcToFast(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PathEllipticalArcTo@ImDrawList@@QEAAXAEBUImVec2@@0MMMH@Z"]
    pub fn ImDrawList_PathEllipticalArcTo(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        rot: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z"]
    pub fn ImDrawList_PathBezierCubicCurveTo(
        this: *mut ImDrawList,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z"]
    pub fn ImDrawList_PathBezierQuadraticCurveTo(
        this: *mut ImDrawList,
        p2: *const ImVec2,
        p3: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z"]
    pub fn ImDrawList_PathRect(
        this: *mut ImDrawList,
        rect_min: *const ImVec2,
        rect_max: *const ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX_K@Z"]
    pub fn ImDrawList_AddCallback(
        this: *mut ImDrawList,
        callback: ImDrawCallback,
        userdata: *mut ::std::os::raw::c_void,
        userdata_size: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddDrawCmd@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList_AddDrawCmd(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?CloneOutput@ImDrawList@@QEBAPEAU1@XZ"]
    pub fn ImDrawList_CloneOutput(this: *const ImDrawList) -> *mut ImDrawList;
}
unsafe extern "C" {
    #[link_name = "\u{1}?PrimReserve@ImDrawList@@QEAAXHH@Z"]
    pub fn ImDrawList_PrimReserve(
        this: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PrimUnreserve@ImDrawList@@QEAAXHH@Z"]
    pub fn ImDrawList_PrimUnreserve(
        this: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z"]
    pub fn ImDrawList_PrimRect(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z"]
    pub fn ImDrawList_PrimRectUV(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z"]
    pub fn ImDrawList_PrimQuadUV(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        d: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        uv_c: *const ImVec2,
        uv_d: *const ImVec2,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?_SetDrawListSharedData@ImDrawList@@QEAAXPEAUImDrawListSharedData@@@Z"]
    pub fn ImDrawList__SetDrawListSharedData(
        this: *mut ImDrawList,
        data: *mut ImDrawListSharedData,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?_ResetForNewFrame@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__ResetForNewFrame(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?_ClearFreeMemory@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__ClearFreeMemory(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__PopUnusedDrawCmd(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__TryMergeDrawCmds(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?_OnChangedClipRect@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__OnChangedClipRect(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?_OnChangedTexture@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__OnChangedTexture(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ"]
    pub fn ImDrawList__OnChangedVtxOffset(this: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?_SetTexture@ImDrawList@@QEAAXUImTextureRef@@@Z"]
    pub fn ImDrawList__SetTexture(this: *mut ImDrawList, tex_ref: ImTextureRef);
}
unsafe extern "C" {
    #[link_name = "\u{1}?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z"]
    pub fn ImDrawList__CalcCircleAutoSegmentCount(
        this: *const ImDrawList,
        radius: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z"]
    pub fn ImDrawList__PathArcToFastEx(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z"]
    pub fn ImDrawList__PathArcToN(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImDrawList@@QEAA@PEAUImDrawListSharedData@@@Z"]
    pub fn ImDrawList_ImDrawList(this: *mut ImDrawList, shared_data: *mut ImDrawListSharedData);
}
unsafe extern "C" {
    #[link_name = "\u{1}??1ImDrawList@@QEAA@XZ"]
    pub fn ImDrawList_ImDrawList_destructor(this: *mut ImDrawList);
}
impl Default for ImDrawList {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImDrawList {
    #[inline]
    pub unsafe fn PushClipRect(
        &mut self,
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    ) {
        ImDrawList_PushClipRect(
            self,
            clip_rect_min,
            clip_rect_max,
            intersect_with_current_clip_rect,
        )
    }
    #[inline]
    pub unsafe fn PushClipRectFullScreen(&mut self) {
        ImDrawList_PushClipRectFullScreen(self)
    }
    #[inline]
    pub unsafe fn PopClipRect(&mut self) {
        ImDrawList_PopClipRect(self)
    }
    #[inline]
    pub unsafe fn PushTexture(&mut self, tex_ref: ImTextureRef) {
        ImDrawList_PushTexture(self, tex_ref)
    }
    #[inline]
    pub unsafe fn PopTexture(&mut self) {
        ImDrawList_PopTexture(self)
    }
    #[inline]
    pub unsafe fn AddLine(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddLine(self, p1, p2, col, thickness)
    }
    #[inline]
    pub unsafe fn AddRect(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    ) {
        ImDrawList_AddRect(self, p_min, p_max, col, rounding, flags, thickness)
    }
    #[inline]
    pub unsafe fn AddRectFilled(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_AddRectFilled(self, p_min, p_max, col, rounding, flags)
    }
    #[inline]
    pub unsafe fn AddRectFilledMultiColor(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    ) {
        ImDrawList_AddRectFilledMultiColor(
            self,
            p_min,
            p_max,
            col_upr_left,
            col_upr_right,
            col_bot_right,
            col_bot_left,
        )
    }
    #[inline]
    pub unsafe fn AddQuad(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddQuad(self, p1, p2, p3, p4, col, thickness)
    }
    #[inline]
    pub unsafe fn AddQuadFilled(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddQuadFilled(self, p1, p2, p3, p4, col)
    }
    #[inline]
    pub unsafe fn AddTriangle(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddTriangle(self, p1, p2, p3, col, thickness)
    }
    #[inline]
    pub unsafe fn AddTriangleFilled(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddTriangleFilled(self, p1, p2, p3, col)
    }
    #[inline]
    pub unsafe fn AddCircle(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddCircle(self, center, radius, col, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddCircleFilled(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddCircleFilled(self, center, radius, col, num_segments)
    }
    #[inline]
    pub unsafe fn AddNgon(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddNgon(self, center, radius, col, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddNgonFilled(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddNgonFilled(self, center, radius, col, num_segments)
    }
    #[inline]
    pub unsafe fn AddEllipse(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddEllipse(self, center, radius, col, rot, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddEllipseFilled(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddEllipseFilled(self, center, radius, col, rot, num_segments)
    }
    #[inline]
    pub unsafe fn AddText(
        &mut self,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImDrawList_AddText(self, pos, col, text_begin, text_end)
    }
    #[inline]
    pub unsafe fn AddText1(
        &mut self,
        font: *mut ImFont,
        font_size: f32,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    ) {
        ImDrawList_AddText1(
            self,
            font,
            font_size,
            pos,
            col,
            text_begin,
            text_end,
            wrap_width,
            cpu_fine_clip_rect,
        )
    }
    #[inline]
    pub unsafe fn AddBezierCubic(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddBezierCubic(self, p1, p2, p3, p4, col, thickness, num_segments)
    }
    #[inline]
    pub unsafe fn AddBezierQuadratic(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddBezierQuadratic(self, p1, p2, p3, col, thickness, num_segments)
    }
    #[inline]
    pub unsafe fn AddPolyline(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    ) {
        ImDrawList_AddPolyline(self, points, num_points, col, flags, thickness)
    }
    #[inline]
    pub unsafe fn AddConvexPolyFilled(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    ) {
        ImDrawList_AddConvexPolyFilled(self, points, num_points, col)
    }
    #[inline]
    pub unsafe fn AddConcavePolyFilled(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    ) {
        ImDrawList_AddConcavePolyFilled(self, points, num_points, col)
    }
    #[inline]
    pub unsafe fn AddImage(
        &mut self,
        tex_ref: ImTextureRef,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddImage(self, tex_ref, p_min, p_max, uv_min, uv_max, col)
    }
    #[inline]
    pub unsafe fn AddImageQuad(
        &mut self,
        tex_ref: ImTextureRef,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        uv1: *const ImVec2,
        uv2: *const ImVec2,
        uv3: *const ImVec2,
        uv4: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddImageQuad(self, tex_ref, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col)
    }
    #[inline]
    pub unsafe fn AddImageRounded(
        &mut self,
        tex_ref: ImTextureRef,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_AddImageRounded(
            self, tex_ref, p_min, p_max, uv_min, uv_max, col, rounding, flags,
        )
    }
    #[inline]
    pub unsafe fn PathArcTo(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathArcTo(self, center, radius, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn PathArcToFast(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathArcToFast(self, center, radius, a_min_of_12, a_max_of_12)
    }
    #[inline]
    pub unsafe fn PathEllipticalArcTo(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        rot: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathEllipticalArcTo(self, center, radius, rot, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn PathBezierCubicCurveTo(
        &mut self,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathBezierCubicCurveTo(self, p2, p3, p4, num_segments)
    }
    #[inline]
    pub unsafe fn PathBezierQuadraticCurveTo(
        &mut self,
        p2: *const ImVec2,
        p3: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathBezierQuadraticCurveTo(self, p2, p3, num_segments)
    }
    #[inline]
    pub unsafe fn PathRect(
        &mut self,
        rect_min: *const ImVec2,
        rect_max: *const ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_PathRect(self, rect_min, rect_max, rounding, flags)
    }
    #[inline]
    pub unsafe fn AddCallback(
        &mut self,
        callback: ImDrawCallback,
        userdata: *mut ::std::os::raw::c_void,
        userdata_size: usize,
    ) {
        ImDrawList_AddCallback(self, callback, userdata, userdata_size)
    }
    #[inline]
    pub unsafe fn AddDrawCmd(&mut self) {
        ImDrawList_AddDrawCmd(self)
    }
    #[inline]
    pub unsafe fn CloneOutput(&self) -> *mut ImDrawList {
        ImDrawList_CloneOutput(self)
    }
    #[inline]
    pub unsafe fn PrimReserve(
        &mut self,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    ) {
        ImDrawList_PrimReserve(self, idx_count, vtx_count)
    }
    #[inline]
    pub unsafe fn PrimUnreserve(
        &mut self,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    ) {
        ImDrawList_PrimUnreserve(self, idx_count, vtx_count)
    }
    #[inline]
    pub unsafe fn PrimRect(&mut self, a: *const ImVec2, b: *const ImVec2, col: ImU32) {
        ImDrawList_PrimRect(self, a, b, col)
    }
    #[inline]
    pub unsafe fn PrimRectUV(
        &mut self,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_PrimRectUV(self, a, b, uv_a, uv_b, col)
    }
    #[inline]
    pub unsafe fn PrimQuadUV(
        &mut self,
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        d: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        uv_c: *const ImVec2,
        uv_d: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_PrimQuadUV(self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col)
    }
    #[inline]
    pub unsafe fn _SetDrawListSharedData(&mut self, data: *mut ImDrawListSharedData) {
        ImDrawList__SetDrawListSharedData(self, data)
    }
    #[inline]
    pub unsafe fn _ResetForNewFrame(&mut self) {
        ImDrawList__ResetForNewFrame(self)
    }
    #[inline]
    pub unsafe fn _ClearFreeMemory(&mut self) {
        ImDrawList__ClearFreeMemory(self)
    }
    #[inline]
    pub unsafe fn _PopUnusedDrawCmd(&mut self) {
        ImDrawList__PopUnusedDrawCmd(self)
    }
    #[inline]
    pub unsafe fn _TryMergeDrawCmds(&mut self) {
        ImDrawList__TryMergeDrawCmds(self)
    }
    #[inline]
    pub unsafe fn _OnChangedClipRect(&mut self) {
        ImDrawList__OnChangedClipRect(self)
    }
    #[inline]
    pub unsafe fn _OnChangedTexture(&mut self) {
        ImDrawList__OnChangedTexture(self)
    }
    #[inline]
    pub unsafe fn _OnChangedVtxOffset(&mut self) {
        ImDrawList__OnChangedVtxOffset(self)
    }
    #[inline]
    pub unsafe fn _SetTexture(&mut self, tex_ref: ImTextureRef) {
        ImDrawList__SetTexture(self, tex_ref)
    }
    #[inline]
    pub unsafe fn _CalcCircleAutoSegmentCount(&self, radius: f32) -> ::std::os::raw::c_int {
        ImDrawList__CalcCircleAutoSegmentCount(self, radius)
    }
    #[inline]
    pub unsafe fn _PathArcToFastEx(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    ) {
        ImDrawList__PathArcToFastEx(self, center, radius, a_min_sample, a_max_sample, a_step)
    }
    #[inline]
    pub unsafe fn _PathArcToN(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList__PathArcToN(self, center, radius, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn new(shared_data: *mut ImDrawListSharedData) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImDrawList_ImDrawList(__bindgen_tmp.as_mut_ptr(), shared_data);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImDrawList_ImDrawList_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImDrawData {
    pub Valid: bool,
    pub CmdListsCount: ::std::os::raw::c_int,
    pub TotalIdxCount: ::std::os::raw::c_int,
    pub TotalVtxCount: ::std::os::raw::c_int,
    pub CmdLists: ImVector<*mut ImDrawList>,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
    pub OwnerViewport: *mut ImGuiViewport,
    pub Textures: *mut ImVector<*mut ImTextureData>,
}
unsafe extern "C" {
    #[link_name = "\u{1}?Clear@ImDrawData@@QEAAXXZ"]
    pub fn ImDrawData_Clear(this: *mut ImDrawData);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddDrawList@ImDrawData@@QEAAXPEAUImDrawList@@@Z"]
    pub fn ImDrawData_AddDrawList(this: *mut ImDrawData, draw_list: *mut ImDrawList);
}
unsafe extern "C" {
    #[link_name = "\u{1}?DeIndexAllBuffers@ImDrawData@@QEAAXXZ"]
    pub fn ImDrawData_DeIndexAllBuffers(this: *mut ImDrawData);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z"]
    pub fn ImDrawData_ScaleClipRects(this: *mut ImDrawData, fb_scale: *const ImVec2);
}
impl Default for ImDrawData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImDrawData {
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImDrawData_Clear(self)
    }
    #[inline]
    pub unsafe fn AddDrawList(&mut self, draw_list: *mut ImDrawList) {
        ImDrawData_AddDrawList(self, draw_list)
    }
    #[inline]
    pub unsafe fn DeIndexAllBuffers(&mut self) {
        ImDrawData_DeIndexAllBuffers(self)
    }
    #[inline]
    pub unsafe fn ScaleClipRects(&mut self, fb_scale: *const ImVec2) {
        ImDrawData_ScaleClipRects(self, fb_scale)
    }
}
pub const ImTextureFormat_RGBA32: ImTextureFormat = 0;
pub const ImTextureFormat_Alpha8: ImTextureFormat = 1;
pub type ImTextureFormat = ::std::os::raw::c_int;
pub const ImTextureStatus_OK: ImTextureStatus = 0;
pub const ImTextureStatus_Destroyed: ImTextureStatus = 1;
pub const ImTextureStatus_WantCreate: ImTextureStatus = 2;
pub const ImTextureStatus_WantUpdates: ImTextureStatus = 3;
pub const ImTextureStatus_WantDestroy: ImTextureStatus = 4;
pub type ImTextureStatus = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImTextureRect {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImTextureData {
    pub UniqueID: ::std::os::raw::c_int,
    pub Status: ImTextureStatus,
    pub BackendUserData: *mut ::std::os::raw::c_void,
    pub TexID: ImTextureID,
    pub Format: ImTextureFormat,
    pub Width: ::std::os::raw::c_int,
    pub Height: ::std::os::raw::c_int,
    pub BytesPerPixel: ::std::os::raw::c_int,
    pub Pixels: *mut ::std::os::raw::c_uchar,
    pub UsedRect: ImTextureRect,
    pub UpdateRect: ImTextureRect,
    pub Updates: ImVector<ImTextureRect>,
    pub UnusedFrames: ::std::os::raw::c_int,
    pub RefCount: ::std::os::raw::c_ushort,
    pub UseColors: bool,
    pub WantDestroyNextFrame: bool,
}
unsafe extern "C" {
    #[link_name = "\u{1}?Create@ImTextureData@@QEAAXW4ImTextureFormat@@HH@Z"]
    pub fn ImTextureData_Create(
        this: *mut ImTextureData,
        format: ImTextureFormat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DestroyPixels@ImTextureData@@QEAAXXZ"]
    pub fn ImTextureData_DestroyPixels(this: *mut ImTextureData);
}
impl Default for ImTextureData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImTextureData {
    #[inline]
    pub unsafe fn Create(
        &mut self,
        format: ImTextureFormat,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        ImTextureData_Create(self, format, w, h)
    }
    #[inline]
    pub unsafe fn DestroyPixels(&mut self) {
        ImTextureData_DestroyPixels(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImFontConfig {
    pub Name: [::std::os::raw::c_char; 40usize],
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub MergeMode: bool,
    pub PixelSnapH: bool,
    pub PixelSnapV: bool,
    pub OversampleH: ImS8,
    pub OversampleV: ImS8,
    pub EllipsisChar: ImWchar,
    pub SizePixels: f32,
    pub GlyphRanges: *const ImWchar,
    pub GlyphExcludeRanges: *const ImWchar,
    pub GlyphOffset: ImVec2,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub GlyphExtraAdvanceX: f32,
    pub FontNo: ImU32,
    pub FontLoaderFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub RasterizerDensity: f32,
    pub Flags: ImFontFlags,
    pub DstFont: *mut ImFont,
    pub FontLoader: *const ImFontLoader,
    pub FontLoaderData: *mut ::std::os::raw::c_void,
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImFontConfig@@QEAA@XZ"]
    pub fn ImFontConfig_ImFontConfig(this: *mut ImFontConfig);
}
impl Default for ImFontConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImFontConfig {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontConfig_ImFontConfig(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImFontGlyph {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
    pub PackId: ::std::os::raw::c_int,
}
impl ImFontGlyph {
    #[inline]
    pub fn Colored(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Colored(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Colored_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Colored_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Visible_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Visible_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SourceIdx(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_SourceIdx(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SourceIdx_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SourceIdx_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Codepoint_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                26u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Codepoint_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                26u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Colored: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
        SourceIdx: ::std::os::raw::c_uint,
        Codepoint: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Colored: u32 = unsafe { ::std::mem::transmute(Colored) };
            Colored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 4u8, {
            let SourceIdx: u32 = unsafe { ::std::mem::transmute(SourceIdx) };
            SourceIdx as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImFontGlyphRangesBuilder {
    pub UsedChars: ImVector<ImU32>,
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z"]
    pub fn ImFontGlyphRangesBuilder_AddText(
        this: *mut ImFontGlyphRangesBuilder,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBI@Z"]
    pub fn ImFontGlyphRangesBuilder_AddRanges(
        this: *mut ImFontGlyphRangesBuilder,
        ranges: *const ImWchar,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@I@@@Z"]
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        this: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector<ImWchar>,
    );
}
impl Default for ImFontGlyphRangesBuilder {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImFontGlyphRangesBuilder {
    #[inline]
    pub unsafe fn AddText(
        &mut self,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImFontGlyphRangesBuilder_AddText(self, text, text_end)
    }
    #[inline]
    pub unsafe fn AddRanges(&mut self, ranges: *const ImWchar) {
        ImFontGlyphRangesBuilder_AddRanges(self, ranges)
    }
    #[inline]
    pub unsafe fn BuildRanges(&mut self, out_ranges: *mut ImVector<ImWchar>) {
        ImFontGlyphRangesBuilder_BuildRanges(self, out_ranges)
    }
}
pub type ImFontAtlasRectId = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImFontAtlasRect {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub uv0: ImVec2,
    pub uv1: ImVec2,
}
pub const ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImFontAtlas {
    pub Flags: ImFontAtlasFlags,
    pub TexDesiredFormat: ImTextureFormat,
    pub TexGlyphPadding: ::std::os::raw::c_int,
    pub TexMinWidth: ::std::os::raw::c_int,
    pub TexMinHeight: ::std::os::raw::c_int,
    pub TexMaxWidth: ::std::os::raw::c_int,
    pub TexMaxHeight: ::std::os::raw::c_int,
    pub UserData: *mut ::std::os::raw::c_void,
    pub TexRef: ImTextureRef,
    pub TexData: *mut ImTextureData,
    pub TexList: ImVector<*mut ImTextureData>,
    pub Locked: bool,
    pub RendererHasTextures: bool,
    pub TexIsBuilt: bool,
    pub TexPixelsUseColors: bool,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector<*mut ImFont>,
    pub Sources: ImVector<ImFontConfig>,
    pub TexUvLines: [ImVec4; 33usize],
    pub TexNextUniqueID: ::std::os::raw::c_int,
    pub FontNextUniqueID: ::std::os::raw::c_int,
    pub DrawListSharedDatas: ImVector<*mut ImDrawListSharedData>,
    pub Builder: *mut ImFontAtlasBuilder,
    pub FontLoader: *const ImFontLoader,
    pub FontLoaderName: *const ::std::os::raw::c_char,
    pub FontLoaderData: *mut ::std::os::raw::c_void,
    pub FontLoaderFlags: ::std::os::raw::c_uint,
    pub RefCount: ::std::os::raw::c_int,
    pub OwnerContext: *mut ImGuiContext,
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z"]
    pub fn ImFontAtlas_AddFont(
        this: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z"]
    pub fn ImFontAtlas_AddFontDefault(
        this: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBI@Z"]
    pub fn ImFontAtlas_AddFontFromFileTTF(
        this: *mut ImFontAtlas,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBI@Z"]
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        this: *mut ImFontAtlas,
        font_data: *mut ::std::os::raw::c_void,
        font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBI@Z"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        this: *mut ImFontAtlas,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBI@Z"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        this: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
unsafe extern "C" {
    #[link_name = "\u{1}?RemoveFont@ImFontAtlas@@QEAAXPEAUImFont@@@Z"]
    pub fn ImFontAtlas_RemoveFont(this: *mut ImFontAtlas, font: *mut ImFont);
}
unsafe extern "C" {
    #[link_name = "\u{1}?Clear@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_Clear(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?CompactCache@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_CompactCache(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetFontLoader@ImFontAtlas@@QEAAXPEBUImFontLoader@@@Z"]
    pub fn ImFontAtlas_SetFontLoader(this: *mut ImFontAtlas, font_loader: *const ImFontLoader);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearInputData@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ClearInputData(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearFonts@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ClearFonts(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearTexData@ImFontAtlas@@QEAAXXZ"]
    pub fn ImFontAtlas_ClearTexData(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBIXZ"]
    pub fn ImFontAtlas_GetGlyphRangesDefault(this: *mut ImFontAtlas) -> *const ImWchar;
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddCustomRect@ImFontAtlas@@QEAAHHHPEAUImFontAtlasRect@@@Z"]
    pub fn ImFontAtlas_AddCustomRect(
        this: *mut ImFontAtlas,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        out_r: *mut ImFontAtlasRect,
    ) -> ImFontAtlasRectId;
}
unsafe extern "C" {
    #[link_name = "\u{1}?RemoveCustomRect@ImFontAtlas@@QEAAXH@Z"]
    pub fn ImFontAtlas_RemoveCustomRect(this: *mut ImFontAtlas, id: ImFontAtlasRectId);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetCustomRect@ImFontAtlas@@QEBA_NHPEAUImFontAtlasRect@@@Z"]
    pub fn ImFontAtlas_GetCustomRect(
        this: *const ImFontAtlas,
        id: ImFontAtlasRectId,
        out_r: *mut ImFontAtlasRect,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImFontAtlas@@QEAA@XZ"]
    pub fn ImFontAtlas_ImFontAtlas(this: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}??1ImFontAtlas@@QEAA@XZ"]
    pub fn ImFontAtlas_ImFontAtlas_destructor(this: *mut ImFontAtlas);
}
impl Default for ImFontAtlas {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImFontAtlas {
    #[inline]
    pub unsafe fn AddFont(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont {
        ImFontAtlas_AddFont(self, font_cfg)
    }
    #[inline]
    pub unsafe fn AddFontDefault(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont {
        ImFontAtlas_AddFontDefault(self, font_cfg)
    }
    #[inline]
    pub unsafe fn AddFontFromFileTTF(
        &mut self,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges)
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryTTF(
        &mut self,
        font_data: *mut ::std::os::raw::c_void,
        font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryTTF(
            self,
            font_data,
            font_data_size,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedTTF(
        &mut self,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryCompressedTTF(
            self,
            compressed_font_data,
            compressed_font_data_size,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedBase85TTF(
        &mut self,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
            self,
            compressed_font_data_base85,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn RemoveFont(&mut self, font: *mut ImFont) {
        ImFontAtlas_RemoveFont(self, font)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImFontAtlas_Clear(self)
    }
    #[inline]
    pub unsafe fn CompactCache(&mut self) {
        ImFontAtlas_CompactCache(self)
    }
    #[inline]
    pub unsafe fn SetFontLoader(&mut self, font_loader: *const ImFontLoader) {
        ImFontAtlas_SetFontLoader(self, font_loader)
    }
    #[inline]
    pub unsafe fn ClearInputData(&mut self) {
        ImFontAtlas_ClearInputData(self)
    }
    #[inline]
    pub unsafe fn ClearFonts(&mut self) {
        ImFontAtlas_ClearFonts(self)
    }
    #[inline]
    pub unsafe fn ClearTexData(&mut self) {
        ImFontAtlas_ClearTexData(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesDefault(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesDefault(self)
    }
    #[inline]
    pub unsafe fn AddCustomRect(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        out_r: *mut ImFontAtlasRect,
    ) -> ImFontAtlasRectId {
        ImFontAtlas_AddCustomRect(self, width, height, out_r)
    }
    #[inline]
    pub unsafe fn RemoveCustomRect(&mut self, id: ImFontAtlasRectId) {
        ImFontAtlas_RemoveCustomRect(self, id)
    }
    #[inline]
    pub unsafe fn GetCustomRect(&self, id: ImFontAtlasRectId, out_r: *mut ImFontAtlasRect) -> bool {
        ImFontAtlas_GetCustomRect(self, id, out_r)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontAtlas_ImFontAtlas(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImFontAtlas_ImFontAtlas_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImFontBaked {
    pub IndexAdvanceX: ImVector<f32>,
    pub FallbackAdvanceX: f32,
    pub Size: f32,
    pub RasterizerDensity: f32,
    pub IndexLookup: ImVector<ImU16>,
    pub Glyphs: ImVector<ImFontGlyph>,
    pub FallbackGlyphIndex: ::std::os::raw::c_int,
    pub Ascent: f32,
    pub Descent: f32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub LastUsedFrame: ::std::os::raw::c_int,
    pub BakedId: ImGuiID,
    pub ContainerFont: *mut ImFont,
    pub FontLoaderDatas: *mut ::std::os::raw::c_void,
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearOutputData@ImFontBaked@@QEAAXXZ"]
    pub fn ImFontBaked_ClearOutputData(this: *mut ImFontBaked);
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindGlyph@ImFontBaked@@QEAAPEAUImFontGlyph@@I@Z"]
    pub fn ImFontBaked_FindGlyph(this: *mut ImFontBaked, c: ImWchar) -> *mut ImFontGlyph;
}
unsafe extern "C" {
    #[link_name = "\u{1}?FindGlyphNoFallback@ImFontBaked@@QEAAPEAUImFontGlyph@@I@Z"]
    pub fn ImFontBaked_FindGlyphNoFallback(this: *mut ImFontBaked, c: ImWchar) -> *mut ImFontGlyph;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetCharAdvance@ImFontBaked@@QEAAMI@Z"]
    pub fn ImFontBaked_GetCharAdvance(this: *mut ImFontBaked, c: ImWchar) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsGlyphLoaded@ImFontBaked@@QEAA_NI@Z"]
    pub fn ImFontBaked_IsGlyphLoaded(this: *mut ImFontBaked, c: ImWchar) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImFontBaked@@QEAA@XZ"]
    pub fn ImFontBaked_ImFontBaked(this: *mut ImFontBaked);
}
impl Default for ImFontBaked {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImFontBaked {
    #[inline]
    pub fn MetricsTotalSurface(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_MetricsTotalSurface(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MetricsTotalSurface_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                26u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_MetricsTotalSurface_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                26u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantDestroy(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_WantDestroy(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantDestroy_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_WantDestroy_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LoadNoFallback(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_LoadNoFallback(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LoadNoFallback_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LoadNoFallback_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LoadNoRenderOnLayout(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_LoadNoRenderOnLayout(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LoadNoRenderOnLayout_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LoadNoRenderOnLayout_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        MetricsTotalSurface: ::std::os::raw::c_uint,
        WantDestroy: ::std::os::raw::c_uint,
        LoadNoFallback: ::std::os::raw::c_uint,
        LoadNoRenderOnLayout: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let MetricsTotalSurface: u32 = unsafe { ::std::mem::transmute(MetricsTotalSurface) };
            MetricsTotalSurface as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let WantDestroy: u32 = unsafe { ::std::mem::transmute(WantDestroy) };
            WantDestroy as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let LoadNoFallback: u32 = unsafe { ::std::mem::transmute(LoadNoFallback) };
            LoadNoFallback as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let LoadNoRenderOnLayout: u32 = unsafe { ::std::mem::transmute(LoadNoRenderOnLayout) };
            LoadNoRenderOnLayout as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub unsafe fn ClearOutputData(&mut self) {
        ImFontBaked_ClearOutputData(self)
    }
    #[inline]
    pub unsafe fn FindGlyph(&mut self, c: ImWchar) -> *mut ImFontGlyph {
        ImFontBaked_FindGlyph(self, c)
    }
    #[inline]
    pub unsafe fn FindGlyphNoFallback(&mut self, c: ImWchar) -> *mut ImFontGlyph {
        ImFontBaked_FindGlyphNoFallback(self, c)
    }
    #[inline]
    pub unsafe fn GetCharAdvance(&mut self, c: ImWchar) -> f32 {
        ImFontBaked_GetCharAdvance(self, c)
    }
    #[inline]
    pub unsafe fn IsGlyphLoaded(&mut self, c: ImWchar) -> bool {
        ImFontBaked_IsGlyphLoaded(self, c)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontBaked_ImFontBaked(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
pub const ImFontFlags_None: ImFontFlags_ = 0;
pub const ImFontFlags_NoLoadError: ImFontFlags_ = 2;
pub const ImFontFlags_NoLoadGlyphs: ImFontFlags_ = 4;
pub const ImFontFlags_LockBakedSizes: ImFontFlags_ = 8;
pub type ImFontFlags_ = ::std::os::raw::c_int;
#[repr(C)]
pub struct ImFont {
    pub LastBaked: *mut ImFontBaked,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub Flags: ImFontFlags,
    pub CurrentRasterizerDensity: f32,
    pub FontId: ImGuiID,
    pub LegacySize: f32,
    pub Sources: ImVector<*mut ImFontConfig>,
    pub EllipsisChar: ImWchar,
    pub FallbackChar: ImWchar,
    pub Used8kPagesMap: [ImU8; 17usize],
    pub EllipsisAutoBake: bool,
    pub RemapPairs: ImGuiStorage,
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsGlyphInFont@ImFont@@QEAA_NI@Z"]
    pub fn ImFont_IsGlyphInFont(this: *mut ImFont, c: ImWchar) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetFontBaked@ImFont@@QEAAPEAUImFontBaked@@MM@Z"]
    pub fn ImFont_GetFontBaked(this: *mut ImFont, font_size: f32, density: f32)
    -> *mut ImFontBaked;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CalcTextSizeA@ImFont@@QEAA?AUImVec2@@MMMPEBD0PEAPEBD@Z"]
    pub fn ImFont_CalcTextSizeA(
        this: *mut ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        out_remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CalcWordWrapPosition@ImFont@@QEAAPEBDMPEBD0M@Z"]
    pub fn ImFont_CalcWordWrapPosition(
        this: *mut ImFont,
        size: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderChar@ImFont@@QEAAXPEAUImDrawList@@MAEBUImVec2@@IIPEBUImVec4@@@Z"]
    pub fn ImFont_RenderChar(
        this: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        c: ImWchar,
        cpu_fine_clip: *const ImVec4,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?RenderText@ImFont@@QEAAXPEAUImDrawList@@MAEBUImVec2@@IAEBUImVec4@@PEBD3M_N@Z"]
    pub fn ImFont_RenderText(
        this: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        clip_rect: *const ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearOutputData@ImFont@@QEAAXXZ"]
    pub fn ImFont_ClearOutputData(this: *mut ImFont);
}
unsafe extern "C" {
    #[link_name = "\u{1}?AddRemapChar@ImFont@@QEAAXII@Z"]
    pub fn ImFont_AddRemapChar(this: *mut ImFont, from_codepoint: ImWchar, to_codepoint: ImWchar);
}
unsafe extern "C" {
    #[link_name = "\u{1}?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z"]
    pub fn ImFont_IsGlyphRangeUnused(
        this: *mut ImFont,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImFont@@QEAA@XZ"]
    pub fn ImFont_ImFont(this: *mut ImFont);
}
unsafe extern "C" {
    #[link_name = "\u{1}??1ImFont@@QEAA@XZ"]
    pub fn ImFont_ImFont_destructor(this: *mut ImFont);
}
impl Default for ImFont {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImFont {
    #[inline]
    pub unsafe fn IsGlyphInFont(&mut self, c: ImWchar) -> bool {
        ImFont_IsGlyphInFont(self, c)
    }
    #[inline]
    pub unsafe fn GetFontBaked(&mut self, font_size: f32, density: f32) -> *mut ImFontBaked {
        ImFont_GetFontBaked(self, font_size, density)
    }
    #[inline]
    pub unsafe fn CalcTextSizeA(
        &mut self,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        out_remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2 {
        ImFont_CalcTextSizeA(
            self,
            size,
            max_width,
            wrap_width,
            text_begin,
            text_end,
            out_remaining,
        )
    }
    #[inline]
    pub unsafe fn CalcWordWrapPosition(
        &mut self,
        size: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char {
        ImFont_CalcWordWrapPosition(self, size, text, text_end, wrap_width)
    }
    #[inline]
    pub unsafe fn RenderChar(
        &mut self,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        c: ImWchar,
        cpu_fine_clip: *const ImVec4,
    ) {
        ImFont_RenderChar(self, draw_list, size, pos, col, c, cpu_fine_clip)
    }
    #[inline]
    pub unsafe fn RenderText(
        &mut self,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        clip_rect: *const ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    ) {
        ImFont_RenderText(
            self,
            draw_list,
            size,
            pos,
            col,
            clip_rect,
            text_begin,
            text_end,
            wrap_width,
            cpu_fine_clip,
        )
    }
    #[inline]
    pub unsafe fn ClearOutputData(&mut self) {
        ImFont_ClearOutputData(self)
    }
    #[inline]
    pub unsafe fn AddRemapChar(&mut self, from_codepoint: ImWchar, to_codepoint: ImWchar) {
        ImFont_AddRemapChar(self, from_codepoint, to_codepoint)
    }
    #[inline]
    pub unsafe fn IsGlyphRangeUnused(
        &mut self,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool {
        ImFont_IsGlyphRangeUnused(self, c_begin, c_last)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFont_ImFont(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImFont_ImFont_destructor(self)
    }
}
pub const ImGuiViewportFlags_None: ImGuiViewportFlags_ = 0;
pub const ImGuiViewportFlags_IsPlatformWindow: ImGuiViewportFlags_ = 1;
pub const ImGuiViewportFlags_IsPlatformMonitor: ImGuiViewportFlags_ = 2;
pub const ImGuiViewportFlags_OwnedByApp: ImGuiViewportFlags_ = 4;
pub const ImGuiViewportFlags_NoDecoration: ImGuiViewportFlags_ = 8;
pub const ImGuiViewportFlags_NoTaskBarIcon: ImGuiViewportFlags_ = 16;
pub const ImGuiViewportFlags_NoFocusOnAppearing: ImGuiViewportFlags_ = 32;
pub const ImGuiViewportFlags_NoFocusOnClick: ImGuiViewportFlags_ = 64;
pub const ImGuiViewportFlags_NoInputs: ImGuiViewportFlags_ = 128;
pub const ImGuiViewportFlags_NoRendererClear: ImGuiViewportFlags_ = 256;
pub const ImGuiViewportFlags_NoAutoMerge: ImGuiViewportFlags_ = 512;
pub const ImGuiViewportFlags_TopMost: ImGuiViewportFlags_ = 1024;
pub const ImGuiViewportFlags_CanHostOtherWindows: ImGuiViewportFlags_ = 2048;
pub const ImGuiViewportFlags_IsMinimized: ImGuiViewportFlags_ = 4096;
pub const ImGuiViewportFlags_IsFocused: ImGuiViewportFlags_ = 8192;
pub type ImGuiViewportFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiViewport {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub FramebufferScale: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub ParentViewportId: ImGuiID,
    pub DrawData: *mut ImDrawData,
    pub RendererUserData: *mut ::std::os::raw::c_void,
    pub PlatformUserData: *mut ::std::os::raw::c_void,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
    pub PlatformHandleRaw: *mut ::std::os::raw::c_void,
    pub PlatformWindowCreated: bool,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
impl Default for ImGuiViewport {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiPlatformIO {
    pub Platform_GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext) -> *const ::std::os::raw::c_char,
    >,
    pub Platform_SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, text: *const ::std::os::raw::c_char),
    >,
    pub Platform_ClipboardUserData: *mut ::std::os::raw::c_void,
    pub Platform_OpenInShellFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, path: *const ::std::os::raw::c_char) -> bool,
    >,
    pub Platform_OpenInShellUserData: *mut ::std::os::raw::c_void,
    pub Platform_SetImeDataFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            viewport: *mut ImGuiViewport,
            data: *mut ImGuiPlatformImeData,
        ),
    >,
    pub Platform_ImeUserData: *mut ::std::os::raw::c_void,
    pub Platform_LocaleDecimalPoint: ImWchar,
    pub Renderer_TextureMaxWidth: ::std::os::raw::c_int,
    pub Renderer_TextureMaxHeight: ::std::os::raw::c_int,
    pub Renderer_RenderState: *mut ::std::os::raw::c_void,
    pub Platform_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_GetWindowFramebufferScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::std::os::raw::c_char),
    >,
    pub Platform_SetWindowAlpha:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_GetWindowDpiScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowWorkAreaInsets:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec4>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        unsafe extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::std::os::raw::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::std::os::raw::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Renderer_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Monitors: ImVector<ImGuiPlatformMonitor>,
    pub Textures: ImVector<*mut ImTextureData>,
    pub Viewports: ImVector<*mut ImGuiViewport>,
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiPlatformIO@@QEAA@XZ"]
    pub fn ImGuiPlatformIO_ImGuiPlatformIO(this: *mut ImGuiPlatformIO);
}
impl Default for ImGuiPlatformIO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiPlatformIO {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiPlatformIO_ImGuiPlatformIO(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiPlatformMonitor {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
}
impl Default for ImGuiPlatformMonitor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiPlatformImeData {
    pub WantVisible: bool,
    pub WantTextInput: bool,
    pub InputPos: ImVec2,
    pub InputLineHeight: f32,
    pub ViewportId: ImGuiID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
impl Default for _iobuf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FILE = _iobuf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockRequest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNodeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextDeactivateData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnsSettings {
    _unused: [u8; 0],
}
pub type ImGuiDataAuthority = ::std::os::raw::c_int;
pub type ImGuiLayoutType = ::std::os::raw::c_int;
pub type ImGuiActivateFlags = ::std::os::raw::c_int;
pub type ImGuiDebugLogFlags = ::std::os::raw::c_int;
pub type ImGuiFocusRequestFlags = ::std::os::raw::c_int;
pub type ImGuiItemStatusFlags = ::std::os::raw::c_int;
pub type ImGuiOldColumnFlags = ::std::os::raw::c_int;
pub type ImGuiLogFlags = ::std::os::raw::c_int;
pub type ImGuiNavRenderCursorFlags = ::std::os::raw::c_int;
pub type ImGuiNavMoveFlags = ::std::os::raw::c_int;
pub type ImGuiNextItemDataFlags = ::std::os::raw::c_int;
pub type ImGuiNextWindowDataFlags = ::std::os::raw::c_int;
pub type ImGuiScrollFlags = ::std::os::raw::c_int;
pub type ImGuiSeparatorFlags = ::std::os::raw::c_int;
pub type ImGuiTextFlags = ::std::os::raw::c_int;
pub type ImGuiTooltipFlags = ::std::os::raw::c_int;
pub type ImGuiTypingSelectFlags = ::std::os::raw::c_int;
pub type ImGuiWindowRefreshFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnIdx = ImS16;
pub type ImGuiTableDrawChannelIdx = ImU16;
unsafe extern "C" {
    #[link_name = "\u{1}?ImHashData@@YAIPEBX_KI@Z"]
    pub fn ImHashData(
        data: *const ::std::os::raw::c_void,
        data_size: usize,
        seed: ImGuiID,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImHashStr@@YAIPEBD_KI@Z"]
    pub fn ImHashStr(
        data: *const ::std::os::raw::c_char,
        data_size: usize,
        seed: ImGuiID,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImHashSkipUncontributingPrefix@@YAPEBDPEBD@Z"]
    pub fn ImHashSkipUncontributingPrefix(
        label: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImAlphaBlendColors@@YAIII@Z"]
    pub fn ImAlphaBlendColors(col_a: ImU32, col_b: ImU32) -> ImU32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStricmp@@YAHPEBD0@Z"]
    pub fn ImStricmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStrnicmp@@YAHPEBD0_K@Z"]
    pub fn ImStrnicmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStrncpy@@YAXPEADPEBD_K@Z"]
    pub fn ImStrncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        count: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStrdup@@YAPEADPEBD@Z"]
    pub fn ImStrdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImMemdup@@YAPEAXPEBX_K@Z"]
    pub fn ImMemdup(src: *const ::std::os::raw::c_void, size: usize)
    -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStrdupcpy@@YAPEADPEADPEA_KPEBD@Z"]
    pub fn ImStrdupcpy(
        dst: *mut ::std::os::raw::c_char,
        p_dst_size: *mut usize,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStrchrRange@@YAPEBDPEBD0D@Z"]
    pub fn ImStrchrRange(
        str_begin: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStreolRange@@YAPEBDPEBD0@Z"]
    pub fn ImStreolRange(
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStristr@@YAPEBDPEBD000@Z"]
    pub fn ImStristr(
        haystack: *const ::std::os::raw::c_char,
        haystack_end: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStrTrimBlanks@@YAXPEAD@Z"]
    pub fn ImStrTrimBlanks(str_: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStrSkipBlank@@YAPEBDPEBD@Z"]
    pub fn ImStrSkipBlank(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStrlenW@@YAHPEBI@Z"]
    pub fn ImStrlenW(str_: *const ImWchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImStrbol@@YAPEBDPEBD0@Z"]
    pub fn ImStrbol(
        buf_mid_line: *const ::std::os::raw::c_char,
        buf_begin: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFormatString@@YAHPEAD_KPEBDZZ"]
    pub fn ImFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFormatStringV@@YAHPEAD_KPEBD0@Z"]
    pub fn ImFormatStringV(
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFormatStringToTempBuffer@@YAXPEAPEBD0PEBDZZ"]
    pub fn ImFormatStringToTempBuffer(
        out_buf: *mut *const ::std::os::raw::c_char,
        out_buf_end: *mut *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFormatStringToTempBufferV@@YAXPEAPEBD0PEBDPEAD@Z"]
    pub fn ImFormatStringToTempBufferV(
        out_buf: *mut *const ::std::os::raw::c_char,
        out_buf_end: *mut *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImParseFormatFindStart@@YAPEBDPEBD@Z"]
    pub fn ImParseFormatFindStart(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImParseFormatFindEnd@@YAPEBDPEBD@Z"]
    pub fn ImParseFormatFindEnd(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImParseFormatTrimDecorations@@YAPEBDPEBDPEAD_K@Z"]
    pub fn ImParseFormatTrimDecorations(
        format: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImParseFormatSanitizeForPrinting@@YAXPEBDPEAD_K@Z"]
    pub fn ImParseFormatSanitizeForPrinting(
        fmt_in: *const ::std::os::raw::c_char,
        fmt_out: *mut ::std::os::raw::c_char,
        fmt_out_size: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImParseFormatSanitizeForScanning@@YAPEBDPEBDPEAD_K@Z"]
    pub fn ImParseFormatSanitizeForScanning(
        fmt_in: *const ::std::os::raw::c_char,
        fmt_out: *mut ::std::os::raw::c_char,
        fmt_out_size: usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImParseFormatPrecision@@YAHPEBDH@Z"]
    pub fn ImParseFormatPrecision(
        format: *const ::std::os::raw::c_char,
        default_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextCharToUtf8@@YAHQEADI@Z"]
    pub fn ImTextCharToUtf8(
        out_buf: *mut ::std::os::raw::c_char,
        c: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextStrToUtf8@@YAHPEADHPEBI1@Z"]
    pub fn ImTextStrToUtf8(
        out_buf: *mut ::std::os::raw::c_char,
        out_buf_size: ::std::os::raw::c_int,
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z"]
    pub fn ImTextCharFromUtf8(
        out_char: *mut ::std::os::raw::c_uint,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextStrFromUtf8@@YAHPEAIHPEBD1PEAPEBD@Z"]
    pub fn ImTextStrFromUtf8(
        out_buf: *mut ImWchar,
        out_buf_size: ::std::os::raw::c_int,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
        in_remaining: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextCountCharsFromUtf8@@YAHPEBD0@Z"]
    pub fn ImTextCountCharsFromUtf8(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextCountUtf8BytesFromChar@@YAHPEBD0@Z"]
    pub fn ImTextCountUtf8BytesFromChar(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextCountUtf8BytesFromStr@@YAHPEBI0@Z"]
    pub fn ImTextCountUtf8BytesFromStr(
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextFindPreviousUtf8Codepoint@@YAPEBDPEBD0@Z"]
    pub fn ImTextFindPreviousUtf8Codepoint(
        in_text_start: *const ::std::os::raw::c_char,
        in_text_curr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextCountLines@@YAHPEBD0@Z"]
    pub fn ImTextCountLines(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type ImFileHandle = *mut FILE;
unsafe extern "C" {
    #[link_name = "\u{1}?ImFileOpen@@YAPEAU_iobuf@@PEBD0@Z"]
    pub fn ImFileOpen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ImFileHandle;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFileClose@@YA_NPEAU_iobuf@@@Z"]
    pub fn ImFileClose(file: ImFileHandle) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFileGetSize@@YA_KPEAU_iobuf@@@Z"]
    pub fn ImFileGetSize(file: ImFileHandle) -> ImU64;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFileRead@@YA_KPEAX_K1PEAU_iobuf@@@Z"]
    pub fn ImFileRead(
        data: *mut ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFileWrite@@YA_KPEBX_K1PEAU_iobuf@@@Z"]
    pub fn ImFileWrite(
        data: *const ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFileLoadToMemory@@YAPEAXPEBD0PEA_KH@Z"]
    pub fn ImFileLoadToMemory(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        out_file_size: *mut usize,
        padding_bytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTriangleContainsPoint@@YA_NAEBUImVec2@@000@Z"]
    pub fn ImTriangleContainsPoint(
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        p: *const ImVec2,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTriangleBarycentricCoords@@YAXAEBUImVec2@@000AEAM11@Z"]
    pub fn ImTriangleBarycentricCoords(
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        p: *const ImVec2,
        out_u: *mut f32,
        out_v: *mut f32,
        out_w: *mut f32,
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImVec1 {
    pub x: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVec2i {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImVec2ih {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImRect {
    pub Min: ImVec2,
    pub Max: ImVec2,
}
pub type ImBitArrayPtr = *mut ImU32;
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImBitVector {
    pub Storage: ImVector<ImU32>,
}
impl Default for ImBitVector {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImSpan<T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub Data: *mut T,
    pub DataEnd: *mut T,
}
impl<T> Default for ImSpan<T> {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImPoolIdx = ::std::os::raw::c_int;
#[repr(C)]
pub struct ImPool<T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub Buf: ImVector<T>,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
impl<T> Default for ImPool<T> {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImChunkStream {
    pub Buf: ImVector<::std::os::raw::c_char>,
}
impl Default for ImChunkStream {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImGuiTextIndex {
    pub LineOffsets: ImVector<::std::os::raw::c_int>,
    pub EndOffset: ::std::os::raw::c_int,
}
unsafe extern "C" {
    #[link_name = "\u{1}?append@ImGuiTextIndex@@QEAAXPEBDHH@Z"]
    pub fn ImGuiTextIndex_append(
        this: *mut ImGuiTextIndex,
        base: *const ::std::os::raw::c_char,
        old_size: ::std::os::raw::c_int,
        new_size: ::std::os::raw::c_int,
    );
}
impl Default for ImGuiTextIndex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiTextIndex {
    #[inline]
    pub unsafe fn append(
        &mut self,
        base: *const ::std::os::raw::c_char,
        old_size: ::std::os::raw::c_int,
        new_size: ::std::os::raw::c_int,
    ) {
        ImGuiTextIndex_append(self, base, old_size, new_size)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImLowerBound@@YAPEAUImGuiStoragePair@@PEAU1@0I@Z"]
    pub fn ImLowerBound(
        in_begin: *mut ImGuiStoragePair,
        in_end: *mut ImGuiStoragePair,
        key: ImGuiID,
    ) -> *mut ImGuiStoragePair;
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImDrawListSharedData {
    pub TexUvWhitePixel: ImVec2,
    pub TexUvLines: *const ImVec4,
    pub FontAtlas: *mut ImFontAtlas,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub FontScale: f32,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub InitialFringeScale: f32,
    pub InitialFlags: ImDrawListFlags,
    pub ClipRectFullscreen: ImVec4,
    pub TempBuffer: ImVector<ImVec2>,
    pub DrawLists: ImVector<*mut ImDrawList>,
    pub Context: *mut ImGuiContext,
    pub ArcFastVtx: [ImVec2; 48usize],
    pub ArcFastRadiusCutoff: f32,
    pub CircleSegmentCounts: [ImU8; 64usize],
}
unsafe extern "C" {
    #[link_name = "\u{1}?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z"]
    pub fn ImDrawListSharedData_SetCircleTessellationMaxError(
        this: *mut ImDrawListSharedData,
        max_error: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImDrawListSharedData@@QEAA@XZ"]
    pub fn ImDrawListSharedData_ImDrawListSharedData(this: *mut ImDrawListSharedData);
}
unsafe extern "C" {
    #[link_name = "\u{1}??1ImDrawListSharedData@@QEAA@XZ"]
    pub fn ImDrawListSharedData_ImDrawListSharedData_destructor(this: *mut ImDrawListSharedData);
}
impl Default for ImDrawListSharedData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImDrawListSharedData {
    #[inline]
    pub unsafe fn SetCircleTessellationMaxError(&mut self, max_error: f32) {
        ImDrawListSharedData_SetCircleTessellationMaxError(self, max_error)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImDrawListSharedData_ImDrawListSharedData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImDrawListSharedData_ImDrawListSharedData_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImDrawDataBuilder {
    pub Layers: [*mut ImVector<*mut ImDrawList>; 2usize],
    pub LayerData1: ImVector<*mut ImDrawList>,
}
impl Default for ImDrawDataBuilder {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImFontStackData {
    pub Font: *mut ImFont,
    pub FontSizeBeforeScaling: f32,
    pub FontSizeAfterScaling: f32,
}
impl Default for ImFontStackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiStyleVarInfo {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl ImGuiStyleVarInfo {
    #[inline]
    pub fn Count(&self) -> ImU32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_Count(&mut self, val: ImU32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Count_raw(this: *const Self) -> ImU32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Count_raw(this: *mut Self, val: ImU32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DataType(&self) -> ImGuiDataType {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_DataType(&mut self, val: ImGuiDataType) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DataType_raw(this: *const Self) -> ImGuiDataType {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DataType_raw(this: *mut Self, val: ImGuiDataType) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Offset(&self) -> ImU32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_Offset(&mut self, val: ImU32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Offset_raw(this: *const Self) -> ImU32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Offset_raw(this: *mut Self, val: ImU32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Count: ImU32,
        DataType: ImGuiDataType,
        Offset: ImU32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let Count: u32 = unsafe { ::std::mem::transmute(Count) };
            Count as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let DataType: u32 = unsafe { ::std::mem::transmute(DataType) };
            DataType as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let Offset: u32 = unsafe { ::std::mem::transmute(Offset) };
            Offset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiColorMod {
    pub Col: ImGuiCol,
    pub BackupValue: ImVec4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyleMod {
    pub VarIdx: ImGuiStyleVar,
    pub __bindgen_anon_1: ImGuiStyleMod__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStyleMod__bindgen_ty_1 {
    pub BackupInt: [::std::os::raw::c_int; 2usize],
    pub BackupFloat: [f32; 2usize],
}
impl Default for ImGuiStyleMod__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ImGuiStyleMod {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDataTypeStorage {
    pub Data: [ImU8; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDataTypeInfo {
    pub Size: usize,
    pub Name: *const ::std::os::raw::c_char,
    pub PrintFmt: *const ::std::os::raw::c_char,
    pub ScanFmt: *const ::std::os::raw::c_char,
}
impl Default for ImGuiDataTypeInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiDataType_Pointer: ImGuiDataTypePrivate_ = 12;
pub const ImGuiDataType_ID: ImGuiDataTypePrivate_ = 13;
pub type ImGuiDataTypePrivate_ = ::std::os::raw::c_int;
pub const ImGuiItemFlags_Disabled: ImGuiItemFlagsPrivate_ = 1024;
pub const ImGuiItemFlags_ReadOnly: ImGuiItemFlagsPrivate_ = 2048;
pub const ImGuiItemFlags_MixedValue: ImGuiItemFlagsPrivate_ = 4096;
pub const ImGuiItemFlags_NoWindowHoverableCheck: ImGuiItemFlagsPrivate_ = 8192;
pub const ImGuiItemFlags_AllowOverlap: ImGuiItemFlagsPrivate_ = 16384;
pub const ImGuiItemFlags_NoNavDisableMouseHover: ImGuiItemFlagsPrivate_ = 32768;
pub const ImGuiItemFlags_NoMarkEdited: ImGuiItemFlagsPrivate_ = 65536;
pub const ImGuiItemFlags_NoFocus: ImGuiItemFlagsPrivate_ = 131072;
pub const ImGuiItemFlags_Inputable: ImGuiItemFlagsPrivate_ = 1048576;
pub const ImGuiItemFlags_HasSelectionUserData: ImGuiItemFlagsPrivate_ = 2097152;
pub const ImGuiItemFlags_IsMultiSelect: ImGuiItemFlagsPrivate_ = 4194304;
pub const ImGuiItemFlags_Default_: ImGuiItemFlagsPrivate_ = 16;
pub type ImGuiItemFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiItemStatusFlags_None: ImGuiItemStatusFlags_ = 0;
pub const ImGuiItemStatusFlags_HoveredRect: ImGuiItemStatusFlags_ = 1;
pub const ImGuiItemStatusFlags_HasDisplayRect: ImGuiItemStatusFlags_ = 2;
pub const ImGuiItemStatusFlags_Edited: ImGuiItemStatusFlags_ = 4;
pub const ImGuiItemStatusFlags_ToggledSelection: ImGuiItemStatusFlags_ = 8;
pub const ImGuiItemStatusFlags_ToggledOpen: ImGuiItemStatusFlags_ = 16;
pub const ImGuiItemStatusFlags_HasDeactivated: ImGuiItemStatusFlags_ = 32;
pub const ImGuiItemStatusFlags_Deactivated: ImGuiItemStatusFlags_ = 64;
pub const ImGuiItemStatusFlags_HoveredWindow: ImGuiItemStatusFlags_ = 128;
pub const ImGuiItemStatusFlags_Visible: ImGuiItemStatusFlags_ = 256;
pub const ImGuiItemStatusFlags_HasClipRect: ImGuiItemStatusFlags_ = 512;
pub const ImGuiItemStatusFlags_HasShortcut: ImGuiItemStatusFlags_ = 1024;
pub type ImGuiItemStatusFlags_ = ::std::os::raw::c_int;
pub const ImGuiHoveredFlags_DelayMask_: ImGuiHoveredFlagsPrivate_ = 245760;
pub const ImGuiHoveredFlags_AllowedMaskForIsWindowHovered: ImGuiHoveredFlagsPrivate_ = 12479;
pub const ImGuiHoveredFlags_AllowedMaskForIsItemHovered: ImGuiHoveredFlagsPrivate_ = 262048;
pub type ImGuiHoveredFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiInputTextFlags_Multiline: ImGuiInputTextFlagsPrivate_ = 67108864;
pub const ImGuiInputTextFlags_MergedItem: ImGuiInputTextFlagsPrivate_ = 134217728;
pub const ImGuiInputTextFlags_LocalizeDecimalPoint: ImGuiInputTextFlagsPrivate_ = 268435456;
pub type ImGuiInputTextFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiButtonFlags_PressedOnClick: ImGuiButtonFlagsPrivate_ = 16;
pub const ImGuiButtonFlags_PressedOnClickRelease: ImGuiButtonFlagsPrivate_ = 32;
pub const ImGuiButtonFlags_PressedOnClickReleaseAnywhere: ImGuiButtonFlagsPrivate_ = 64;
pub const ImGuiButtonFlags_PressedOnRelease: ImGuiButtonFlagsPrivate_ = 128;
pub const ImGuiButtonFlags_PressedOnDoubleClick: ImGuiButtonFlagsPrivate_ = 256;
pub const ImGuiButtonFlags_PressedOnDragDropHold: ImGuiButtonFlagsPrivate_ = 512;
pub const ImGuiButtonFlags_FlattenChildren: ImGuiButtonFlagsPrivate_ = 2048;
pub const ImGuiButtonFlags_AllowOverlap: ImGuiButtonFlagsPrivate_ = 4096;
pub const ImGuiButtonFlags_AlignTextBaseLine: ImGuiButtonFlagsPrivate_ = 32768;
pub const ImGuiButtonFlags_NoKeyModsAllowed: ImGuiButtonFlagsPrivate_ = 65536;
pub const ImGuiButtonFlags_NoHoldingActiveId: ImGuiButtonFlagsPrivate_ = 131072;
pub const ImGuiButtonFlags_NoNavFocus: ImGuiButtonFlagsPrivate_ = 262144;
pub const ImGuiButtonFlags_NoHoveredOnFocus: ImGuiButtonFlagsPrivate_ = 524288;
pub const ImGuiButtonFlags_NoSetKeyOwner: ImGuiButtonFlagsPrivate_ = 1048576;
pub const ImGuiButtonFlags_NoTestKeyOwner: ImGuiButtonFlagsPrivate_ = 2097152;
pub const ImGuiButtonFlags_NoFocus: ImGuiButtonFlagsPrivate_ = 4194304;
pub const ImGuiButtonFlags_PressedOnMask_: ImGuiButtonFlagsPrivate_ = 1008;
pub const ImGuiButtonFlags_PressedOnDefault_: ImGuiButtonFlagsPrivate_ = 32;
pub type ImGuiButtonFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiComboFlags_CustomPreview: ImGuiComboFlagsPrivate_ = 1048576;
pub type ImGuiComboFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSliderFlags_Vertical: ImGuiSliderFlagsPrivate_ = 1048576;
pub const ImGuiSliderFlags_ReadOnly: ImGuiSliderFlagsPrivate_ = 2097152;
pub type ImGuiSliderFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSelectableFlags_NoHoldingActiveID: ImGuiSelectableFlagsPrivate_ = 1048576;
pub const ImGuiSelectableFlags_SelectOnNav: ImGuiSelectableFlagsPrivate_ = 2097152;
pub const ImGuiSelectableFlags_SelectOnClick: ImGuiSelectableFlagsPrivate_ = 4194304;
pub const ImGuiSelectableFlags_SelectOnRelease: ImGuiSelectableFlagsPrivate_ = 8388608;
pub const ImGuiSelectableFlags_SpanAvailWidth: ImGuiSelectableFlagsPrivate_ = 16777216;
pub const ImGuiSelectableFlags_SetNavIdOnHover: ImGuiSelectableFlagsPrivate_ = 33554432;
pub const ImGuiSelectableFlags_NoPadWithHalfSpacing: ImGuiSelectableFlagsPrivate_ = 67108864;
pub const ImGuiSelectableFlags_NoSetKeyOwner: ImGuiSelectableFlagsPrivate_ = 134217728;
pub type ImGuiSelectableFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiTreeNodeFlags_NoNavFocus: ImGuiTreeNodeFlagsPrivate_ = 134217728;
pub const ImGuiTreeNodeFlags_ClipLabelForTrailingButton: ImGuiTreeNodeFlagsPrivate_ = 268435456;
pub const ImGuiTreeNodeFlags_UpsideDownArrow: ImGuiTreeNodeFlagsPrivate_ = 536870912;
pub const ImGuiTreeNodeFlags_OpenOnMask_: ImGuiTreeNodeFlagsPrivate_ = 192;
pub const ImGuiTreeNodeFlags_DrawLinesMask_: ImGuiTreeNodeFlagsPrivate_ = 1835008;
pub type ImGuiTreeNodeFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSeparatorFlags_None: ImGuiSeparatorFlags_ = 0;
pub const ImGuiSeparatorFlags_Horizontal: ImGuiSeparatorFlags_ = 1;
pub const ImGuiSeparatorFlags_Vertical: ImGuiSeparatorFlags_ = 2;
pub const ImGuiSeparatorFlags_SpanAllColumns: ImGuiSeparatorFlags_ = 4;
pub type ImGuiSeparatorFlags_ = ::std::os::raw::c_int;
pub const ImGuiFocusRequestFlags_None: ImGuiFocusRequestFlags_ = 0;
pub const ImGuiFocusRequestFlags_RestoreFocusedChild: ImGuiFocusRequestFlags_ = 1;
pub const ImGuiFocusRequestFlags_UnlessBelowModal: ImGuiFocusRequestFlags_ = 2;
pub type ImGuiFocusRequestFlags_ = ::std::os::raw::c_int;
pub const ImGuiTextFlags_None: ImGuiTextFlags_ = 0;
pub const ImGuiTextFlags_NoWidthForLargeClippedText: ImGuiTextFlags_ = 1;
pub type ImGuiTextFlags_ = ::std::os::raw::c_int;
pub const ImGuiTooltipFlags_None: ImGuiTooltipFlags_ = 0;
pub const ImGuiTooltipFlags_OverridePrevious: ImGuiTooltipFlags_ = 2;
pub type ImGuiTooltipFlags_ = ::std::os::raw::c_int;
pub const ImGuiLayoutType_Horizontal: ImGuiLayoutType_ = 0;
pub const ImGuiLayoutType_Vertical: ImGuiLayoutType_ = 1;
pub type ImGuiLayoutType_ = ::std::os::raw::c_int;
pub const ImGuiLogFlags_None: ImGuiLogFlags_ = 0;
pub const ImGuiLogFlags_OutputTTY: ImGuiLogFlags_ = 1;
pub const ImGuiLogFlags_OutputFile: ImGuiLogFlags_ = 2;
pub const ImGuiLogFlags_OutputBuffer: ImGuiLogFlags_ = 4;
pub const ImGuiLogFlags_OutputClipboard: ImGuiLogFlags_ = 8;
pub const ImGuiLogFlags_OutputMask_: ImGuiLogFlags_ = 15;
pub type ImGuiLogFlags_ = ::std::os::raw::c_int;
pub const ImGuiAxis_None: ImGuiAxis = -1;
pub const ImGuiAxis_X: ImGuiAxis = 0;
pub const ImGuiAxis_Y: ImGuiAxis = 1;
pub type ImGuiAxis = ::std::os::raw::c_int;
pub const ImGuiPlotType_Lines: ImGuiPlotType = 0;
pub const ImGuiPlotType_Histogram: ImGuiPlotType = 1;
pub type ImGuiPlotType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiComboPreviewData {
    pub PreviewRect: ImRect,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupPrevLineTextBaseOffset: f32,
    pub BackupLayout: ImGuiLayoutType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiGroupData {
    pub WindowID: ImGuiID,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupIndent: ImVec1,
    pub BackupGroupOffset: ImVec1,
    pub BackupCurrLineSize: ImVec2,
    pub BackupCurrLineTextBaseOffset: f32,
    pub BackupActiveIdIsAlive: ImGuiID,
    pub BackupDeactivatedIdIsAlive: bool,
    pub BackupHoveredIdIsAlive: bool,
    pub BackupIsSameLine: bool,
    pub EmitItem: bool,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiMenuColumns {
    pub TotalWidth: ImU32,
    pub NextTotalWidth: ImU32,
    pub Spacing: ImU16,
    pub OffsetIcon: ImU16,
    pub OffsetLabel: ImU16,
    pub OffsetShortcut: ImU16,
    pub OffsetMark: ImU16,
    pub Widths: [ImU16; 4usize],
}
unsafe extern "C" {
    #[link_name = "\u{1}?Update@ImGuiMenuColumns@@QEAAXM_N@Z"]
    pub fn ImGuiMenuColumns_Update(
        this: *mut ImGuiMenuColumns,
        spacing: f32,
        window_reappearing: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?DeclColumns@ImGuiMenuColumns@@QEAAMMMMM@Z"]
    pub fn ImGuiMenuColumns_DeclColumns(
        this: *mut ImGuiMenuColumns,
        w_icon: f32,
        w_label: f32,
        w_shortcut: f32,
        w_mark: f32,
    ) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}?CalcNextTotalWidth@ImGuiMenuColumns@@QEAAX_N@Z"]
    pub fn ImGuiMenuColumns_CalcNextTotalWidth(this: *mut ImGuiMenuColumns, update_offsets: bool);
}
impl ImGuiMenuColumns {
    #[inline]
    pub unsafe fn Update(&mut self, spacing: f32, window_reappearing: bool) {
        ImGuiMenuColumns_Update(self, spacing, window_reappearing)
    }
    #[inline]
    pub unsafe fn DeclColumns(
        &mut self,
        w_icon: f32,
        w_label: f32,
        w_shortcut: f32,
        w_mark: f32,
    ) -> f32 {
        ImGuiMenuColumns_DeclColumns(self, w_icon, w_label, w_shortcut, w_mark)
    }
    #[inline]
    pub unsafe fn CalcNextTotalWidth(&mut self, update_offsets: bool) {
        ImGuiMenuColumns_CalcNextTotalWidth(self, update_offsets)
    }
}
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImGuiInputTextDeactivatedState {
    pub ID: ImGuiID,
    pub TextA: ImVector<::std::os::raw::c_char>,
}
impl Default for ImGuiInputTextDeactivatedState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImStb_STB_TexteditState {
    _unused: [u8; 0],
}
pub type ImStbTexteditState = ImStb_STB_TexteditState;
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiInputTextState {
    pub Ctx: *mut ImGuiContext,
    pub Stb: *mut ImStbTexteditState,
    pub Flags: ImGuiInputTextFlags,
    pub ID: ImGuiID,
    pub TextLen: ::std::os::raw::c_int,
    pub TextSrc: *const ::std::os::raw::c_char,
    pub TextA: ImVector<::std::os::raw::c_char>,
    pub TextToRevertTo: ImVector<::std::os::raw::c_char>,
    pub CallbackTextBackup: ImVector<::std::os::raw::c_char>,
    pub BufCapacity: ::std::os::raw::c_int,
    pub Scroll: ImVec2,
    pub CursorAnim: f32,
    pub CursorFollow: bool,
    pub SelectedAllMouseLock: bool,
    pub Edited: bool,
    pub WantReloadUserBuf: bool,
    pub ReloadSelectionStart: ::std::os::raw::c_int,
    pub ReloadSelectionEnd: ::std::os::raw::c_int,
}
unsafe extern "C" {
    #[link_name = "\u{1}?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z"]
    pub fn ImGuiInputTextState_OnKeyPressed(
        this: *mut ImGuiInputTextState,
        key: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?OnCharPressed@ImGuiInputTextState@@QEAAXI@Z"]
    pub fn ImGuiInputTextState_OnCharPressed(
        this: *mut ImGuiInputTextState,
        c: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ"]
    pub fn ImGuiInputTextState_CursorAnimReset(this: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?CursorClamp@ImGuiInputTextState@@QEAAXXZ"]
    pub fn ImGuiInputTextState_CursorClamp(this: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?HasSelection@ImGuiInputTextState@@QEBA_NXZ"]
    pub fn ImGuiInputTextState_HasSelection(this: *const ImGuiInputTextState) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ClearSelection@ImGuiInputTextState@@QEAAXXZ"]
    pub fn ImGuiInputTextState_ClearSelection(this: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetCursorPos@ImGuiInputTextState@@QEBAHXZ"]
    pub fn ImGuiInputTextState_GetCursorPos(
        this: *const ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetSelectionStart@ImGuiInputTextState@@QEBAHXZ"]
    pub fn ImGuiInputTextState_GetSelectionStart(
        this: *const ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetSelectionEnd@ImGuiInputTextState@@QEBAHXZ"]
    pub fn ImGuiInputTextState_GetSelectionEnd(
        this: *const ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?SelectAll@ImGuiInputTextState@@QEAAXXZ"]
    pub fn ImGuiInputTextState_SelectAll(this: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ReloadUserBufAndSelectAll@ImGuiInputTextState@@QEAAXXZ"]
    pub fn ImGuiInputTextState_ReloadUserBufAndSelectAll(this: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ReloadUserBufAndKeepSelection@ImGuiInputTextState@@QEAAXXZ"]
    pub fn ImGuiInputTextState_ReloadUserBufAndKeepSelection(this: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ReloadUserBufAndMoveToEnd@ImGuiInputTextState@@QEAAXXZ"]
    pub fn ImGuiInputTextState_ReloadUserBufAndMoveToEnd(this: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiInputTextState@@QEAA@XZ"]
    pub fn ImGuiInputTextState_ImGuiInputTextState(this: *mut ImGuiInputTextState);
}
unsafe extern "C" {
    #[link_name = "\u{1}??1ImGuiInputTextState@@QEAA@XZ"]
    pub fn ImGuiInputTextState_ImGuiInputTextState_destructor(this: *mut ImGuiInputTextState);
}
impl Default for ImGuiInputTextState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiInputTextState {
    #[inline]
    pub unsafe fn OnKeyPressed(&mut self, key: ::std::os::raw::c_int) {
        ImGuiInputTextState_OnKeyPressed(self, key)
    }
    #[inline]
    pub unsafe fn OnCharPressed(&mut self, c: ::std::os::raw::c_uint) {
        ImGuiInputTextState_OnCharPressed(self, c)
    }
    #[inline]
    pub unsafe fn CursorAnimReset(&mut self) {
        ImGuiInputTextState_CursorAnimReset(self)
    }
    #[inline]
    pub unsafe fn CursorClamp(&mut self) {
        ImGuiInputTextState_CursorClamp(self)
    }
    #[inline]
    pub unsafe fn HasSelection(&self) -> bool {
        ImGuiInputTextState_HasSelection(self)
    }
    #[inline]
    pub unsafe fn ClearSelection(&mut self) {
        ImGuiInputTextState_ClearSelection(self)
    }
    #[inline]
    pub unsafe fn GetCursorPos(&self) -> ::std::os::raw::c_int {
        ImGuiInputTextState_GetCursorPos(self)
    }
    #[inline]
    pub unsafe fn GetSelectionStart(&self) -> ::std::os::raw::c_int {
        ImGuiInputTextState_GetSelectionStart(self)
    }
    #[inline]
    pub unsafe fn GetSelectionEnd(&self) -> ::std::os::raw::c_int {
        ImGuiInputTextState_GetSelectionEnd(self)
    }
    #[inline]
    pub unsafe fn SelectAll(&mut self) {
        ImGuiInputTextState_SelectAll(self)
    }
    #[inline]
    pub unsafe fn ReloadUserBufAndSelectAll(&mut self) {
        ImGuiInputTextState_ReloadUserBufAndSelectAll(self)
    }
    #[inline]
    pub unsafe fn ReloadUserBufAndKeepSelection(&mut self) {
        ImGuiInputTextState_ReloadUserBufAndKeepSelection(self)
    }
    #[inline]
    pub unsafe fn ReloadUserBufAndMoveToEnd(&mut self) {
        ImGuiInputTextState_ReloadUserBufAndMoveToEnd(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiInputTextState_ImGuiInputTextState(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiInputTextState_ImGuiInputTextState_destructor(self)
    }
}
pub const ImGuiWindowRefreshFlags_None: ImGuiWindowRefreshFlags_ = 0;
pub const ImGuiWindowRefreshFlags_TryToAvoidRefresh: ImGuiWindowRefreshFlags_ = 1;
pub const ImGuiWindowRefreshFlags_RefreshOnHover: ImGuiWindowRefreshFlags_ = 2;
pub const ImGuiWindowRefreshFlags_RefreshOnFocus: ImGuiWindowRefreshFlags_ = 4;
pub type ImGuiWindowRefreshFlags_ = ::std::os::raw::c_int;
pub const ImGuiNextWindowDataFlags_None: ImGuiNextWindowDataFlags_ = 0;
pub const ImGuiNextWindowDataFlags_HasPos: ImGuiNextWindowDataFlags_ = 1;
pub const ImGuiNextWindowDataFlags_HasSize: ImGuiNextWindowDataFlags_ = 2;
pub const ImGuiNextWindowDataFlags_HasContentSize: ImGuiNextWindowDataFlags_ = 4;
pub const ImGuiNextWindowDataFlags_HasCollapsed: ImGuiNextWindowDataFlags_ = 8;
pub const ImGuiNextWindowDataFlags_HasSizeConstraint: ImGuiNextWindowDataFlags_ = 16;
pub const ImGuiNextWindowDataFlags_HasFocus: ImGuiNextWindowDataFlags_ = 32;
pub const ImGuiNextWindowDataFlags_HasBgAlpha: ImGuiNextWindowDataFlags_ = 64;
pub const ImGuiNextWindowDataFlags_HasScroll: ImGuiNextWindowDataFlags_ = 128;
pub const ImGuiNextWindowDataFlags_HasWindowFlags: ImGuiNextWindowDataFlags_ = 256;
pub const ImGuiNextWindowDataFlags_HasChildFlags: ImGuiNextWindowDataFlags_ = 512;
pub const ImGuiNextWindowDataFlags_HasRefreshPolicy: ImGuiNextWindowDataFlags_ = 1024;
pub const ImGuiNextWindowDataFlags_HasViewport: ImGuiNextWindowDataFlags_ = 2048;
pub const ImGuiNextWindowDataFlags_HasDock: ImGuiNextWindowDataFlags_ = 4096;
pub const ImGuiNextWindowDataFlags_HasWindowClass: ImGuiNextWindowDataFlags_ = 8192;
pub type ImGuiNextWindowDataFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiNextWindowData {
    pub HasFlags: ImGuiNextWindowDataFlags,
    pub PosCond: ImGuiCond,
    pub SizeCond: ImGuiCond,
    pub CollapsedCond: ImGuiCond,
    pub DockCond: ImGuiCond,
    pub PosVal: ImVec2,
    pub PosPivotVal: ImVec2,
    pub SizeVal: ImVec2,
    pub ContentSizeVal: ImVec2,
    pub ScrollVal: ImVec2,
    pub WindowFlags: ImGuiWindowFlags,
    pub ChildFlags: ImGuiChildFlags,
    pub PosUndock: bool,
    pub CollapsedVal: bool,
    pub SizeConstraintRect: ImRect,
    pub SizeCallback: ImGuiSizeCallback,
    pub SizeCallbackUserData: *mut ::std::os::raw::c_void,
    pub BgAlphaVal: f32,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub WindowClass: ImGuiWindowClass,
    pub MenuBarOffsetMinVal: ImVec2,
    pub RefreshFlagsVal: ImGuiWindowRefreshFlags,
}
impl Default for ImGuiNextWindowData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiNextItemDataFlags_None: ImGuiNextItemDataFlags_ = 0;
pub const ImGuiNextItemDataFlags_HasWidth: ImGuiNextItemDataFlags_ = 1;
pub const ImGuiNextItemDataFlags_HasOpen: ImGuiNextItemDataFlags_ = 2;
pub const ImGuiNextItemDataFlags_HasShortcut: ImGuiNextItemDataFlags_ = 4;
pub const ImGuiNextItemDataFlags_HasRefVal: ImGuiNextItemDataFlags_ = 8;
pub const ImGuiNextItemDataFlags_HasStorageID: ImGuiNextItemDataFlags_ = 16;
pub type ImGuiNextItemDataFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiNextItemData {
    pub HasFlags: ImGuiNextItemDataFlags,
    pub ItemFlags: ImGuiItemFlags,
    pub FocusScopeId: ImGuiID,
    pub SelectionUserData: ImGuiSelectionUserData,
    pub Width: f32,
    pub Shortcut: ImGuiKeyChord,
    pub ShortcutFlags: ImGuiInputFlags,
    pub OpenVal: bool,
    pub OpenCond: ImU8,
    pub RefVal: ImGuiDataTypeStorage,
    pub StorageId: ImGuiID,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiLastItemData {
    pub ID: ImGuiID,
    pub ItemFlags: ImGuiItemFlags,
    pub StatusFlags: ImGuiItemStatusFlags,
    pub Rect: ImRect,
    pub NavRect: ImRect,
    pub DisplayRect: ImRect,
    pub ClipRect: ImRect,
    pub Shortcut: ImGuiKeyChord,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiTreeNodeStackData {
    pub ID: ImGuiID,
    pub TreeFlags: ImGuiTreeNodeFlags,
    pub ItemFlags: ImGuiItemFlags,
    pub NavRect: ImRect,
    pub DrawLinesX1: f32,
    pub DrawLinesToNodesY2: f32,
    pub DrawLinesTableColumn: ImGuiTableColumnIdx,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiErrorRecoveryState {
    pub SizeOfWindowStack: ::std::os::raw::c_short,
    pub SizeOfIDStack: ::std::os::raw::c_short,
    pub SizeOfTreeStack: ::std::os::raw::c_short,
    pub SizeOfColorStack: ::std::os::raw::c_short,
    pub SizeOfStyleVarStack: ::std::os::raw::c_short,
    pub SizeOfFontStack: ::std::os::raw::c_short,
    pub SizeOfFocusScopeStack: ::std::os::raw::c_short,
    pub SizeOfGroupStack: ::std::os::raw::c_short,
    pub SizeOfItemFlagsStack: ::std::os::raw::c_short,
    pub SizeOfBeginPopupStack: ::std::os::raw::c_short,
    pub SizeOfDisabledStack: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiWindowStackData {
    pub Window: *mut ImGuiWindow,
    pub ParentLastItemDataBackup: ImGuiLastItemData,
    pub StackSizesInBegin: ImGuiErrorRecoveryState,
    pub DisabledOverrideReenable: bool,
    pub DisabledOverrideReenableAlphaBackup: f32,
}
impl Default for ImGuiWindowStackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiShrinkWidthItem {
    pub Index: ::std::os::raw::c_int,
    pub Width: f32,
    pub InitialWidth: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiPtrOrIndex {
    pub Ptr: *mut ::std::os::raw::c_void,
    pub Index: ::std::os::raw::c_int,
}
impl Default for ImGuiPtrOrIndex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDeactivatedItemData {
    pub ID: ImGuiID,
    pub ElapseFrame: ::std::os::raw::c_int,
    pub HasBeenEditedBefore: bool,
    pub IsAlive: bool,
}
pub const ImGuiPopupPositionPolicy_Default: ImGuiPopupPositionPolicy = 0;
pub const ImGuiPopupPositionPolicy_ComboBox: ImGuiPopupPositionPolicy = 1;
pub const ImGuiPopupPositionPolicy_Tooltip: ImGuiPopupPositionPolicy = 2;
pub type ImGuiPopupPositionPolicy = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiPopupData {
    pub PopupId: ImGuiID,
    pub Window: *mut ImGuiWindow,
    pub RestoreNavWindow: *mut ImGuiWindow,
    pub ParentNavLayer: ::std::os::raw::c_int,
    pub OpenFrameCount: ::std::os::raw::c_int,
    pub OpenParentId: ImGuiID,
    pub OpenPopupPos: ImVec2,
    pub OpenMousePos: ImVec2,
}
impl Default for ImGuiPopupData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImBitArrayForNamedKeys = __BindgenOpaqueArray<u32, 5usize>;
pub const ImGuiInputEventType_None: ImGuiInputEventType = 0;
pub const ImGuiInputEventType_MousePos: ImGuiInputEventType = 1;
pub const ImGuiInputEventType_MouseWheel: ImGuiInputEventType = 2;
pub const ImGuiInputEventType_MouseButton: ImGuiInputEventType = 3;
pub const ImGuiInputEventType_MouseViewport: ImGuiInputEventType = 4;
pub const ImGuiInputEventType_Key: ImGuiInputEventType = 5;
pub const ImGuiInputEventType_Text: ImGuiInputEventType = 6;
pub const ImGuiInputEventType_Focus: ImGuiInputEventType = 7;
pub const ImGuiInputEventType_COUNT: ImGuiInputEventType = 8;
pub type ImGuiInputEventType = ::std::os::raw::c_int;
pub const ImGuiInputSource_None: ImGuiInputSource = 0;
pub const ImGuiInputSource_Mouse: ImGuiInputSource = 1;
pub const ImGuiInputSource_Keyboard: ImGuiInputSource = 2;
pub const ImGuiInputSource_Gamepad: ImGuiInputSource = 3;
pub const ImGuiInputSource_COUNT: ImGuiInputSource = 4;
pub type ImGuiInputSource = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiInputEventMousePos {
    pub PosX: f32,
    pub PosY: f32,
    pub MouseSource: ImGuiMouseSource,
}
impl Default for ImGuiInputEventMousePos {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiInputEventMouseWheel {
    pub WheelX: f32,
    pub WheelY: f32,
    pub MouseSource: ImGuiMouseSource,
}
impl Default for ImGuiInputEventMouseWheel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputEventMouseButton {
    pub Button: ::std::os::raw::c_int,
    pub Down: bool,
    pub MouseSource: ImGuiMouseSource,
}
impl Default for ImGuiInputEventMouseButton {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputEventMouseViewport {
    pub HoveredViewportID: ImGuiID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiInputEventKey {
    pub Key: ImGuiKey,
    pub Down: bool,
    pub AnalogValue: f32,
}
impl Default for ImGuiInputEventKey {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputEventText {
    pub Char: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiInputEventAppFocused {
    pub Focused: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiInputEvent {
    pub Type: ImGuiInputEventType,
    pub Source: ImGuiInputSource,
    pub EventId: ImU32,
    pub __bindgen_anon_1: ImGuiInputEvent__bindgen_ty_1,
    pub AddedByTestEngine: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiInputEvent__bindgen_ty_1 {
    pub MousePos: ImGuiInputEventMousePos,
    pub MouseWheel: ImGuiInputEventMouseWheel,
    pub MouseButton: ImGuiInputEventMouseButton,
    pub MouseViewport: ImGuiInputEventMouseViewport,
    pub Key: ImGuiInputEventKey,
    pub Text: ImGuiInputEventText,
    pub AppFocused: ImGuiInputEventAppFocused,
}
impl Default for ImGuiInputEvent__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ImGuiInputEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImGuiKeyRoutingIndex = ImS16;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiKeyRoutingData {
    pub NextEntryIndex: ImGuiKeyRoutingIndex,
    pub Mods: ImU16,
    pub RoutingCurrScore: ImU8,
    pub RoutingNextScore: ImU8,
    pub RoutingCurr: ImGuiID,
    pub RoutingNext: ImGuiID,
}
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ImGuiKeyRoutingTable {
    pub Index: [ImGuiKeyRoutingIndex; 155usize],
    pub Entries: ImVector<ImGuiKeyRoutingData>,
    pub EntriesNext: ImVector<ImGuiKeyRoutingData>,
}
impl Default for ImGuiKeyRoutingTable {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiKeyOwnerData {
    pub OwnerCurr: ImGuiID,
    pub OwnerNext: ImGuiID,
    pub LockThisFrame: bool,
    pub LockUntilRelease: bool,
}
pub const ImGuiInputFlags_RepeatRateDefault: ImGuiInputFlagsPrivate_ = 2;
pub const ImGuiInputFlags_RepeatRateNavMove: ImGuiInputFlagsPrivate_ = 4;
pub const ImGuiInputFlags_RepeatRateNavTweak: ImGuiInputFlagsPrivate_ = 8;
pub const ImGuiInputFlags_RepeatUntilRelease: ImGuiInputFlagsPrivate_ = 16;
pub const ImGuiInputFlags_RepeatUntilKeyModsChange: ImGuiInputFlagsPrivate_ = 32;
pub const ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone: ImGuiInputFlagsPrivate_ = 64;
pub const ImGuiInputFlags_RepeatUntilOtherKeyPress: ImGuiInputFlagsPrivate_ = 128;
pub const ImGuiInputFlags_LockThisFrame: ImGuiInputFlagsPrivate_ = 1048576;
pub const ImGuiInputFlags_LockUntilRelease: ImGuiInputFlagsPrivate_ = 2097152;
pub const ImGuiInputFlags_CondHovered: ImGuiInputFlagsPrivate_ = 4194304;
pub const ImGuiInputFlags_CondActive: ImGuiInputFlagsPrivate_ = 8388608;
pub const ImGuiInputFlags_CondDefault_: ImGuiInputFlagsPrivate_ = 12582912;
pub const ImGuiInputFlags_RepeatRateMask_: ImGuiInputFlagsPrivate_ = 14;
pub const ImGuiInputFlags_RepeatUntilMask_: ImGuiInputFlagsPrivate_ = 240;
pub const ImGuiInputFlags_RepeatMask_: ImGuiInputFlagsPrivate_ = 255;
pub const ImGuiInputFlags_CondMask_: ImGuiInputFlagsPrivate_ = 12582912;
pub const ImGuiInputFlags_RouteTypeMask_: ImGuiInputFlagsPrivate_ = 15360;
pub const ImGuiInputFlags_RouteOptionsMask_: ImGuiInputFlagsPrivate_ = 245760;
pub const ImGuiInputFlags_SupportedByIsKeyPressed: ImGuiInputFlagsPrivate_ = 255;
pub const ImGuiInputFlags_SupportedByIsMouseClicked: ImGuiInputFlagsPrivate_ = 1;
pub const ImGuiInputFlags_SupportedByShortcut: ImGuiInputFlagsPrivate_ = 261375;
pub const ImGuiInputFlags_SupportedBySetNextItemShortcut: ImGuiInputFlagsPrivate_ = 523519;
pub const ImGuiInputFlags_SupportedBySetKeyOwner: ImGuiInputFlagsPrivate_ = 3145728;
pub const ImGuiInputFlags_SupportedBySetItemKeyOwner: ImGuiInputFlagsPrivate_ = 15728640;
pub type ImGuiInputFlagsPrivate_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiListClipperRange {
    pub Min: ::std::os::raw::c_int,
    pub Max: ::std::os::raw::c_int,
    pub PosToIndexConvert: bool,
    pub PosToIndexOffsetMin: ImS8,
    pub PosToIndexOffsetMax: ImS8,
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiListClipperData {
    pub ListClipper: *mut ImGuiListClipper,
    pub LossynessOffset: f32,
    pub StepNo: ::std::os::raw::c_int,
    pub ItemsFrozen: ::std::os::raw::c_int,
    pub Ranges: ImVector<ImGuiListClipperRange>,
}
impl Default for ImGuiListClipperData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiActivateFlags_None: ImGuiActivateFlags_ = 0;
pub const ImGuiActivateFlags_PreferInput: ImGuiActivateFlags_ = 1;
pub const ImGuiActivateFlags_PreferTweak: ImGuiActivateFlags_ = 2;
pub const ImGuiActivateFlags_TryToPreserveState: ImGuiActivateFlags_ = 4;
pub const ImGuiActivateFlags_FromTabbing: ImGuiActivateFlags_ = 8;
pub const ImGuiActivateFlags_FromShortcut: ImGuiActivateFlags_ = 16;
pub type ImGuiActivateFlags_ = ::std::os::raw::c_int;
pub const ImGuiScrollFlags_None: ImGuiScrollFlags_ = 0;
pub const ImGuiScrollFlags_KeepVisibleEdgeX: ImGuiScrollFlags_ = 1;
pub const ImGuiScrollFlags_KeepVisibleEdgeY: ImGuiScrollFlags_ = 2;
pub const ImGuiScrollFlags_KeepVisibleCenterX: ImGuiScrollFlags_ = 4;
pub const ImGuiScrollFlags_KeepVisibleCenterY: ImGuiScrollFlags_ = 8;
pub const ImGuiScrollFlags_AlwaysCenterX: ImGuiScrollFlags_ = 16;
pub const ImGuiScrollFlags_AlwaysCenterY: ImGuiScrollFlags_ = 32;
pub const ImGuiScrollFlags_NoScrollParent: ImGuiScrollFlags_ = 64;
pub const ImGuiScrollFlags_MaskX_: ImGuiScrollFlags_ = 21;
pub const ImGuiScrollFlags_MaskY_: ImGuiScrollFlags_ = 42;
pub type ImGuiScrollFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavRenderCursorFlags_None: ImGuiNavRenderCursorFlags_ = 0;
pub const ImGuiNavRenderCursorFlags_Compact: ImGuiNavRenderCursorFlags_ = 2;
pub const ImGuiNavRenderCursorFlags_AlwaysDraw: ImGuiNavRenderCursorFlags_ = 4;
pub const ImGuiNavRenderCursorFlags_NoRounding: ImGuiNavRenderCursorFlags_ = 8;
pub type ImGuiNavRenderCursorFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavMoveFlags_None: ImGuiNavMoveFlags_ = 0;
pub const ImGuiNavMoveFlags_LoopX: ImGuiNavMoveFlags_ = 1;
pub const ImGuiNavMoveFlags_LoopY: ImGuiNavMoveFlags_ = 2;
pub const ImGuiNavMoveFlags_WrapX: ImGuiNavMoveFlags_ = 4;
pub const ImGuiNavMoveFlags_WrapY: ImGuiNavMoveFlags_ = 8;
pub const ImGuiNavMoveFlags_WrapMask_: ImGuiNavMoveFlags_ = 15;
pub const ImGuiNavMoveFlags_AllowCurrentNavId: ImGuiNavMoveFlags_ = 16;
pub const ImGuiNavMoveFlags_AlsoScoreVisibleSet: ImGuiNavMoveFlags_ = 32;
pub const ImGuiNavMoveFlags_ScrollToEdgeY: ImGuiNavMoveFlags_ = 64;
pub const ImGuiNavMoveFlags_Forwarded: ImGuiNavMoveFlags_ = 128;
pub const ImGuiNavMoveFlags_DebugNoResult: ImGuiNavMoveFlags_ = 256;
pub const ImGuiNavMoveFlags_FocusApi: ImGuiNavMoveFlags_ = 512;
pub const ImGuiNavMoveFlags_IsTabbing: ImGuiNavMoveFlags_ = 1024;
pub const ImGuiNavMoveFlags_IsPageMove: ImGuiNavMoveFlags_ = 2048;
pub const ImGuiNavMoveFlags_Activate: ImGuiNavMoveFlags_ = 4096;
pub const ImGuiNavMoveFlags_NoSelect: ImGuiNavMoveFlags_ = 8192;
pub const ImGuiNavMoveFlags_NoSetNavCursorVisible: ImGuiNavMoveFlags_ = 16384;
pub const ImGuiNavMoveFlags_NoClearActiveId: ImGuiNavMoveFlags_ = 32768;
pub type ImGuiNavMoveFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavLayer_Main: ImGuiNavLayer = 0;
pub const ImGuiNavLayer_Menu: ImGuiNavLayer = 1;
pub const ImGuiNavLayer_COUNT: ImGuiNavLayer = 2;
pub type ImGuiNavLayer = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiNavItemData {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub FocusScopeId: ImGuiID,
    pub RectRel: ImRect,
    pub ItemFlags: ImGuiItemFlags,
    pub DistBox: f32,
    pub DistCenter: f32,
    pub DistAxial: f32,
    pub SelectionUserData: ImGuiSelectionUserData,
}
impl Default for ImGuiNavItemData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiFocusScopeData {
    pub ID: ImGuiID,
    pub WindowID: ImGuiID,
}
pub const ImGuiTypingSelectFlags_None: ImGuiTypingSelectFlags_ = 0;
pub const ImGuiTypingSelectFlags_AllowBackspace: ImGuiTypingSelectFlags_ = 1;
pub const ImGuiTypingSelectFlags_AllowSingleCharMode: ImGuiTypingSelectFlags_ = 2;
pub type ImGuiTypingSelectFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTypingSelectRequest {
    pub Flags: ImGuiTypingSelectFlags,
    pub SearchBufferLen: ::std::os::raw::c_int,
    pub SearchBuffer: *const ::std::os::raw::c_char,
    pub SelectRequest: bool,
    pub SingleCharMode: bool,
    pub SingleCharSize: ImS8,
}
impl Default for ImGuiTypingSelectRequest {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiTypingSelectState {
    pub Request: ImGuiTypingSelectRequest,
    pub SearchBuffer: [::std::os::raw::c_char; 64usize],
    pub FocusScope: ImGuiID,
    pub LastRequestFrame: ::std::os::raw::c_int,
    pub LastRequestTime: f32,
    pub SingleCharModeLock: bool,
}
impl Default for ImGuiTypingSelectState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiOldColumnFlags_None: ImGuiOldColumnFlags_ = 0;
pub const ImGuiOldColumnFlags_NoBorder: ImGuiOldColumnFlags_ = 1;
pub const ImGuiOldColumnFlags_NoResize: ImGuiOldColumnFlags_ = 2;
pub const ImGuiOldColumnFlags_NoPreserveWidths: ImGuiOldColumnFlags_ = 4;
pub const ImGuiOldColumnFlags_NoForceWithinWindow: ImGuiOldColumnFlags_ = 8;
pub const ImGuiOldColumnFlags_GrowParentContentsSize: ImGuiOldColumnFlags_ = 16;
pub type ImGuiOldColumnFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiOldColumnData {
    pub OffsetNorm: f32,
    pub OffsetNormBeforeResize: f32,
    pub Flags: ImGuiOldColumnFlags,
    pub ClipRect: ImRect,
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiOldColumns {
    pub ID: ImGuiID,
    pub Flags: ImGuiOldColumnFlags,
    pub IsFirstFrame: bool,
    pub IsBeingResized: bool,
    pub Current: ::std::os::raw::c_int,
    pub Count: ::std::os::raw::c_int,
    pub OffMinX: f32,
    pub OffMaxX: f32,
    pub LineMinY: f32,
    pub LineMaxY: f32,
    pub HostCursorPosY: f32,
    pub HostCursorMaxPosX: f32,
    pub HostInitialClipRect: ImRect,
    pub HostBackupClipRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub Columns: ImVector<ImGuiOldColumnData>,
    pub Splitter: ImDrawListSplitter,
}
impl Default for ImGuiOldColumns {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiBoxSelectState {
    pub ID: ImGuiID,
    pub IsActive: bool,
    pub IsStarting: bool,
    pub IsStartedFromVoid: bool,
    pub IsStartedSetNavIdOnce: bool,
    pub RequestClear: bool,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u32,
    pub StartPosRel: ImVec2,
    pub EndPosRel: ImVec2,
    pub ScrollAccum: ImVec2,
    pub Window: *mut ImGuiWindow,
    pub UnclipMode: bool,
    pub UnclipRect: ImRect,
    pub BoxSelectRectPrev: ImRect,
    pub BoxSelectRectCurr: ImRect,
}
impl Default for ImGuiBoxSelectState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiBoxSelectState {
    #[inline]
    pub fn KeyMods(&self) -> ImGuiKeyChord {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_KeyMods(&mut self, val: ImGuiKeyChord) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn KeyMods_raw(this: *const Self) -> ImGuiKeyChord {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_KeyMods_raw(this: *mut Self, val: ImGuiKeyChord) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(KeyMods: ImGuiKeyChord) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let KeyMods: u32 = unsafe { ::std::mem::transmute(KeyMods) };
            KeyMods as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiMultiSelectTempData {
    pub IO: ImGuiMultiSelectIO,
    pub Storage: *mut ImGuiMultiSelectState,
    pub FocusScopeId: ImGuiID,
    pub Flags: ImGuiMultiSelectFlags,
    pub ScopeRectMin: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub LastSubmittedItem: ImGuiSelectionUserData,
    pub BoxSelectId: ImGuiID,
    pub KeyMods: ImGuiKeyChord,
    pub LoopRequestSetAll: ImS8,
    pub IsEndIO: bool,
    pub IsFocused: bool,
    pub IsKeyboardSetRange: bool,
    pub NavIdPassedBy: bool,
    pub RangeSrcPassedBy: bool,
    pub RangeDstPassedBy: bool,
}
impl Default for ImGuiMultiSelectTempData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiMultiSelectState {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastSelectionSize: ::std::os::raw::c_int,
    pub RangeSelected: ImS8,
    pub NavIdSelected: ImS8,
    pub RangeSrcItem: ImGuiSelectionUserData,
    pub NavIdItem: ImGuiSelectionUserData,
}
impl Default for ImGuiMultiSelectState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiDockNodeFlags_DockSpace: ImGuiDockNodeFlagsPrivate_ = 1024;
pub const ImGuiDockNodeFlags_CentralNode: ImGuiDockNodeFlagsPrivate_ = 2048;
pub const ImGuiDockNodeFlags_NoTabBar: ImGuiDockNodeFlagsPrivate_ = 4096;
pub const ImGuiDockNodeFlags_HiddenTabBar: ImGuiDockNodeFlagsPrivate_ = 8192;
pub const ImGuiDockNodeFlags_NoWindowMenuButton: ImGuiDockNodeFlagsPrivate_ = 16384;
pub const ImGuiDockNodeFlags_NoCloseButton: ImGuiDockNodeFlagsPrivate_ = 32768;
pub const ImGuiDockNodeFlags_NoResizeX: ImGuiDockNodeFlagsPrivate_ = 65536;
pub const ImGuiDockNodeFlags_NoResizeY: ImGuiDockNodeFlagsPrivate_ = 131072;
pub const ImGuiDockNodeFlags_DockedWindowsInFocusRoute: ImGuiDockNodeFlagsPrivate_ = 262144;
pub const ImGuiDockNodeFlags_NoDockingSplitOther: ImGuiDockNodeFlagsPrivate_ = 524288;
pub const ImGuiDockNodeFlags_NoDockingOverMe: ImGuiDockNodeFlagsPrivate_ = 1048576;
pub const ImGuiDockNodeFlags_NoDockingOverOther: ImGuiDockNodeFlagsPrivate_ = 2097152;
pub const ImGuiDockNodeFlags_NoDockingOverEmpty: ImGuiDockNodeFlagsPrivate_ = 4194304;
pub const ImGuiDockNodeFlags_NoDocking: ImGuiDockNodeFlagsPrivate_ = 7864336;
pub const ImGuiDockNodeFlags_SharedFlagsInheritMask_: ImGuiDockNodeFlagsPrivate_ = -1;
pub const ImGuiDockNodeFlags_NoResizeFlagsMask_: ImGuiDockNodeFlagsPrivate_ = 196640;
pub const ImGuiDockNodeFlags_LocalFlagsTransferMask_: ImGuiDockNodeFlagsPrivate_ = 260208;
pub const ImGuiDockNodeFlags_SavedFlagsMask_: ImGuiDockNodeFlagsPrivate_ = 261152;
pub type ImGuiDockNodeFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiDataAuthority_Auto: ImGuiDataAuthority_ = 0;
pub const ImGuiDataAuthority_DockNode: ImGuiDataAuthority_ = 1;
pub const ImGuiDataAuthority_Window: ImGuiDataAuthority_ = 2;
pub type ImGuiDataAuthority_ = ::std::os::raw::c_int;
pub const ImGuiDockNodeState_Unknown: ImGuiDockNodeState = 0;
pub const ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow: ImGuiDockNodeState = 1;
pub const ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing: ImGuiDockNodeState = 2;
pub const ImGuiDockNodeState_HostWindowVisible: ImGuiDockNodeState = 3;
pub type ImGuiDockNodeState = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiDockNode {
    pub ID: ImGuiID,
    pub SharedFlags: ImGuiDockNodeFlags,
    pub LocalFlags: ImGuiDockNodeFlags,
    pub LocalFlagsInWindows: ImGuiDockNodeFlags,
    pub MergedFlags: ImGuiDockNodeFlags,
    pub State: ImGuiDockNodeState,
    pub ParentNode: *mut ImGuiDockNode,
    pub ChildNodes: [*mut ImGuiDockNode; 2usize],
    pub Windows: ImVector<*mut ImGuiWindow>,
    pub TabBar: *mut ImGuiTabBar,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeRef: ImVec2,
    pub SplitAxis: ImGuiAxis,
    pub WindowClass: ImGuiWindowClass,
    pub LastBgColor: ImU32,
    pub HostWindow: *mut ImGuiWindow,
    pub VisibleWindow: *mut ImGuiWindow,
    pub CentralNode: *mut ImGuiDockNode,
    pub OnlyNodeWithWindows: *mut ImGuiDockNode,
    pub CountNodeWithWindows: ::std::os::raw::c_int,
    pub LastFrameAlive: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameFocused: ::std::os::raw::c_int,
    pub LastFocusedNodeId: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub WantCloseTabId: ImGuiID,
    pub RefViewportId: ImGuiID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiDockNode@@QEAA@I@Z"]
    pub fn ImGuiDockNode_ImGuiDockNode(this: *mut ImGuiDockNode, id: ImGuiID);
}
unsafe extern "C" {
    #[link_name = "\u{1}??1ImGuiDockNode@@QEAA@XZ"]
    pub fn ImGuiDockNode_ImGuiDockNode_destructor(this: *mut ImGuiDockNode);
}
impl Default for ImGuiDockNode {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiDockNode {
    #[inline]
    pub fn AuthorityForPos(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForPos(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForPos_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForPos_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuthorityForSize(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForSize(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForSize_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForSize_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuthorityForViewport(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForViewport(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForViewport_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForViewport_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsFocused(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsFocused(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsFocused_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsFocused_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsBgDrawnThisFrame(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsBgDrawnThisFrame(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsBgDrawnThisFrame_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsBgDrawnThisFrame_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasCloseButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCloseButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasCloseButton_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasCloseButton_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasWindowMenuButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasWindowMenuButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasWindowMenuButton_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasWindowMenuButton_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasCentralNodeChild(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCentralNodeChild(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasCentralNodeChild_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasCentralNodeChild_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantCloseAll(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantCloseAll(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantCloseAll_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantCloseAll_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantLockSizeOnce(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantLockSizeOnce(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantLockSizeOnce_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantLockSizeOnce_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantMouseMove(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantMouseMove(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantMouseMove_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantMouseMove_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantHiddenTabBarUpdate(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarUpdate(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantHiddenTabBarUpdate_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantHiddenTabBarUpdate_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantHiddenTabBarToggle(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarToggle(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantHiddenTabBarToggle_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantHiddenTabBarToggle_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AuthorityForPos: ImGuiDataAuthority,
        AuthorityForSize: ImGuiDataAuthority,
        AuthorityForViewport: ImGuiDataAuthority,
        IsVisible: bool,
        IsFocused: bool,
        IsBgDrawnThisFrame: bool,
        HasCloseButton: bool,
        HasWindowMenuButton: bool,
        HasCentralNodeChild: bool,
        WantCloseAll: bool,
        WantLockSizeOnce: bool,
        WantMouseMove: bool,
        WantHiddenTabBarUpdate: bool,
        WantHiddenTabBarToggle: bool,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let AuthorityForPos: u32 = unsafe { ::std::mem::transmute(AuthorityForPos) };
            AuthorityForPos as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let AuthorityForSize: u32 = unsafe { ::std::mem::transmute(AuthorityForSize) };
            AuthorityForSize as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let AuthorityForViewport: u32 = unsafe { ::std::mem::transmute(AuthorityForViewport) };
            AuthorityForViewport as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let IsVisible: u8 = unsafe { ::std::mem::transmute(IsVisible) };
            IsVisible as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let IsFocused: u8 = unsafe { ::std::mem::transmute(IsFocused) };
            IsFocused as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let IsBgDrawnThisFrame: u8 = unsafe { ::std::mem::transmute(IsBgDrawnThisFrame) };
            IsBgDrawnThisFrame as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let HasCloseButton: u8 = unsafe { ::std::mem::transmute(HasCloseButton) };
            HasCloseButton as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let HasWindowMenuButton: u8 = unsafe { ::std::mem::transmute(HasWindowMenuButton) };
            HasWindowMenuButton as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let HasCentralNodeChild: u8 = unsafe { ::std::mem::transmute(HasCentralNodeChild) };
            HasCentralNodeChild as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let WantCloseAll: u8 = unsafe { ::std::mem::transmute(WantCloseAll) };
            WantCloseAll as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let WantLockSizeOnce: u8 = unsafe { ::std::mem::transmute(WantLockSizeOnce) };
            WantLockSizeOnce as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let WantMouseMove: u8 = unsafe { ::std::mem::transmute(WantMouseMove) };
            WantMouseMove as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let WantHiddenTabBarUpdate: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarUpdate) };
            WantHiddenTabBarUpdate as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let WantHiddenTabBarToggle: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarToggle) };
            WantHiddenTabBarToggle as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub unsafe fn new(id: ImGuiID) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiDockNode_ImGuiDockNode(__bindgen_tmp.as_mut_ptr(), id);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiDockNode_ImGuiDockNode_destructor(self)
    }
}
pub const ImGuiWindowDockStyleCol_Text: ImGuiWindowDockStyleCol = 0;
pub const ImGuiWindowDockStyleCol_TabHovered: ImGuiWindowDockStyleCol = 1;
pub const ImGuiWindowDockStyleCol_TabFocused: ImGuiWindowDockStyleCol = 2;
pub const ImGuiWindowDockStyleCol_TabSelected: ImGuiWindowDockStyleCol = 3;
pub const ImGuiWindowDockStyleCol_TabSelectedOverline: ImGuiWindowDockStyleCol = 4;
pub const ImGuiWindowDockStyleCol_TabDimmed: ImGuiWindowDockStyleCol = 5;
pub const ImGuiWindowDockStyleCol_TabDimmedSelected: ImGuiWindowDockStyleCol = 6;
pub const ImGuiWindowDockStyleCol_TabDimmedSelectedOverline: ImGuiWindowDockStyleCol = 7;
pub const ImGuiWindowDockStyleCol_COUNT: ImGuiWindowDockStyleCol = 8;
pub type ImGuiWindowDockStyleCol = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiWindowDockStyle {
    pub Colors: [ImU32; 8usize],
}
#[repr(C)]
pub struct ImGuiDockContext {
    pub Nodes: ImGuiStorage,
    pub Requests: ImVector<ImGuiDockRequest>,
    pub NodesSettings: ImVector<ImGuiDockNodeSettings>,
    pub WantFullRebuild: bool,
}
impl Default for ImGuiDockContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiViewportP {
    pub _base: ImGuiViewport,
    pub Window: *mut ImGuiWindow,
    pub Idx: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFocusedStampCount: ::std::os::raw::c_int,
    pub LastNameHash: ImGuiID,
    pub LastPos: ImVec2,
    pub LastSize: ImVec2,
    pub Alpha: f32,
    pub LastAlpha: f32,
    pub LastFocusedHadNavWindow: bool,
    pub PlatformMonitor: ::std::os::raw::c_short,
    pub BgFgDrawListsLastFrame: [::std::os::raw::c_int; 2usize],
    pub BgFgDrawLists: [*mut ImDrawList; 2usize],
    pub DrawDataP: ImDrawData,
    pub DrawDataBuilder: ImDrawDataBuilder,
    pub LastPlatformPos: ImVec2,
    pub LastPlatformSize: ImVec2,
    pub LastRendererSize: ImVec2,
    pub WorkInsetMin: ImVec2,
    pub WorkInsetMax: ImVec2,
    pub BuildWorkInsetMin: ImVec2,
    pub BuildWorkInsetMax: ImVec2,
}
impl Default for ImGuiViewportP {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiWindowSettings {
    pub ID: ImGuiID,
    pub Pos: ImVec2ih,
    pub Size: ImVec2ih,
    pub ViewportPos: ImVec2ih,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub ClassId: ImGuiID,
    pub DockOrder: ::std::os::raw::c_short,
    pub Collapsed: bool,
    pub IsChild: bool,
    pub WantApply: bool,
    pub WantDelete: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiSettingsHandler {
    pub TypeName: *const ::std::os::raw::c_char,
    pub TypeHash: ImGuiID,
    pub ClearAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadInitFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadOpenFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReadLineFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            entry: *mut ::std::os::raw::c_void,
            line: *const ::std::os::raw::c_char,
        ),
    >,
    pub ApplyAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub WriteAllFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            out_buf: *mut ImGuiTextBuffer,
        ),
    >,
    pub UserData: *mut ::std::os::raw::c_void,
}
impl Default for ImGuiSettingsHandler {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ImGuiLocKey_VersionStr: ImGuiLocKey = 0;
pub const ImGuiLocKey_TableSizeOne: ImGuiLocKey = 1;
pub const ImGuiLocKey_TableSizeAllFit: ImGuiLocKey = 2;
pub const ImGuiLocKey_TableSizeAllDefault: ImGuiLocKey = 3;
pub const ImGuiLocKey_TableResetOrder: ImGuiLocKey = 4;
pub const ImGuiLocKey_WindowingMainMenuBar: ImGuiLocKey = 5;
pub const ImGuiLocKey_WindowingPopup: ImGuiLocKey = 6;
pub const ImGuiLocKey_WindowingUntitled: ImGuiLocKey = 7;
pub const ImGuiLocKey_OpenLink_s: ImGuiLocKey = 8;
pub const ImGuiLocKey_CopyLink: ImGuiLocKey = 9;
pub const ImGuiLocKey_DockingHideTabBar: ImGuiLocKey = 10;
pub const ImGuiLocKey_DockingHoldShiftToDock: ImGuiLocKey = 11;
pub const ImGuiLocKey_DockingDragToUndockOrMoveNode: ImGuiLocKey = 12;
pub const ImGuiLocKey_COUNT: ImGuiLocKey = 13;
pub type ImGuiLocKey = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiLocEntry {
    pub Key: ImGuiLocKey,
    pub Text: *const ::std::os::raw::c_char,
}
impl Default for ImGuiLocEntry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImGuiErrorCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ImGuiContext,
        user_data: *mut ::std::os::raw::c_void,
        msg: *const ::std::os::raw::c_char,
    ),
>;
pub const ImGuiDebugLogFlags_None: ImGuiDebugLogFlags_ = 0;
pub const ImGuiDebugLogFlags_EventError: ImGuiDebugLogFlags_ = 1;
pub const ImGuiDebugLogFlags_EventActiveId: ImGuiDebugLogFlags_ = 2;
pub const ImGuiDebugLogFlags_EventFocus: ImGuiDebugLogFlags_ = 4;
pub const ImGuiDebugLogFlags_EventPopup: ImGuiDebugLogFlags_ = 8;
pub const ImGuiDebugLogFlags_EventNav: ImGuiDebugLogFlags_ = 16;
pub const ImGuiDebugLogFlags_EventClipper: ImGuiDebugLogFlags_ = 32;
pub const ImGuiDebugLogFlags_EventSelection: ImGuiDebugLogFlags_ = 64;
pub const ImGuiDebugLogFlags_EventIO: ImGuiDebugLogFlags_ = 128;
pub const ImGuiDebugLogFlags_EventFont: ImGuiDebugLogFlags_ = 256;
pub const ImGuiDebugLogFlags_EventInputRouting: ImGuiDebugLogFlags_ = 512;
pub const ImGuiDebugLogFlags_EventDocking: ImGuiDebugLogFlags_ = 1024;
pub const ImGuiDebugLogFlags_EventViewport: ImGuiDebugLogFlags_ = 2048;
pub const ImGuiDebugLogFlags_EventMask_: ImGuiDebugLogFlags_ = 4095;
pub const ImGuiDebugLogFlags_OutputToTTY: ImGuiDebugLogFlags_ = 1048576;
pub const ImGuiDebugLogFlags_OutputToTestEngine: ImGuiDebugLogFlags_ = 2097152;
pub type ImGuiDebugLogFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDebugAllocEntry {
    pub FrameCount: ::std::os::raw::c_int,
    pub AllocCount: ImS16,
    pub FreeCount: ImS16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiDebugAllocInfo {
    pub TotalAllocCount: ::std::os::raw::c_int,
    pub TotalFreeCount: ::std::os::raw::c_int,
    pub LastEntriesIdx: ImS16,
    pub LastEntriesBuf: [ImGuiDebugAllocEntry; 6usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiMetricsConfig {
    pub ShowDebugLog: bool,
    pub ShowIDStackTool: bool,
    pub ShowWindowsRects: bool,
    pub ShowWindowsBeginOrder: bool,
    pub ShowTablesRects: bool,
    pub ShowDrawCmdMesh: bool,
    pub ShowDrawCmdBoundingBoxes: bool,
    pub ShowTextEncodingViewer: bool,
    pub ShowTextureUsedRect: bool,
    pub ShowDockingNodes: bool,
    pub ShowWindowsRectsType: ::std::os::raw::c_int,
    pub ShowTablesRectsType: ::std::os::raw::c_int,
    pub HighlightMonitorIdx: ::std::os::raw::c_int,
    pub HighlightViewportID: ImGuiID,
    pub ShowFontPreview: bool,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiStackLevelInfo {
    pub ID: ImGuiID,
    pub QueryFrameCount: ImS8,
    pub QuerySuccess: bool,
    pub DataType: ImS8,
    pub DescOffset: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiIDStackTool {
    pub LastActiveFrame: ::std::os::raw::c_int,
    pub StackLevel: ::std::os::raw::c_int,
    pub QueryId: ImGuiID,
    pub Results: ImVector<ImGuiStackLevelInfo>,
    pub OptHexEncodeNonAsciiChars: bool,
    pub OptCopyToClipboardOnCtrlC: bool,
    pub CopyToClipboardLastTime: f32,
    pub ResultPathsBuf: ImGuiTextBuffer,
    pub ResultTempBuf: ImGuiTextBuffer,
}
impl Default for ImGuiIDStackTool {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ImGuiContextHookCallback = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ImGuiContext, hook: *mut ImGuiContextHook),
>;
pub const ImGuiContextHookType_NewFramePre: ImGuiContextHookType = 0;
pub const ImGuiContextHookType_NewFramePost: ImGuiContextHookType = 1;
pub const ImGuiContextHookType_EndFramePre: ImGuiContextHookType = 2;
pub const ImGuiContextHookType_EndFramePost: ImGuiContextHookType = 3;
pub const ImGuiContextHookType_RenderPre: ImGuiContextHookType = 4;
pub const ImGuiContextHookType_RenderPost: ImGuiContextHookType = 5;
pub const ImGuiContextHookType_Shutdown: ImGuiContextHookType = 6;
pub const ImGuiContextHookType_PendingRemoval_: ImGuiContextHookType = 7;
pub type ImGuiContextHookType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiContextHook {
    pub HookId: ImGuiID,
    pub Type: ImGuiContextHookType,
    pub Owner: ImGuiID,
    pub Callback: ImGuiContextHookCallback,
    pub UserData: *mut ::std::os::raw::c_void,
}
impl Default for ImGuiContextHook {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiContext {
    pub Initialized: bool,
    pub IO: ImGuiIO,
    pub PlatformIO: ImGuiPlatformIO,
    pub Style: ImGuiStyle,
    pub ConfigFlagsCurrFrame: ImGuiConfigFlags,
    pub ConfigFlagsLastFrame: ImGuiConfigFlags,
    pub FontAtlases: ImVector<*mut ImFontAtlas>,
    pub Font: *mut ImFont,
    pub FontBaked: *mut ImFontBaked,
    pub FontSize: f32,
    pub FontSizeBase: f32,
    pub FontBakedScale: f32,
    pub FontRasterizerDensity: f32,
    pub CurrentDpiScale: f32,
    pub DrawListSharedData: ImDrawListSharedData,
    pub Time: f64,
    pub FrameCount: ::std::os::raw::c_int,
    pub FrameCountEnded: ::std::os::raw::c_int,
    pub FrameCountPlatformEnded: ::std::os::raw::c_int,
    pub FrameCountRendered: ::std::os::raw::c_int,
    pub WithinEndChildID: ImGuiID,
    pub WithinFrameScope: bool,
    pub WithinFrameScopeWithImplicitWindow: bool,
    pub GcCompactAll: bool,
    pub TestEngineHookItems: bool,
    pub TestEngine: *mut ::std::os::raw::c_void,
    pub ContextName: [::std::os::raw::c_char; 16usize],
    pub InputEventsQueue: ImVector<ImGuiInputEvent>,
    pub InputEventsTrail: ImVector<ImGuiInputEvent>,
    pub InputEventsNextMouseSource: ImGuiMouseSource,
    pub InputEventsNextEventId: ImU32,
    pub Windows: ImVector<*mut ImGuiWindow>,
    pub WindowsFocusOrder: ImVector<*mut ImGuiWindow>,
    pub WindowsTempSortBuffer: ImVector<*mut ImGuiWindow>,
    pub CurrentWindowStack: ImVector<ImGuiWindowStackData>,
    pub WindowsById: ImGuiStorage,
    pub WindowsActiveCount: ::std::os::raw::c_int,
    pub WindowsBorderHoverPadding: f32,
    pub DebugBreakInWindow: ImGuiID,
    pub CurrentWindow: *mut ImGuiWindow,
    pub HoveredWindow: *mut ImGuiWindow,
    pub HoveredWindowUnderMovingWindow: *mut ImGuiWindow,
    pub HoveredWindowBeforeClear: *mut ImGuiWindow,
    pub MovingWindow: *mut ImGuiWindow,
    pub WheelingWindow: *mut ImGuiWindow,
    pub WheelingWindowRefMousePos: ImVec2,
    pub WheelingWindowStartFrame: ::std::os::raw::c_int,
    pub WheelingWindowScrolledFrame: ::std::os::raw::c_int,
    pub WheelingWindowReleaseTimer: f32,
    pub WheelingWindowWheelRemainder: ImVec2,
    pub WheelingAxisAvg: ImVec2,
    pub DebugDrawIdConflictsId: ImGuiID,
    pub DebugHookIdInfo: ImGuiID,
    pub HoveredId: ImGuiID,
    pub HoveredIdPreviousFrame: ImGuiID,
    pub HoveredIdPreviousFrameItemCount: ::std::os::raw::c_int,
    pub HoveredIdTimer: f32,
    pub HoveredIdNotActiveTimer: f32,
    pub HoveredIdAllowOverlap: bool,
    pub HoveredIdIsDisabled: bool,
    pub ItemUnclipByLog: bool,
    pub ActiveId: ImGuiID,
    pub ActiveIdIsAlive: ImGuiID,
    pub ActiveIdTimer: f32,
    pub ActiveIdIsJustActivated: bool,
    pub ActiveIdAllowOverlap: bool,
    pub ActiveIdNoClearOnFocusLoss: bool,
    pub ActiveIdHasBeenPressedBefore: bool,
    pub ActiveIdHasBeenEditedBefore: bool,
    pub ActiveIdHasBeenEditedThisFrame: bool,
    pub ActiveIdFromShortcut: bool,
    pub ActiveIdDisabledId: ImGuiID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ActiveIdClickOffset: ImVec2,
    pub ActiveIdWindow: *mut ImGuiWindow,
    pub ActiveIdSource: ImGuiInputSource,
    pub ActiveIdPreviousFrame: ImGuiID,
    pub DeactivatedItemData: ImGuiDeactivatedItemData,
    pub ActiveIdValueOnActivation: ImGuiDataTypeStorage,
    pub LastActiveId: ImGuiID,
    pub LastActiveIdTimer: f32,
    pub LastKeyModsChangeTime: f64,
    pub LastKeyModsChangeFromNoneTime: f64,
    pub LastKeyboardKeyPressTime: f64,
    pub KeysMayBeCharInput: ImBitArrayForNamedKeys,
    pub KeysOwnerData: [ImGuiKeyOwnerData; 155usize],
    pub KeysRoutingTable: ImGuiKeyRoutingTable,
    pub ActiveIdUsingNavDirMask: ImU32,
    pub ActiveIdUsingAllKeyboardKeys: bool,
    pub DebugBreakInShortcutRouting: ImGuiKeyChord,
    pub CurrentFocusScopeId: ImGuiID,
    pub CurrentItemFlags: ImGuiItemFlags,
    pub DebugLocateId: ImGuiID,
    pub NextItemData: ImGuiNextItemData,
    pub LastItemData: ImGuiLastItemData,
    pub NextWindowData: ImGuiNextWindowData,
    pub DebugShowGroupRects: bool,
    pub DebugFlashStyleColorIdx: ImGuiCol,
    pub ColorStack: ImVector<ImGuiColorMod>,
    pub StyleVarStack: ImVector<ImGuiStyleMod>,
    pub FontStack: ImVector<ImFontStackData>,
    pub FocusScopeStack: ImVector<ImGuiFocusScopeData>,
    pub ItemFlagsStack: ImVector<ImGuiItemFlags>,
    pub GroupStack: ImVector<ImGuiGroupData>,
    pub OpenPopupStack: ImVector<ImGuiPopupData>,
    pub BeginPopupStack: ImVector<ImGuiPopupData>,
    pub TreeNodeStack: ImVector<ImGuiTreeNodeStackData>,
    pub Viewports: ImVector<*mut ImGuiViewportP>,
    pub CurrentViewport: *mut ImGuiViewportP,
    pub MouseViewport: *mut ImGuiViewportP,
    pub MouseLastHoveredViewport: *mut ImGuiViewportP,
    pub PlatformLastFocusedViewportId: ImGuiID,
    pub FallbackMonitor: ImGuiPlatformMonitor,
    pub PlatformMonitorsFullWorkRect: ImRect,
    pub ViewportCreatedCount: ::std::os::raw::c_int,
    pub PlatformWindowsCreatedCount: ::std::os::raw::c_int,
    pub ViewportFocusedStampCount: ::std::os::raw::c_int,
    pub NavCursorVisible: bool,
    pub NavHighlightItemUnderNav: bool,
    pub NavMousePosDirty: bool,
    pub NavIdIsAlive: bool,
    pub NavId: ImGuiID,
    pub NavWindow: *mut ImGuiWindow,
    pub NavFocusScopeId: ImGuiID,
    pub NavLayer: ImGuiNavLayer,
    pub NavActivateId: ImGuiID,
    pub NavActivateDownId: ImGuiID,
    pub NavActivatePressedId: ImGuiID,
    pub NavActivateFlags: ImGuiActivateFlags,
    pub NavFocusRoute: ImVector<ImGuiFocusScopeData>,
    pub NavHighlightActivatedId: ImGuiID,
    pub NavHighlightActivatedTimer: f32,
    pub NavNextActivateId: ImGuiID,
    pub NavNextActivateFlags: ImGuiActivateFlags,
    pub NavInputSource: ImGuiInputSource,
    pub NavLastValidSelectionUserData: ImGuiSelectionUserData,
    pub NavCursorHideFrames: ImS8,
    pub NavAnyRequest: bool,
    pub NavInitRequest: bool,
    pub NavInitRequestFromMove: bool,
    pub NavInitResult: ImGuiNavItemData,
    pub NavMoveSubmitted: bool,
    pub NavMoveScoringItems: bool,
    pub NavMoveForwardToNextFrame: bool,
    pub NavMoveFlags: ImGuiNavMoveFlags,
    pub NavMoveScrollFlags: ImGuiScrollFlags,
    pub NavMoveKeyMods: ImGuiKeyChord,
    pub NavMoveDir: ImGuiDir,
    pub NavMoveDirForDebug: ImGuiDir,
    pub NavMoveClipDir: ImGuiDir,
    pub NavScoringRect: ImRect,
    pub NavScoringNoClipRect: ImRect,
    pub NavScoringDebugCount: ::std::os::raw::c_int,
    pub NavTabbingDir: ::std::os::raw::c_int,
    pub NavTabbingCounter: ::std::os::raw::c_int,
    pub NavMoveResultLocal: ImGuiNavItemData,
    pub NavMoveResultLocalVisible: ImGuiNavItemData,
    pub NavMoveResultOther: ImGuiNavItemData,
    pub NavTabbingResultFirst: ImGuiNavItemData,
    pub NavJustMovedFromFocusScopeId: ImGuiID,
    pub NavJustMovedToId: ImGuiID,
    pub NavJustMovedToFocusScopeId: ImGuiID,
    pub NavJustMovedToKeyMods: ImGuiKeyChord,
    pub NavJustMovedToIsTabbing: bool,
    pub NavJustMovedToHasSelectionData: bool,
    pub ConfigNavWindowingWithGamepad: bool,
    pub ConfigNavWindowingKeyNext: ImGuiKeyChord,
    pub ConfigNavWindowingKeyPrev: ImGuiKeyChord,
    pub NavWindowingTarget: *mut ImGuiWindow,
    pub NavWindowingTargetAnim: *mut ImGuiWindow,
    pub NavWindowingListWindow: *mut ImGuiWindow,
    pub NavWindowingTimer: f32,
    pub NavWindowingHighlightAlpha: f32,
    pub NavWindowingInputSource: ImGuiInputSource,
    pub NavWindowingToggleLayer: bool,
    pub NavWindowingToggleKey: ImGuiKey,
    pub NavWindowingAccumDeltaPos: ImVec2,
    pub NavWindowingAccumDeltaSize: ImVec2,
    pub DimBgRatio: f32,
    pub DragDropActive: bool,
    pub DragDropWithinSource: bool,
    pub DragDropWithinTarget: bool,
    pub DragDropSourceFlags: ImGuiDragDropFlags,
    pub DragDropSourceFrameCount: ::std::os::raw::c_int,
    pub DragDropMouseButton: ::std::os::raw::c_int,
    pub DragDropPayload: ImGuiPayload,
    pub DragDropTargetRect: ImRect,
    pub DragDropTargetClipRect: ImRect,
    pub DragDropTargetId: ImGuiID,
    pub DragDropAcceptFlags: ImGuiDragDropFlags,
    pub DragDropAcceptIdCurrRectSurface: f32,
    pub DragDropAcceptIdCurr: ImGuiID,
    pub DragDropAcceptIdPrev: ImGuiID,
    pub DragDropAcceptFrameCount: ::std::os::raw::c_int,
    pub DragDropHoldJustPressedId: ImGuiID,
    pub DragDropPayloadBufHeap: ImVector<::std::os::raw::c_uchar>,
    pub DragDropPayloadBufLocal: [::std::os::raw::c_uchar; 16usize],
    pub ClipperTempDataStacked: ::std::os::raw::c_int,
    pub ClipperTempData: ImVector<ImGuiListClipperData>,
    pub CurrentTable: *mut ImGuiTable,
    pub DebugBreakInTable: ImGuiID,
    pub TablesTempDataStacked: ::std::os::raw::c_int,
    pub TablesTempData: ImVector<ImGuiTableTempData>,
    pub Tables: ImPool<ImGuiTable>,
    pub TablesLastTimeActive: ImVector<f32>,
    pub DrawChannelsTempMergeBuffer: ImVector<ImDrawChannel>,
    pub CurrentTabBar: *mut ImGuiTabBar,
    pub TabBars: ImPool<ImGuiTabBar>,
    pub CurrentTabBarStack: ImVector<ImGuiPtrOrIndex>,
    pub ShrinkWidthBuffer: ImVector<ImGuiShrinkWidthItem>,
    pub BoxSelectState: ImGuiBoxSelectState,
    pub CurrentMultiSelect: *mut ImGuiMultiSelectTempData,
    pub MultiSelectTempDataStacked: ::std::os::raw::c_int,
    pub MultiSelectTempData: ImVector<ImGuiMultiSelectTempData>,
    pub MultiSelectStorage: ImPool<ImGuiMultiSelectState>,
    pub HoverItemDelayId: ImGuiID,
    pub HoverItemDelayIdPreviousFrame: ImGuiID,
    pub HoverItemDelayTimer: f32,
    pub HoverItemDelayClearTimer: f32,
    pub HoverItemUnlockedStationaryId: ImGuiID,
    pub HoverWindowUnlockedStationaryId: ImGuiID,
    pub MouseCursor: ImGuiMouseCursor,
    pub MouseStationaryTimer: f32,
    pub MouseLastValidPos: ImVec2,
    pub InputTextState: ImGuiInputTextState,
    pub InputTextDeactivatedState: ImGuiInputTextDeactivatedState,
    pub InputTextPasswordFontBackupBaked: ImFontBaked,
    pub InputTextPasswordFontBackupFlags: ImFontFlags,
    pub TempInputId: ImGuiID,
    pub DataTypeZeroValue: ImGuiDataTypeStorage,
    pub BeginMenuDepth: ::std::os::raw::c_int,
    pub BeginComboDepth: ::std::os::raw::c_int,
    pub ColorEditOptions: ImGuiColorEditFlags,
    pub ColorEditCurrentID: ImGuiID,
    pub ColorEditSavedID: ImGuiID,
    pub ColorEditSavedHue: f32,
    pub ColorEditSavedSat: f32,
    pub ColorEditSavedColor: ImU32,
    pub ColorPickerRef: ImVec4,
    pub ComboPreviewData: ImGuiComboPreviewData,
    pub WindowResizeBorderExpectedRect: ImRect,
    pub WindowResizeRelativeMode: bool,
    pub ScrollbarSeekMode: ::std::os::raw::c_short,
    pub ScrollbarClickDeltaToGrabCenter: f32,
    pub SliderGrabClickOffset: f32,
    pub SliderCurrentAccum: f32,
    pub SliderCurrentAccumDirty: bool,
    pub DragCurrentAccumDirty: bool,
    pub DragCurrentAccum: f32,
    pub DragSpeedDefaultRatio: f32,
    pub DisabledAlphaBackup: f32,
    pub DisabledStackSize: ::std::os::raw::c_short,
    pub TooltipOverrideCount: ::std::os::raw::c_short,
    pub TooltipPreviousWindow: *mut ImGuiWindow,
    pub ClipboardHandlerData: ImVector<::std::os::raw::c_char>,
    pub MenusIdSubmittedThisFrame: ImVector<ImGuiID>,
    pub TypingSelectState: ImGuiTypingSelectState,
    pub PlatformImeData: ImGuiPlatformImeData,
    pub PlatformImeDataPrev: ImGuiPlatformImeData,
    pub UserTextures: ImVector<*mut ImTextureData>,
    pub DockContext: ImGuiDockContext,
    pub DockNodeWindowMenuHandler: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            node: *mut ImGuiDockNode,
            tab_bar: *mut ImGuiTabBar,
        ),
    >,
    pub SettingsLoaded: bool,
    pub SettingsDirtyTimer: f32,
    pub SettingsIniData: ImGuiTextBuffer,
    pub SettingsHandlers: ImVector<ImGuiSettingsHandler>,
    pub SettingsWindows: ImChunkStream,
    pub SettingsTables: ImChunkStream,
    pub Hooks: ImVector<ImGuiContextHook>,
    pub HookIdNext: ImGuiID,
    pub LocalizationTable: [*const ::std::os::raw::c_char; 13usize],
    pub LogEnabled: bool,
    pub LogFlags: ImGuiLogFlags,
    pub LogWindow: *mut ImGuiWindow,
    pub LogFile: ImFileHandle,
    pub LogBuffer: ImGuiTextBuffer,
    pub LogNextPrefix: *const ::std::os::raw::c_char,
    pub LogNextSuffix: *const ::std::os::raw::c_char,
    pub LogLinePosY: f32,
    pub LogLineFirstItem: bool,
    pub LogDepthRef: ::std::os::raw::c_int,
    pub LogDepthToExpand: ::std::os::raw::c_int,
    pub LogDepthToExpandDefault: ::std::os::raw::c_int,
    pub ErrorCallback: ImGuiErrorCallback,
    pub ErrorCallbackUserData: *mut ::std::os::raw::c_void,
    pub ErrorTooltipLockedPos: ImVec2,
    pub ErrorFirst: bool,
    pub ErrorCountCurrentFrame: ::std::os::raw::c_int,
    pub StackSizesInNewFrame: ImGuiErrorRecoveryState,
    pub StackSizesInBeginForCurrentWindow: *mut ImGuiErrorRecoveryState,
    pub DebugDrawIdConflictsCount: ::std::os::raw::c_int,
    pub DebugLogFlags: ImGuiDebugLogFlags,
    pub DebugLogBuf: ImGuiTextBuffer,
    pub DebugLogIndex: ImGuiTextIndex,
    pub DebugLogSkippedErrors: ::std::os::raw::c_int,
    pub DebugLogAutoDisableFlags: ImGuiDebugLogFlags,
    pub DebugLogAutoDisableFrames: ImU8,
    pub DebugLocateFrames: ImU8,
    pub DebugBreakInLocateId: bool,
    pub DebugBreakKeyChord: ImGuiKeyChord,
    pub DebugBeginReturnValueCullDepth: ImS8,
    pub DebugItemPickerActive: bool,
    pub DebugItemPickerMouseButton: ImU8,
    pub DebugItemPickerBreakId: ImGuiID,
    pub DebugFlashStyleColorTime: f32,
    pub DebugFlashStyleColorBackup: ImVec4,
    pub DebugMetricsConfig: ImGuiMetricsConfig,
    pub DebugIDStackTool: ImGuiIDStackTool,
    pub DebugAllocInfo: ImGuiDebugAllocInfo,
    pub DebugHoveredDockNode: *mut ImGuiDockNode,
    pub FramerateSecPerFrame: [f32; 60usize],
    pub FramerateSecPerFrameIdx: ::std::os::raw::c_int,
    pub FramerateSecPerFrameCount: ::std::os::raw::c_int,
    pub FramerateSecPerFrameAccum: f32,
    pub WantCaptureMouseNextFrame: ::std::os::raw::c_int,
    pub WantCaptureKeyboardNextFrame: ::std::os::raw::c_int,
    pub WantTextInputNextFrame: ::std::os::raw::c_int,
    pub TempBuffer: ImVector<::std::os::raw::c_char>,
    pub TempKeychordName: [::std::os::raw::c_char; 64usize],
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiContext@@QEAA@PEAUImFontAtlas@@@Z"]
    pub fn ImGuiContext_ImGuiContext(this: *mut ImGuiContext, shared_font_atlas: *mut ImFontAtlas);
}
impl Default for ImGuiContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiContext {
    #[inline]
    pub fn ActiveIdMouseButton(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ActiveIdMouseButton(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ActiveIdMouseButton_raw(this: *const Self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ActiveIdMouseButton_raw(this: *mut Self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ActiveIdMouseButton: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let ActiveIdMouseButton: u32 = unsafe { ::std::mem::transmute(ActiveIdMouseButton) };
            ActiveIdMouseButton as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub unsafe fn new(shared_font_atlas: *mut ImFontAtlas) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiContext_ImGuiContext(__bindgen_tmp.as_mut_ptr(), shared_font_atlas);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiWindowTempData {
    pub CursorPos: ImVec2,
    pub CursorPosPrevLine: ImVec2,
    pub CursorStartPos: ImVec2,
    pub CursorMaxPos: ImVec2,
    pub IdealMaxPos: ImVec2,
    pub CurrLineSize: ImVec2,
    pub PrevLineSize: ImVec2,
    pub CurrLineTextBaseOffset: f32,
    pub PrevLineTextBaseOffset: f32,
    pub IsSameLine: bool,
    pub IsSetPos: bool,
    pub Indent: ImVec1,
    pub ColumnsOffset: ImVec1,
    pub GroupOffset: ImVec1,
    pub CursorStartPosLossyness: ImVec2,
    pub NavLayerCurrent: ImGuiNavLayer,
    pub NavLayersActiveMask: ::std::os::raw::c_short,
    pub NavLayersActiveMaskNext: ::std::os::raw::c_short,
    pub NavIsScrollPushableX: bool,
    pub NavHideHighlightOneFrame: bool,
    pub NavWindowHasScrollY: bool,
    pub MenuBarAppending: bool,
    pub MenuBarOffset: ImVec2,
    pub MenuColumns: ImGuiMenuColumns,
    pub TreeDepth: ::std::os::raw::c_int,
    pub TreeHasStackDataDepthMask: ImU32,
    pub TreeRecordsClippedNodesY2Mask: ImU32,
    pub ChildWindows: ImVector<*mut ImGuiWindow>,
    pub StateStorage: *mut ImGuiStorage,
    pub CurrentColumns: *mut ImGuiOldColumns,
    pub CurrentTableIdx: ::std::os::raw::c_int,
    pub LayoutType: ImGuiLayoutType,
    pub ParentLayoutType: ImGuiLayoutType,
    pub ModalDimBgColor: ImU32,
    pub WindowItemStatusFlags: ImGuiItemStatusFlags,
    pub ChildItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemRect: ImRect,
    pub ItemWidth: f32,
    pub TextWrapPos: f32,
    pub ItemWidthStack: ImVector<f32>,
    pub TextWrapPosStack: ImVector<f32>,
}
impl Default for ImGuiWindowTempData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImGuiWindow {
    pub Ctx: *mut ImGuiContext,
    pub Name: *mut ::std::os::raw::c_char,
    pub ID: ImGuiID,
    pub Flags: ImGuiWindowFlags,
    pub FlagsPreviousFrame: ImGuiWindowFlags,
    pub ChildFlags: ImGuiChildFlags,
    pub WindowClass: ImGuiWindowClass,
    pub Viewport: *mut ImGuiViewportP,
    pub ViewportId: ImGuiID,
    pub ViewportPos: ImVec2,
    pub ViewportAllowPlatformMonitorExtend: ::std::os::raw::c_int,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeFull: ImVec2,
    pub ContentSize: ImVec2,
    pub ContentSizeIdeal: ImVec2,
    pub ContentSizeExplicit: ImVec2,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub TitleBarHeight: f32,
    pub MenuBarHeight: f32,
    pub DecoOuterSizeX1: f32,
    pub DecoOuterSizeY1: f32,
    pub DecoOuterSizeX2: f32,
    pub DecoOuterSizeY2: f32,
    pub DecoInnerSizeX1: f32,
    pub DecoInnerSizeY1: f32,
    pub NameBufLen: ::std::os::raw::c_int,
    pub MoveId: ImGuiID,
    pub TabId: ImGuiID,
    pub ChildId: ImGuiID,
    pub PopupId: ImGuiID,
    pub Scroll: ImVec2,
    pub ScrollMax: ImVec2,
    pub ScrollTarget: ImVec2,
    pub ScrollTargetCenterRatio: ImVec2,
    pub ScrollTargetEdgeSnapDist: ImVec2,
    pub ScrollbarSizes: ImVec2,
    pub ScrollbarX: bool,
    pub ScrollbarY: bool,
    pub ScrollbarXStabilizeEnabled: bool,
    pub ScrollbarXStabilizeToggledHistory: ImU8,
    pub ViewportOwned: bool,
    pub Active: bool,
    pub WasActive: bool,
    pub WriteAccessed: bool,
    pub Collapsed: bool,
    pub WantCollapseToggle: bool,
    pub SkipItems: bool,
    pub SkipRefresh: bool,
    pub Appearing: bool,
    pub Hidden: bool,
    pub IsFallbackWindow: bool,
    pub IsExplicitChild: bool,
    pub HasCloseButton: bool,
    pub ResizeBorderHovered: ::std::os::raw::c_schar,
    pub ResizeBorderHeld: ::std::os::raw::c_schar,
    pub BeginCount: ::std::os::raw::c_short,
    pub BeginCountPreviousFrame: ::std::os::raw::c_short,
    pub BeginOrderWithinParent: ::std::os::raw::c_short,
    pub BeginOrderWithinContext: ::std::os::raw::c_short,
    pub FocusOrder: ::std::os::raw::c_short,
    pub AutoFitFramesX: ImS8,
    pub AutoFitFramesY: ImS8,
    pub AutoFitOnlyGrows: bool,
    pub AutoPosLastDirection: ImGuiDir,
    pub HiddenFramesCanSkipItems: ImS8,
    pub HiddenFramesCannotSkipItems: ImS8,
    pub HiddenFramesForRenderOnly: ImS8,
    pub DisableInputsFrames: ImS8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub SetWindowPosVal: ImVec2,
    pub SetWindowPosPivot: ImVec2,
    pub IDStack: ImVector<ImGuiID>,
    pub DC: ImGuiWindowTempData,
    pub OuterRectClipped: ImRect,
    pub InnerRect: ImRect,
    pub InnerClipRect: ImRect,
    pub WorkRect: ImRect,
    pub ParentWorkRect: ImRect,
    pub ClipRect: ImRect,
    pub ContentRegionRect: ImRect,
    pub HitTestHoleSize: ImVec2ih,
    pub HitTestHoleOffset: ImVec2ih,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameJustFocused: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub ItemWidthDefault: f32,
    pub StateStorage: ImGuiStorage,
    pub ColumnsStorage: ImVector<ImGuiOldColumns>,
    pub FontWindowScale: f32,
    pub FontWindowScaleParents: f32,
    pub FontRefSize: f32,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub DrawList: *mut ImDrawList,
    pub DrawListInst: ImDrawList,
    pub ParentWindow: *mut ImGuiWindow,
    pub ParentWindowInBeginStack: *mut ImGuiWindow,
    pub RootWindow: *mut ImGuiWindow,
    pub RootWindowPopupTree: *mut ImGuiWindow,
    pub RootWindowDockTree: *mut ImGuiWindow,
    pub RootWindowForTitleBarHighlight: *mut ImGuiWindow,
    pub RootWindowForNav: *mut ImGuiWindow,
    pub ParentWindowForFocusRoute: *mut ImGuiWindow,
    pub NavLastChildNavWindow: *mut ImGuiWindow,
    pub NavLastIds: [ImGuiID; 2usize],
    pub NavRectRel: [ImRect; 2usize],
    pub NavPreferredScoringPosRel: [ImVec2; 2usize],
    pub NavRootFocusScopeId: ImGuiID,
    pub MemoryDrawListIdxCapacity: ::std::os::raw::c_int,
    pub MemoryDrawListVtxCapacity: ::std::os::raw::c_int,
    pub MemoryCompacted: bool,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub DockOrder: ::std::os::raw::c_short,
    pub DockStyle: ImGuiWindowDockStyle,
    pub DockNode: *mut ImGuiDockNode,
    pub DockNodeAsHost: *mut ImGuiDockNode,
    pub DockId: ImGuiID,
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetID@ImGuiWindow@@QEAAIPEBD0@Z"]
    pub fn ImGuiWindow_GetID(
        this: *mut ImGuiWindow,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetID@ImGuiWindow@@QEAAIPEBX@Z"]
    pub fn ImGuiWindow_GetID1(
        this: *mut ImGuiWindow,
        ptr: *const ::std::os::raw::c_void,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetID@ImGuiWindow@@QEAAIH@Z"]
    pub fn ImGuiWindow_GetID2(this: *mut ImGuiWindow, n: ::std::os::raw::c_int) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetIDFromPos@ImGuiWindow@@QEAAIAEBUImVec2@@@Z"]
    pub fn ImGuiWindow_GetIDFromPos(this: *mut ImGuiWindow, p_abs: *const ImVec2) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?GetIDFromRectangle@ImGuiWindow@@QEAAIAEBUImRect@@@Z"]
    pub fn ImGuiWindow_GetIDFromRectangle(this: *mut ImGuiWindow, r_abs: *const ImRect) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiWindow@@QEAA@PEAUImGuiContext@@PEBD@Z"]
    pub fn ImGuiWindow_ImGuiWindow(
        this: *mut ImGuiWindow,
        context: *mut ImGuiContext,
        name: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}??1ImGuiWindow@@QEAA@XZ"]
    pub fn ImGuiWindow_ImGuiWindow_destructor(this: *mut ImGuiWindow);
}
impl Default for ImGuiWindow {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiWindow {
    #[inline]
    pub fn SetWindowPosAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowPosAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowPosAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowPosAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowSizeAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowSizeAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowSizeAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowSizeAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowCollapsedAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowCollapsedAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowCollapsedAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowCollapsedAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowDockAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowDockAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowDockAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowDockAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SetWindowPosAllowFlags: ImGuiCond,
        SetWindowSizeAllowFlags: ImGuiCond,
        SetWindowCollapsedAllowFlags: ImGuiCond,
        SetWindowDockAllowFlags: ImGuiCond,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SetWindowPosAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowPosAllowFlags) };
            SetWindowPosAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let SetWindowSizeAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowSizeAllowFlags) };
            SetWindowSizeAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let SetWindowCollapsedAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowCollapsedAllowFlags) };
            SetWindowCollapsedAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let SetWindowDockAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowDockAllowFlags) };
            SetWindowDockAllowFlags as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn DockIsActive(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockIsActive(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockIsActive_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockIsActive_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockNodeIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockNodeIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockNodeIsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockNodeIsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockTabIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockTabIsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockTabIsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockTabWantClose(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabWantClose(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockTabWantClose_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockTabWantClose_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        DockIsActive: bool,
        DockNodeIsVisible: bool,
        DockTabIsVisible: bool,
        DockTabWantClose: bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DockIsActive: u8 = unsafe { ::std::mem::transmute(DockIsActive) };
            DockIsActive as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let DockNodeIsVisible: u8 = unsafe { ::std::mem::transmute(DockNodeIsVisible) };
            DockNodeIsVisible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let DockTabIsVisible: u8 = unsafe { ::std::mem::transmute(DockTabIsVisible) };
            DockTabIsVisible as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let DockTabWantClose: u8 = unsafe { ::std::mem::transmute(DockTabWantClose) };
            DockTabWantClose as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub unsafe fn GetID(
        &mut self,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID {
        ImGuiWindow_GetID(self, str_, str_end)
    }
    #[inline]
    pub unsafe fn GetID1(&mut self, ptr: *const ::std::os::raw::c_void) -> ImGuiID {
        ImGuiWindow_GetID1(self, ptr)
    }
    #[inline]
    pub unsafe fn GetID2(&mut self, n: ::std::os::raw::c_int) -> ImGuiID {
        ImGuiWindow_GetID2(self, n)
    }
    #[inline]
    pub unsafe fn GetIDFromPos(&mut self, p_abs: *const ImVec2) -> ImGuiID {
        ImGuiWindow_GetIDFromPos(self, p_abs)
    }
    #[inline]
    pub unsafe fn GetIDFromRectangle(&mut self, r_abs: *const ImRect) -> ImGuiID {
        ImGuiWindow_GetIDFromRectangle(self, r_abs)
    }
    #[inline]
    pub unsafe fn new(context: *mut ImGuiContext, name: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiWindow_ImGuiWindow(__bindgen_tmp.as_mut_ptr(), context, name);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiWindow_ImGuiWindow_destructor(self)
    }
}
pub const ImGuiTabBarFlags_DockNode: ImGuiTabBarFlagsPrivate_ = 1048576;
pub const ImGuiTabBarFlags_IsFocused: ImGuiTabBarFlagsPrivate_ = 2097152;
pub const ImGuiTabBarFlags_SaveSettings: ImGuiTabBarFlagsPrivate_ = 4194304;
pub type ImGuiTabBarFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiTabItemFlags_SectionMask_: ImGuiTabItemFlagsPrivate_ = 192;
pub const ImGuiTabItemFlags_NoCloseButton: ImGuiTabItemFlagsPrivate_ = 1048576;
pub const ImGuiTabItemFlags_Button: ImGuiTabItemFlagsPrivate_ = 2097152;
pub const ImGuiTabItemFlags_Invisible: ImGuiTabItemFlagsPrivate_ = 4194304;
pub const ImGuiTabItemFlags_Unsorted: ImGuiTabItemFlagsPrivate_ = 8388608;
pub type ImGuiTabItemFlagsPrivate_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ImGuiTabItem {
    pub ID: ImGuiID,
    pub Flags: ImGuiTabItemFlags,
    pub Window: *mut ImGuiWindow,
    pub LastFrameVisible: ::std::os::raw::c_int,
    pub LastFrameSelected: ::std::os::raw::c_int,
    pub Offset: f32,
    pub Width: f32,
    pub ContentWidth: f32,
    pub RequestedWidth: f32,
    pub NameOffset: ImS32,
    pub BeginOrder: ImS16,
    pub IndexDuringLayout: ImS16,
    pub WantClose: bool,
}
impl Default for ImGuiTabItem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiTabBar {
    pub Window: *mut ImGuiWindow,
    pub Tabs: ImVector<ImGuiTabItem>,
    pub Flags: ImGuiTabBarFlags,
    pub ID: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub NextSelectedTabId: ImGuiID,
    pub VisibleTabId: ImGuiID,
    pub CurrFrameVisible: ::std::os::raw::c_int,
    pub PrevFrameVisible: ::std::os::raw::c_int,
    pub BarRect: ImRect,
    pub BarRectPrevWidth: f32,
    pub CurrTabsContentsHeight: f32,
    pub PrevTabsContentsHeight: f32,
    pub WidthAllTabs: f32,
    pub WidthAllTabsIdeal: f32,
    pub ScrollingAnim: f32,
    pub ScrollingTarget: f32,
    pub ScrollingTargetDistToVisibility: f32,
    pub ScrollingSpeed: f32,
    pub ScrollingRectMinX: f32,
    pub ScrollingRectMaxX: f32,
    pub SeparatorMinX: f32,
    pub SeparatorMaxX: f32,
    pub ReorderRequestTabId: ImGuiID,
    pub ReorderRequestOffset: ImS16,
    pub BeginCount: ImS8,
    pub WantLayout: bool,
    pub VisibleTabWasSubmitted: bool,
    pub TabsAddedNew: bool,
    pub ScrollButtonEnabled: bool,
    pub TabsActiveCount: ImS16,
    pub LastTabItemIdx: ImS16,
    pub ItemSpacingY: f32,
    pub FramePadding: ImVec2,
    pub BackupCursorPos: ImVec2,
    pub TabsNames: ImGuiTextBuffer,
}
unsafe extern "C" {
    #[link_name = "\u{1}??0ImGuiTabBar@@QEAA@XZ"]
    pub fn ImGuiTabBar_ImGuiTabBar(this: *mut ImGuiTabBar);
}
impl Default for ImGuiTabBar {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiTabBar {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiTabBar_ImGuiTabBar(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiTableColumn {
    pub Flags: ImGuiTableColumnFlags,
    pub WidthGiven: f32,
    pub MinX: f32,
    pub MaxX: f32,
    pub WidthRequest: f32,
    pub WidthAuto: f32,
    pub WidthMax: f32,
    pub StretchWeight: f32,
    pub InitStretchWeightOrWidth: f32,
    pub ClipRect: ImRect,
    pub UserID: ImGuiID,
    pub WorkMinX: f32,
    pub WorkMaxX: f32,
    pub ItemWidth: f32,
    pub ContentMaxXFrozen: f32,
    pub ContentMaxXUnfrozen: f32,
    pub ContentMaxXHeadersUsed: f32,
    pub ContentMaxXHeadersIdeal: f32,
    pub NameOffset: ImS16,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub IndexWithinEnabledSet: ImGuiTableColumnIdx,
    pub PrevEnabledColumn: ImGuiTableColumnIdx,
    pub NextEnabledColumn: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub DrawChannelFrozen: ImGuiTableDrawChannelIdx,
    pub DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsEnabled: bool,
    pub IsUserEnabled: bool,
    pub IsUserEnabledNextFrame: bool,
    pub IsVisibleX: bool,
    pub IsVisibleY: bool,
    pub IsRequestOutput: bool,
    pub IsSkipItems: bool,
    pub IsPreserveWidthAuto: bool,
    pub NavLayerCurrent: ImS8,
    pub AutoFitQueue: ImU8,
    pub CannotSkipItemsQueue: ImU8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub SortDirectionsAvailList: ImU8,
}
impl ImGuiTableColumn {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirection_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirection_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SortDirectionsAvailCount(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailCount(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirectionsAvailCount_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirectionsAvailCount_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SortDirectionsAvailMask(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailMask(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirectionsAvailMask_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirectionsAvailMask_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        SortDirectionsAvailCount: ImU8,
        SortDirectionsAvailMask: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let SortDirectionsAvailCount: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailCount) };
            SortDirectionsAvailCount as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let SortDirectionsAvailMask: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailMask) };
            SortDirectionsAvailMask as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTableCellData {
    pub BgColor: ImU32,
    pub Column: ImGuiTableColumnIdx,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImGuiTableHeaderData {
    pub Index: ImGuiTableColumnIdx,
    pub TextColor: ImU32,
    pub BgColor0: ImU32,
    pub BgColor1: ImU32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiTableInstanceData {
    pub TableInstanceID: ImGuiID,
    pub LastOuterHeight: f32,
    pub LastTopHeadersRowHeight: f32,
    pub LastFrozenHeight: f32,
    pub HoveredRowLast: ::std::os::raw::c_int,
    pub HoveredRowNext: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiTable {
    pub ID: ImGuiID,
    pub Flags: ImGuiTableFlags,
    pub RawData: *mut ::std::os::raw::c_void,
    pub TempData: *mut ImGuiTableTempData,
    pub Columns: ImSpan<ImGuiTableColumn>,
    pub DisplayOrderToIndex: ImSpan<ImGuiTableColumnIdx>,
    pub RowCellData: ImSpan<ImGuiTableCellData>,
    pub EnabledMaskByDisplayOrder: ImBitArrayPtr,
    pub EnabledMaskByIndex: ImBitArrayPtr,
    pub VisibleMaskByIndex: ImBitArrayPtr,
    pub SettingsLoadedFlags: ImGuiTableFlags,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub ColumnsCount: ::std::os::raw::c_int,
    pub CurrentRow: ::std::os::raw::c_int,
    pub CurrentColumn: ::std::os::raw::c_int,
    pub InstanceCurrent: ImS16,
    pub InstanceInteracted: ImS16,
    pub RowPosY1: f32,
    pub RowPosY2: f32,
    pub RowMinHeight: f32,
    pub RowCellPaddingY: f32,
    pub RowTextBaseline: f32,
    pub RowIndentOffsetX: f32,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub RowBgColorCounter: ::std::os::raw::c_int,
    pub RowBgColor: [ImU32; 2usize],
    pub BorderColorStrong: ImU32,
    pub BorderColorLight: ImU32,
    pub BorderX1: f32,
    pub BorderX2: f32,
    pub HostIndentX: f32,
    pub MinColumnWidth: f32,
    pub OuterPaddingX: f32,
    pub CellPaddingX: f32,
    pub CellSpacingX1: f32,
    pub CellSpacingX2: f32,
    pub InnerWidth: f32,
    pub ColumnsGivenWidth: f32,
    pub ColumnsAutoFitWidth: f32,
    pub ColumnsStretchSumWeights: f32,
    pub ResizedColumnNextWidth: f32,
    pub ResizeLockMinContentsX2: f32,
    pub RefScale: f32,
    pub AngledHeadersHeight: f32,
    pub AngledHeadersSlope: f32,
    pub OuterRect: ImRect,
    pub InnerRect: ImRect,
    pub WorkRect: ImRect,
    pub InnerClipRect: ImRect,
    pub BgClipRect: ImRect,
    pub Bg0ClipRectForDrawCmd: ImRect,
    pub Bg2ClipRectForDrawCmd: ImRect,
    pub HostClipRect: ImRect,
    pub HostBackupInnerClipRect: ImRect,
    pub OuterWindow: *mut ImGuiWindow,
    pub InnerWindow: *mut ImGuiWindow,
    pub ColumnsNames: ImGuiTextBuffer,
    pub DrawSplitter: *mut ImDrawListSplitter,
    pub InstanceDataFirst: ImGuiTableInstanceData,
    pub InstanceDataExtra: ImVector<ImGuiTableInstanceData>,
    pub SortSpecsSingle: ImGuiTableColumnSortSpecs,
    pub SortSpecsMulti: ImVector<ImGuiTableColumnSortSpecs>,
    pub SortSpecs: ImGuiTableSortSpecs,
    pub SortSpecsCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledFixedCount: ImGuiTableColumnIdx,
    pub DeclColumnsCount: ImGuiTableColumnIdx,
    pub AngledHeadersCount: ImGuiTableColumnIdx,
    pub HoveredColumnBody: ImGuiTableColumnIdx,
    pub HoveredColumnBorder: ImGuiTableColumnIdx,
    pub HighlightColumnHeader: ImGuiTableColumnIdx,
    pub AutoFitSingleColumn: ImGuiTableColumnIdx,
    pub ResizedColumn: ImGuiTableColumnIdx,
    pub LastResizedColumn: ImGuiTableColumnIdx,
    pub HeldHeaderColumn: ImGuiTableColumnIdx,
    pub ReorderColumn: ImGuiTableColumnIdx,
    pub ReorderColumnDir: ImGuiTableColumnIdx,
    pub LeftMostEnabledColumn: ImGuiTableColumnIdx,
    pub RightMostEnabledColumn: ImGuiTableColumnIdx,
    pub LeftMostStretchedColumn: ImGuiTableColumnIdx,
    pub RightMostStretchedColumn: ImGuiTableColumnIdx,
    pub ContextPopupColumn: ImGuiTableColumnIdx,
    pub FreezeRowsRequest: ImGuiTableColumnIdx,
    pub FreezeRowsCount: ImGuiTableColumnIdx,
    pub FreezeColumnsRequest: ImGuiTableColumnIdx,
    pub FreezeColumnsCount: ImGuiTableColumnIdx,
    pub RowCellDataCurrent: ImGuiTableColumnIdx,
    pub DummyDrawChannel: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub NavLayer: ImS8,
    pub IsLayoutLocked: bool,
    pub IsInsideRow: bool,
    pub IsInitializing: bool,
    pub IsSortSpecsDirty: bool,
    pub IsUsingHeaders: bool,
    pub IsContextPopupOpen: bool,
    pub DisableDefaultContextMenu: bool,
    pub IsSettingsRequestLoad: bool,
    pub IsSettingsDirty: bool,
    pub IsDefaultDisplayOrder: bool,
    pub IsResetAllRequest: bool,
    pub IsResetDisplayOrderRequest: bool,
    pub IsUnfrozenRows: bool,
    pub IsDefaultSizingPolicy: bool,
    pub IsActiveIdAliveBeforeTable: bool,
    pub IsActiveIdInTable: bool,
    pub HasScrollbarYCurr: bool,
    pub HasScrollbarYPrev: bool,
    pub MemoryCompacted: bool,
    pub HostSkipItems: bool,
}
impl Default for ImGuiTable {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ImGuiTable {
    #[inline]
    pub fn RowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_RowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RowFlags_raw(this: *const Self) -> ImGuiTableRowFlags {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RowFlags_raw(this: *mut Self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LastRowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_LastRowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LastRowFlags_raw(this: *const Self) -> ImGuiTableRowFlags {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LastRowFlags_raw(this: *mut Self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RowFlags: ImGuiTableRowFlags,
        LastRowFlags: ImGuiTableRowFlags,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let RowFlags: u32 = unsafe { ::std::mem::transmute(RowFlags) };
            RowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let LastRowFlags: u32 = unsafe { ::std::mem::transmute(LastRowFlags) };
            LastRowFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, PartialEq)]
pub struct ImGuiTableTempData {
    pub TableIndex: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub AngledHeadersExtraWidth: f32,
    pub AngledHeadersRequests: ImVector<ImGuiTableHeaderData>,
    pub UserOuterSize: ImVec2,
    pub DrawSplitter: ImDrawListSplitter,
    pub HostBackupWorkRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub HostBackupPrevLineSize: ImVec2,
    pub HostBackupCurrLineSize: ImVec2,
    pub HostBackupCursorMaxPos: ImVec2,
    pub HostBackupColumnsOffset: ImVec1,
    pub HostBackupItemWidth: f32,
    pub HostBackupItemWidthStackSize: ::std::os::raw::c_int,
}
impl Default for ImGuiTableTempData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiTableColumnSettings {
    pub WidthOrWeight: f32,
    pub UserID: ImGuiID,
    pub Index: ImGuiTableColumnIdx,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
impl ImGuiTableColumnSettings {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirection_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirection_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsEnabled(&self) -> ImS8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_IsEnabled(&mut self, val: ImS8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsEnabled_raw(this: *const Self) -> ImS8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsEnabled_raw(this: *mut Self, val: ImS8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsStretch(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsStretch(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsStretch_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsStretch_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        IsEnabled: ImS8,
        IsStretch: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let IsEnabled: u8 = unsafe { ::std::mem::transmute(IsEnabled) };
            IsEnabled as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let IsStretch: u8 = unsafe { ::std::mem::transmute(IsStretch) };
            IsStretch as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImGuiTableSettings {
    pub ID: ImGuiID,
    pub SaveFlags: ImGuiTableFlags,
    pub RefScale: f32,
    pub ColumnsCount: ImGuiTableColumnIdx,
    pub ColumnsCountMax: ImGuiTableColumnIdx,
    pub WantApply: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImFontLoader {
    pub Name: *const ::std::os::raw::c_char,
    pub LoaderInit: ::std::option::Option<unsafe extern "C" fn(atlas: *mut ImFontAtlas) -> bool>,
    pub LoaderShutdown: ::std::option::Option<unsafe extern "C" fn(atlas: *mut ImFontAtlas)>,
    pub FontSrcInit: ::std::option::Option<
        unsafe extern "C" fn(atlas: *mut ImFontAtlas, src: *mut ImFontConfig) -> bool,
    >,
    pub FontSrcDestroy: ::std::option::Option<
        unsafe extern "C" fn(atlas: *mut ImFontAtlas, src: *mut ImFontConfig),
    >,
    pub FontSrcContainsGlyph: ::std::option::Option<
        unsafe extern "C" fn(
            atlas: *mut ImFontAtlas,
            src: *mut ImFontConfig,
            codepoint: ImWchar,
        ) -> bool,
    >,
    pub FontBakedInit: ::std::option::Option<
        unsafe extern "C" fn(
            atlas: *mut ImFontAtlas,
            src: *mut ImFontConfig,
            baked: *mut ImFontBaked,
            loader_data_for_baked_src: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub FontBakedDestroy: ::std::option::Option<
        unsafe extern "C" fn(
            atlas: *mut ImFontAtlas,
            src: *mut ImFontConfig,
            baked: *mut ImFontBaked,
            loader_data_for_baked_src: *mut ::std::os::raw::c_void,
        ),
    >,
    pub FontBakedLoadGlyph: ::std::option::Option<
        unsafe extern "C" fn(
            atlas: *mut ImFontAtlas,
            src: *mut ImFontConfig,
            baked: *mut ImFontBaked,
            loader_data_for_baked_src: *mut ::std::os::raw::c_void,
            codepoint: ImWchar,
            out_glyph: *mut ImFontGlyph,
            out_advance_x: *mut f32,
        ) -> bool,
    >,
    pub FontBakedSrcLoaderDataSize: usize,
}
impl Default for ImFontLoader {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasGetFontLoaderForStbTruetype@@YAPEBUImFontLoader@@XZ"]
    pub fn ImFontAtlasGetFontLoaderForStbTruetype() -> *const ImFontLoader;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImFontAtlasRectEntry {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl ImFontAtlasRectEntry {
    #[inline]
    pub fn TargetIndex(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_TargetIndex(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn TargetIndex_raw(this: *const Self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                20u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_TargetIndex_raw(this: *mut Self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                20u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Generation(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_Generation(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Generation_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                10u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Generation_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsUsed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IsUsed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsUsed_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IsUsed_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        TargetIndex: ::std::os::raw::c_int,
        Generation: ::std::os::raw::c_uint,
        IsUsed: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let TargetIndex: u32 = unsafe { ::std::mem::transmute(TargetIndex) };
            TargetIndex as u64
        });
        __bindgen_bitfield_unit.set(20usize, 10u8, {
            let Generation: u32 = unsafe { ::std::mem::transmute(Generation) };
            Generation as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let IsUsed: u32 = unsafe { ::std::mem::transmute(IsUsed) };
            IsUsed as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ImFontAtlasPostProcessData {
    pub FontAtlas: *mut ImFontAtlas,
    pub Font: *mut ImFont,
    pub FontSrc: *mut ImFontConfig,
    pub FontBaked: *mut ImFontBaked,
    pub Glyph: *mut ImFontGlyph,
    pub Pixels: *mut ::std::os::raw::c_void,
    pub Format: ImTextureFormat,
    pub Pitch: ::std::os::raw::c_int,
    pub Width: ::std::os::raw::c_int,
    pub Height: ::std::os::raw::c_int,
}
impl Default for ImFontAtlasPostProcessData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbrp_node {
    _unused: [u8; 0],
}
pub type stbrp_node_im = stbrp_node;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct stbrp_context_opaque {
    pub data: [::std::os::raw::c_char; 80usize],
}
impl Default for stbrp_context_opaque {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ImFontAtlasBuilder {
    pub PackContext: stbrp_context_opaque,
    pub PackNodes: ImVector<stbrp_node_im>,
    pub Rects: ImVector<ImTextureRect>,
    pub RectsIndex: ImVector<ImFontAtlasRectEntry>,
    pub TempBuffer: ImVector<::std::os::raw::c_uchar>,
    pub RectsIndexFreeListStart: ::std::os::raw::c_int,
    pub RectsPackedCount: ::std::os::raw::c_int,
    pub RectsPackedSurface: ::std::os::raw::c_int,
    pub RectsDiscardedCount: ::std::os::raw::c_int,
    pub RectsDiscardedSurface: ::std::os::raw::c_int,
    pub FrameCount: ::std::os::raw::c_int,
    pub MaxRectSize: ImVec2i,
    pub MaxRectBounds: ImVec2i,
    pub LockDisableResize: bool,
    pub PreloadedAllGlyphsRanges: bool,
    pub BakedPool: __BindgenOpaqueArray<u64, 3usize>,
    pub BakedMap: ImGuiStorage,
    pub BakedDiscardedCount: ::std::os::raw::c_int,
    pub PackIdMouseCursors: ImFontAtlasRectId,
    pub PackIdLinesTexData: ImFontAtlasRectId,
}
impl Default for ImFontAtlasBuilder {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasBuildInit(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildDestroy@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasBuildDestroy(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildMain@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasBuildMain(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildSetupFontLoader@@YAXPEAUImFontAtlas@@PEBUImFontLoader@@@Z"]
    pub fn ImFontAtlasBuildSetupFontLoader(
        atlas: *mut ImFontAtlas,
        font_loader: *const ImFontLoader,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildUpdatePointers@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasBuildUpdatePointers(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildRenderBitmapFromString@@YAXPEAUImFontAtlas@@HHHHPEBDD@Z"]
    pub fn ImFontAtlasBuildRenderBitmapFromString(
        atlas: *mut ImFontAtlas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildClear@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasBuildClear(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureAdd@@YAPEAUImTextureData@@PEAUImFontAtlas@@HH@Z"]
    pub fn ImFontAtlasTextureAdd(
        atlas: *mut ImFontAtlas,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut ImTextureData;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureMakeSpace@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasTextureMakeSpace(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureRepack@@YAXPEAUImFontAtlas@@HH@Z"]
    pub fn ImFontAtlasTextureRepack(
        atlas: *mut ImFontAtlas,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureGrow@@YAXPEAUImFontAtlas@@HH@Z"]
    pub fn ImFontAtlasTextureGrow(
        atlas: *mut ImFontAtlas,
        old_w: ::std::os::raw::c_int,
        old_h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureCompact@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasTextureCompact(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureGetSizeEstimate@@YA?AUImVec2i@@PEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasTextureGetSizeEstimate(atlas: *mut ImFontAtlas) -> ImVec2i;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildSetupFontSpecialGlyphs@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@@Z"]
    pub fn ImFontAtlasBuildSetupFontSpecialGlyphs(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        src: *mut ImFontConfig,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildLegacyPreloadAllGlyphRanges@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasBuildLegacyPreloadAllGlyphRanges(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildGetOversampleFactors@@YAXPEAUImFontConfig@@PEAUImFontBaked@@PEAH2@Z"]
    pub fn ImFontAtlasBuildGetOversampleFactors(
        src: *mut ImFontConfig,
        baked: *mut ImFontBaked,
        out_oversample_h: *mut ::std::os::raw::c_int,
        out_oversample_v: *mut ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBuildDiscardBakes@@YAXPEAUImFontAtlas@@H@Z"]
    pub fn ImFontAtlasBuildDiscardBakes(
        atlas: *mut ImFontAtlas,
        unused_frames: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasFontSourceInit@@YA_NPEAUImFontAtlas@@PEAUImFontConfig@@@Z"]
    pub fn ImFontAtlasFontSourceInit(atlas: *mut ImFontAtlas, src: *mut ImFontConfig) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasFontSourceAddToFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@@Z"]
    pub fn ImFontAtlasFontSourceAddToFont(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        src: *mut ImFontConfig,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasFontDestroySourceData@@YAXPEAUImFontAtlas@@PEAUImFontConfig@@@Z"]
    pub fn ImFontAtlasFontDestroySourceData(atlas: *mut ImFontAtlas, src: *mut ImFontConfig);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasFontInitOutput@@YA_NPEAUImFontAtlas@@PEAUImFont@@@Z"]
    pub fn ImFontAtlasFontInitOutput(atlas: *mut ImFontAtlas, font: *mut ImFont) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasFontDestroyOutput@@YAXPEAUImFontAtlas@@PEAUImFont@@@Z"]
    pub fn ImFontAtlasFontDestroyOutput(atlas: *mut ImFontAtlas, font: *mut ImFont);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasFontDiscardBakes@@YAXPEAUImFontAtlas@@PEAUImFont@@H@Z"]
    pub fn ImFontAtlasFontDiscardBakes(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        unused_frames: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBakedGetId@@YAIIMM@Z"]
    pub fn ImFontAtlasBakedGetId(
        font_id: ImGuiID,
        baked_size: f32,
        rasterizer_density: f32,
    ) -> ImGuiID;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBakedGetOrAdd@@YAPEAUImFontBaked@@PEAUImFontAtlas@@PEAUImFont@@MM@Z"]
    pub fn ImFontAtlasBakedGetOrAdd(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        font_size: f32,
        font_rasterizer_density: f32,
    ) -> *mut ImFontBaked;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBakedGetClosestMatch@@YAPEAUImFontBaked@@PEAUImFontAtlas@@PEAUImFont@@MM@Z"]
    pub fn ImFontAtlasBakedGetClosestMatch(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        font_size: f32,
        font_rasterizer_density: f32,
    ) -> *mut ImFontBaked;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBakedAdd@@YAPEAUImFontBaked@@PEAUImFontAtlas@@PEAUImFont@@MMI@Z"]
    pub fn ImFontAtlasBakedAdd(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        font_size: f32,
        font_rasterizer_density: f32,
        baked_id: ImGuiID,
    ) -> *mut ImFontBaked;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBakedDiscard@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontBaked@@@Z"]
    pub fn ImFontAtlasBakedDiscard(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        baked: *mut ImFontBaked,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBakedAddFontGlyph@@YAPEAUImFontGlyph@@PEAUImFontAtlas@@PEAUImFontBaked@@PEAUImFontConfig@@PEBU1@@Z"]
    pub fn ImFontAtlasBakedAddFontGlyph(
        atlas: *mut ImFontAtlas,
        baked: *mut ImFontBaked,
        src: *mut ImFontConfig,
        in_glyph: *const ImFontGlyph,
    ) -> *mut ImFontGlyph;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBakedAddFontGlyphAdvancedX@@YAXPEAUImFontAtlas@@PEAUImFontBaked@@PEAUImFontConfig@@IM@Z"]
    pub fn ImFontAtlasBakedAddFontGlyphAdvancedX(
        atlas: *mut ImFontAtlas,
        baked: *mut ImFontBaked,
        src: *mut ImFontConfig,
        codepoint: ImWchar,
        advance_x: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBakedDiscardFontGlyph@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontBaked@@PEAUImFontGlyph@@@Z"]
    pub fn ImFontAtlasBakedDiscardFontGlyph(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        baked: *mut ImFontBaked,
        glyph: *mut ImFontGlyph,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasBakedSetFontGlyphBitmap@@YAXPEAUImFontAtlas@@PEAUImFontBaked@@PEAUImFontConfig@@PEAUImFontGlyph@@PEAUImTextureRect@@PEBEW4ImTextureFormat@@H@Z"]
    pub fn ImFontAtlasBakedSetFontGlyphBitmap(
        atlas: *mut ImFontAtlas,
        baked: *mut ImFontBaked,
        src: *mut ImFontConfig,
        glyph: *mut ImFontGlyph,
        r: *mut ImTextureRect,
        src_pixels: *const ::std::os::raw::c_uchar,
        src_fmt: ImTextureFormat,
        src_pitch: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasPackInit@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasPackInit(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasPackAddRect@@YAHPEAUImFontAtlas@@HHPEAUImFontAtlasRectEntry@@@Z"]
    pub fn ImFontAtlasPackAddRect(
        atlas: *mut ImFontAtlas,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        overwrite_entry: *mut ImFontAtlasRectEntry,
    ) -> ImFontAtlasRectId;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasPackGetRect@@YAPEAUImTextureRect@@PEAUImFontAtlas@@H@Z"]
    pub fn ImFontAtlasPackGetRect(
        atlas: *mut ImFontAtlas,
        id: ImFontAtlasRectId,
    ) -> *mut ImTextureRect;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasPackGetRectSafe@@YAPEAUImTextureRect@@PEAUImFontAtlas@@H@Z"]
    pub fn ImFontAtlasPackGetRectSafe(
        atlas: *mut ImFontAtlas,
        id: ImFontAtlasRectId,
    ) -> *mut ImTextureRect;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasPackDiscardRect@@YAXPEAUImFontAtlas@@H@Z"]
    pub fn ImFontAtlasPackDiscardRect(atlas: *mut ImFontAtlas, id: ImFontAtlasRectId);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasUpdateNewFrame@@YAXPEAUImFontAtlas@@H_N@Z"]
    pub fn ImFontAtlasUpdateNewFrame(
        atlas: *mut ImFontAtlas,
        frame_count: ::std::os::raw::c_int,
        renderer_has_textures: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasAddDrawListSharedData@@YAXPEAUImFontAtlas@@PEAUImDrawListSharedData@@@Z"]
    pub fn ImFontAtlasAddDrawListSharedData(
        atlas: *mut ImFontAtlas,
        data: *mut ImDrawListSharedData,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasRemoveDrawListSharedData@@YAXPEAUImFontAtlas@@PEAUImDrawListSharedData@@@Z"]
    pub fn ImFontAtlasRemoveDrawListSharedData(
        atlas: *mut ImFontAtlas,
        data: *mut ImDrawListSharedData,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasUpdateDrawListsTextures@@YAXPEAUImFontAtlas@@UImTextureRef@@1@Z"]
    pub fn ImFontAtlasUpdateDrawListsTextures(
        atlas: *mut ImFontAtlas,
        old_tex: ImTextureRef,
        new_tex: ImTextureRef,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasUpdateDrawListsSharedData@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasUpdateDrawListsSharedData(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureBlockConvert@@YAXPEBEW4ImTextureFormat@@HPEAE1HHH@Z"]
    pub fn ImFontAtlasTextureBlockConvert(
        src_pixels: *const ::std::os::raw::c_uchar,
        src_fmt: ImTextureFormat,
        src_pitch: ::std::os::raw::c_int,
        dst_pixels: *mut ::std::os::raw::c_uchar,
        dst_fmt: ImTextureFormat,
        dst_pitch: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureBlockPostProcess@@YAXPEAUImFontAtlasPostProcessData@@@Z"]
    pub fn ImFontAtlasTextureBlockPostProcess(data: *mut ImFontAtlasPostProcessData);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureBlockPostProcessMultiply@@YAXPEAUImFontAtlasPostProcessData@@M@Z"]
    pub fn ImFontAtlasTextureBlockPostProcessMultiply(
        data: *mut ImFontAtlasPostProcessData,
        multiply_factor: f32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureBlockFill@@YAXPEAUImTextureData@@HHHHI@Z"]
    pub fn ImFontAtlasTextureBlockFill(
        dst_tex: *mut ImTextureData,
        dst_x: ::std::os::raw::c_int,
        dst_y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        col: ImU32,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureBlockCopy@@YAXPEAUImTextureData@@HH0HHHH@Z"]
    pub fn ImFontAtlasTextureBlockCopy(
        src_tex: *mut ImTextureData,
        src_x: ::std::os::raw::c_int,
        src_y: ::std::os::raw::c_int,
        dst_tex: *mut ImTextureData,
        dst_x: ::std::os::raw::c_int,
        dst_y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasTextureBlockQueueUpload@@YAXPEAUImFontAtlas@@PEAUImTextureData@@HHHH@Z"]
    pub fn ImFontAtlasTextureBlockQueueUpload(
        atlas: *mut ImFontAtlas,
        tex: *mut ImTextureData,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextureDataGetFormatBytesPerPixel@@YAHW4ImTextureFormat@@@Z"]
    pub fn ImTextureDataGetFormatBytesPerPixel(format: ImTextureFormat) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextureDataGetStatusName@@YAPEBDW4ImTextureStatus@@@Z"]
    pub fn ImTextureDataGetStatusName(status: ImTextureStatus) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImTextureDataGetFormatName@@YAPEBDW4ImTextureFormat@@@Z"]
    pub fn ImTextureDataGetFormatName(format: ImTextureFormat) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasDebugLogTextureRequests@@YAXPEAUImFontAtlas@@@Z"]
    pub fn ImFontAtlasDebugLogTextureRequests(atlas: *mut ImFontAtlas);
}
unsafe extern "C" {
    #[link_name = "\u{1}?ImFontAtlasGetMouseCursorTexData@@YA_NPEAUImFontAtlas@@HPEAUImVec2@@1QEAU2@2@Z"]
    pub fn ImFontAtlasGetMouseCursorTexData(
        atlas: *mut ImFontAtlas,
        cursor_type: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ImVec2_rr {
    pub x: f32,
    pub y: f32,
}
unsafe extern "C" {
    pub fn ImGui_GetWindowPos() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetWindowSize() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetContentRegionAvail() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetFontTexUvWhitePixel() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetCursorScreenPos() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetCursorPos() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetCursorStartPos() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetItemRectMin() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetItemRectMax() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetItemRectSize() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_CalcTextSize(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    ) -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetMousePos() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetMousePosOnOpeningCurrentPopup() -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_GetMouseDragDelta(button: ImGuiMouseButton, lock_threshold: f32) -> ImVec2_rr;
}
unsafe extern "C" {
    pub fn ImGui_ValidateABIFix() -> ImVec2_rr;
}

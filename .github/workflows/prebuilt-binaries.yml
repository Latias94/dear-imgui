name: Build Prebuilt Binaries

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag to build (e.g., v0.1.0)'
        required: false
        type: string
      branch:
        description: 'Branch to build (e.g., main). If provided, will build latest commit from this branch and upload artifacts instead of a release.'
        required: false
        type: string
        default: main
      crates:
        description: 'Comma-separated sys crates: all, dear-imgui-sys, dear-implot-sys, dear-imnodes-sys, dear-imguizmo-sys'
        required: false
        type: string
        default: all
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-prebuilt:
    name: Build ${{ matrix.target }}${{ matrix.crt && format(' ({0})', matrix.crt) || '' }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          # macOS (Intel)
          - target: x86_64-apple-darwin
            os: macos-13
          # macOS (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
          # Windows (MD)
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            crt: md
          # Windows (MT)
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            crt: mt
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ inputs.tag || inputs.branch || github.ref }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ format('{0}-{1}-{2}', matrix.target, matrix.crt || 'none', inputs.crates || 'all') }}

      - name: Install Linux deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config

      - name: Install FreeType (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfreetype6-dev

      - name: Install LLVM (libclang) for bindgen (Linux)
        if: runner.os == 'Linux'
        uses: KyleMayes/install-llvm-action@v1
        with:
          directory: ${{ runner.temp }}/llvm
          cached: true
          version: '14.0'

      - name: Install Windows deps
        if: runner.os == 'Windows'
        run: choco install -y llvm

      - name: Setup vcpkg (Windows)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          # Use a fixed commit for reproducibility
          vcpkgGitCommitId: 9a98f93671f984351377044210854900bfd73171
          runVcpkgInstall: false

      - name: Install FreeType + pkgconf via vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          vcpkg install freetype:x64-windows pkgconf:x64-windows
          $root = if ($env:VCPKG_INSTALLATION_ROOT) { $env:VCPKG_INSTALLATION_ROOT } elseif ($env:VCPKG_ROOT) { $env:VCPKG_ROOT } else { '' }
          if (-not $root) { throw 'VCPKG root not found in environment.' }
          echo "PKG_CONFIG_PATH=$root\installed\x64-windows\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "PATH=$root\installed\x64-windows\tools\pkgconf;$env:PATH" >> $env:GITHUB_ENV
          echo "PKG_CONFIG=$root\installed\x64-windows\tools\pkgconf\pkgconf.exe" >> $env:GITHUB_ENV

      - name: Install FreeType (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install freetype pkg-config
          echo "PKG_CONFIG_PATH=$(brew --prefix)/opt/freetype/lib/pkgconfig" >> $GITHUB_ENV


      - name: Select static CRT (Windows MT)
        if: ${{ runner.os == 'Windows' && matrix.crt == 'mt' }}
        shell: pwsh
        run: echo "RUSTFLAGS=-C target-feature=+crt-static" >> $env:GITHUB_ENV

      - name: Build dear-imgui-sys (Release)
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (inputs.crates == 'all' || contains(inputs.crates, 'all') || contains(inputs.crates, 'dear-imgui-sys')))
        run: cargo build -p dear-imgui-sys --release --target ${{ matrix.target }}
        env:
          TARGET: ${{ matrix.target }}

      - name: Package dear-imgui-sys static library + headers
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (inputs.crates == 'all' || contains(inputs.crates, 'all') || contains(inputs.crates, 'dear-imgui-sys')))
        run: cargo run -p dear-imgui-sys --features package-bin --bin package --release --target ${{ matrix.target }}
        env:
          IMGUI_SYS_PACKAGE_DIR: ${{ github.workspace }}/packages
          IMGUI_SYS_PKG_CRT: ${{ matrix.crt }}
          TARGET: ${{ matrix.target }}

      - name: Build dear-imgui-sys (Release, freetype)
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (inputs.crates == 'all' || contains(inputs.crates, 'all') || contains(inputs.crates, 'dear-imgui-sys')))
        run: cargo build -p dear-imgui-sys --release --no-default-features --features "freetype" --target ${{ matrix.target }}
        env:
          TARGET: ${{ matrix.target }}

      - name: Package dear-imgui-sys static library + headers (freetype)
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (inputs.crates == 'all' || contains(inputs.crates, 'all') || contains(inputs.crates, 'dear-imgui-sys')))
        run: |
          IMGUI_SYS_PKG_FEATURES=freetype cargo run -p dear-imgui-sys --features package-bin --bin package --release --target ${{ matrix.target }}
        env:
          IMGUI_SYS_PACKAGE_DIR: ${{ github.workspace }}/packages
          IMGUI_SYS_PKG_CRT: ${{ matrix.crt }}
          TARGET: ${{ matrix.target }}

      - name: Build dear-implot-sys (Release)
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (inputs.crates == 'all' || contains(inputs.crates, 'all') || contains(inputs.crates, 'dear-implot-sys')))
        run: cargo build -p dear-implot-sys --release --target ${{ matrix.target }}
        env:
          TARGET: ${{ matrix.target }}

      - name: Package dear-implot-sys static library + headers
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (inputs.crates == 'all' || contains(inputs.crates, 'all') || contains(inputs.crates, 'dear-implot-sys')))
        run: cargo run -p dear-implot-sys --features package-bin --bin package --release --target ${{ matrix.target }}
        env:
          IMGUI_SYS_PACKAGE_DIR: ${{ github.workspace }}/packages
          IMPLOT_SYS_PKG_CRT: ${{ matrix.crt }}
          TARGET: ${{ matrix.target }}

      - name: Build dear-imnodes-sys (Release)
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (inputs.crates == 'all' || contains(inputs.crates, 'all') || contains(inputs.crates, 'dear-imnodes-sys')))
        run: cargo build -p dear-imnodes-sys --release --target ${{ matrix.target }}
        env:
          TARGET: ${{ matrix.target }}

      - name: Package dear-imnodes-sys static library + headers
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (inputs.crates == 'all' || contains(inputs.crates, 'all') || contains(inputs.crates, 'dear-imnodes-sys')))
        run: cargo run -p dear-imnodes-sys --features package-bin --bin package --release --target ${{ matrix.target }}
        env:
          IMGUI_SYS_PACKAGE_DIR: ${{ github.workspace }}/packages
          IMNODES_SYS_PKG_CRT: ${{ matrix.crt }}
          TARGET: ${{ matrix.target }}

      - name: Build dear-imguizmo-sys (Release)
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (inputs.crates == 'all' || contains(inputs.crates, 'all') || contains(inputs.crates, 'dear-imguizmo-sys')))
        run: cargo build -p dear-imguizmo-sys --release --target ${{ matrix.target }}
        env:
          TARGET: ${{ matrix.target }}

      - name: Package dear-imguizmo-sys static library + headers
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (inputs.crates == 'all' || contains(inputs.crates, 'all') || contains(inputs.crates, 'dear-imguizmo-sys')))
        run: cargo run -p dear-imguizmo-sys --features package-bin --bin package --release --target ${{ matrix.target }}
        env:
          IMGUI_SYS_PACKAGE_DIR: ${{ github.workspace }}/packages
          IMGUIZMO_SYS_PKG_CRT: ${{ matrix.crt }}
          TARGET: ${{ matrix.target }}

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        if: inputs.tag || github.event_name == 'release'
        with:
          tag_name: ${{ inputs.tag || github.ref_name }}
          files: ${{ github.workspace }}/packages/*.tar.gz

      - name: Upload artifact (branch builds)
        if: inputs.branch && !inputs.tag && github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: prebuilt-${{ matrix.target }}${{ matrix.crt && format('-{0}', matrix.crt) || '' }}-${{ inputs.branch }}-${{ github.sha }}
          path: ${{ github.workspace }}/packages/*.tar.gz
          if-no-files-found: error
